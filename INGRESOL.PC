/*****************************************************************
* INGRESOL.PC Version 1.0 - Rev 1.2 - May. 29/90.
*
* ingresol.pc. Listado de Los Recibos de caja preimpresos.
*
* Uso : ingresol codigo_emp device userid/password
*
* Martin A. Toloza L.  Creado Noviembre 28-1997.
* Teodoro Tarud & Cia Ltda.
*
*/
#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>

void titulos();
void lista_facturas();
void lista_cuentas();
void fecha_numero();
void strtri();

EXEC SQL BEGIN DECLARE SECTION;

VARCHAR uid[100];
                                 /* Ingresos_c  */
double  periodo;
double  consecutivo;
VARCHAR fecha         [20];
VARCHAR codigo_cliente[8];
double  nit;
double  codigo_nit;
double  valor_efectivos;
VARCHAR comentarios   [20];
VARCHAR codigo_emp    [5];
VARCHAR numero_ingreso[15];
                                 /* Ingresos_d (C1) */
VARCHAR codigo_bco    [6];
VARCHAR cheque        [12];
double  valor_cheque;
VARCHAR concepto      [51];
VARCHAR clase         [6];
double  numero_factura;
double  valor_factura;
VARCHAR ano_mesd      [20];
VARCHAR consecud      [15];
                                 /* Movtos (C2) */
VARCHAR cuenta        [20];
VARCHAR infa          [20];
double  valor_deb;
double  valor_cre;
                                 /* Nits, Ciudades (C3) */
VARCHAR nomb_clie     [51];
VARCHAR nomb_ciu      [30];
VARCHAR codigo_nita   [10];
                                 /* Control_Ing (C4) */
double  ult_grabado;
double  ult_listado;
                                 /* Control_Ing (C6) */
VARCHAR ultimo        [15];
VARCHAR librob        [4];

EXEC SQL END DECLARE SECTION;
EXEC SQL INCLUDE SQLCA;
                                            /* Variables globales del usuario */
int     con_pag=0;                          /* Contador de Paginas */
int     con_lin=66;                         /* Contador de Lineas  */
int     cl;
int     staora =0;
        		                /* Variables de recepcion para datos */
char *fmtnum(), r_t[100];
char    cadena[100];
double  total_factura;
double  total_cheque;
int     salto1;
int     salto2;


void main(argc, argv)
int     argc;
char    *argv[];
{

char	device[6];
int     i;
double  j;
double  decimal;
double  num;
double  x;

    if (argc < 5)
       {
	printf ("Incorrecta invocacion:\n");
	printf ("Uso : ingresol codigo_emp device libro userid/password@esquema\n");
	printf ("      device : t salida por terminal\n");
	printf ("      device : s salida standar     \n");
	printf ("               Px salida por impresora (x nro printer)\n");
	printf ("               userid/password nombre usuario y password\n");
        exit (1);
       }

       strcpy (codigo_emp.arr, argv[1]);
       codigo_emp.len =        strlen(codigo_emp.arr);
       strcpy (device,         argv[2]);
       strlow (device);
       strcpy (librob.arr,     argv[3]);
       librob.len  =           strlen(librob.arr);

    if (!strpos ("/", argv[4]))
       {
        printf ("user id/password incorrecto.\n");
	exit (1);
       }

    strcpy (uid.arr,    argv[4]);
    uid.len  =          strlen(uid.arr);

/******************************************************
 * Establecer conexion concurrente con ORACLE (orlon) *
 ******************************************************/

    EXEC SQL CONNECT :uid;

    if (sqlca.sqlcode==-1915)
       {
	fprintf (stderr,"Oracle Base de Datos no esta activa. SGA (%d)\n",
		 	sqlca.sqlcode);
        exit (1);
       }
    else
       if (sqlca.sqlcode==-1017)
	  {
	   fprintf (stderr,"User Name/Password es Invalido. Re-intente.\n");
	   exit (1);
	  }
       else
          if (sqlca.sqlcode)
	     exit (1);

    busco_impresora(device);
    abre_impresora("1");

/***************************************
 * Procesar una sentencia SQL (oexec). *
 ***************************************/

    EXEC SQL DECLARE C1 CURSOR FOR
             select codigo_bco, nvl(cheque,0), nvl(valor_chq,0),
                    concepto, clase, nvl(numero_factura,0), nvl(valor,0)
             from   ingresos_d
             where  codigo_emp     = :codigo_emp           and
                    ano_mes        = :ano_mesd             and
                    consecutivo    = :consecud             and
                    libro          = :librob;

    EXEC SQL DECLARE C2 CURSOR FOR
             select cuenta, nvl(infa,0) as infax, nvl(valor_deb,0), nvl(valor_cre,0)
             from   movto_d d, movto_c c
             where  d.codigo_emp     = c.codigo_emp           and
                    d.ano_mes        = c.ano_mes              and
                    d.consecutivo    = c.consecutivo          and
                    d.libro          = :librob                and
                    c.codigo_emp     = to_number(:codigo_emp) and
                    c.clase          = 'RC'                   and
                    c.ano_mes       >= 200601                 and
                    c.comprobante    = to_number(:numero_ingreso);

    EXEC SQL select consecutivo, ult_listado
             into  :ult_grabado, :ult_listado
	     from   control_ing
             where  control_ing.codigo_emp = :codigo_emp;

    if (sqlca.sqlcode != 1403 && sqlca.sqlcode != 0)
        fprintf (stderr, "Error leyendo Control_Ing C4 (%d)\n", sqlca.sqlcode);

    if (ult_listado==0) {
        EXEC SQL select min(numero)  into :consecutivo
                 from   ingresos_c
                 where  codigo_emp = :codigo_emp;

        if (sqlca.sqlcode != 1403 && sqlca.sqlcode != 0)
            fprintf (stderr, "Error leyendo Ingresos_c (%d)\n", sqlca.sqlcode);
        ult_listado=consecutivo-1;
    }
    ult_listado++;

    fprintf(fp,"\n\n\n");
    for (j=ult_listado;j<=ult_grabado;j++) {

         sprintf(numero_ingreso.arr,"%-8.0f",j);
         strtri (numero_ingreso.arr);
         numero_ingreso.len =  strlen(numero_ingreso.arr);

         EXEC SQL select fecha, codigo_cliente, nit, codigo_nit,
                         nvl(valor_efectivos,0), comentarios, ano_mes,
                         consecutivo
                  into :fecha, :codigo_cliente, :nit, :codigo_nit,
                       :valor_efectivos, :comentarios, :periodo, :consecutivo
                  from   ingresos_c
                  where  codigo_emp     = :codigo_emp           and
                         tipo_documento = 'RC'                  and
                         ano_mes       >= 200601                and
                         numero         = :numero_ingreso;
         if (sqlca.sqlcode == -1405 ) {
             if (!strlen(fecha.arr)) {
                 strcpy (fecha.arr, "");
                 fecha.len = 0;
             }
             if (!strlen(codigo_cliente.arr)) {
                 strcpy (codigo_cliente.arr, "");
                 codigo_cliente.len = 0;
             }
             if (!strlen(comentarios.arr)) {
                 strcpy (comentarios.arr, "");
                 comentarios.len = 0;
             }
         }
         else if (sqlca.sqlcode)
             fprintf (stderr, "Error leyendo Ingresos_C (%d)\n", sqlca.sqlcode);

         fecha.arr          [fecha.len]          = '\0';
         codigo_cliente.arr [codigo_cliente.len] = '\0';
         comentarios.arr    [comentarios.len]    = '\0';

         sprintf(ano_mesd.arr,"%-6.0f",periodo);
         ano_mesd.len =  strlen(ano_mesd.arr);
         strtri (ano_mesd.arr);
         ano_mesd.len =  strlen(ano_mesd.arr);
         sprintf(consecud.arr,"%8.0f",consecutivo);
         strtri (consecud.arr);
         consecud.len =  strlen(consecud.arr);
         sprintf(codigo_nita.arr,"%5.0f",codigo_nit);
         codigo_nita.len =  strlen(codigo_nita.arr);

         EXEC SQL select n.nombre, nvl(n.nombre_muni,c.nombre)
                  into :nomb_clie, :nomb_ciu
     	          from  nits n, ciudades c
                  where n.codigo_nit = to_number(:codigo_nita) and
                        n.codigo_ciu = c.codigo
                  group by n.nombre, n.nombre_muni, c.nombre;

         if (sqlca.sqlcode != 1403 && sqlca.sqlcode != 0)
             fprintf (stderr, "Error leyendo Nits C3 (%d)\n", sqlca.sqlcode);

         nomb_clie.arr [nomb_clie.len] = '\0';
         nomb_ciu.arr  [nomb_ciu.len]  = '\0';
         EXEC SQL OPEN C1;
         lista_facturas();

         EXEC SQL OPEN C2;
         lista_cuentas();
         num=j/2;
         decimal=modf(num,&x);
         if (decimal==0) {
             for (i=1;i<=26-con_lin;i++) {
                  fprintf (fp,"\n");
             }
         }
         else {
               for (i=1;i<=25-con_lin;i++) {
                    fprintf (fp,"\n");
               }
         }
         total_factura=0;
         total_cheque=0;
         EXEC SQL CLOSE C1;
         EXEC SQL CLOSE C2;
    }
    sprintf(ultimo.arr,"%8.0f",ult_grabado);
    ultimo.len =  strlen(ultimo.arr);

    EXEC SQL update control_ing
	     set ult_listado    = to_number(:ultimo)
             where codigo_emp   = to_number(:codigo_emp);

/*****************************************
** COMMIT LOS CAMBIOS A LA BASE DE DATOS *
******************************************/

    cierre_impresora();

    EXEC SQL CLOSE C1;
    EXEC SQL CLOSE C2;

    EXEC SQL COMMIT WORK RELEASE;

    exit   (0);
}

/************************
* TITULOS()
*    Imprime titulos en el archivo de spool.
*/

void titulos()
{

    char wcadena[10];

    strcpy  (cadena,fecha.arr);
    strcpy  (wcadena, cadena);
    fecha_numero(wcadena);
    strcpy  (cadena, wcadena);

    fprintf (fp,"%s%47s%12s%7s\n\n",diezcpi,numero_ingreso.arr,cadena,codigo_cliente.arr);
    strorg(nomb_ciu.arr,1,17);
    strcpy(cadena,nomb_clie.arr);
    strcat(cadena,"-");
    strcat(cadena,comentarios.arr);
    fprintf (fp,"%-51s%-17s\n\n",cadena,nomb_ciu.arr);
    con_lin = 4;
}

void lista_facturas()
{
 int i;
 staora  = 0;
 while (staora == 0) {

        EXEC SQL FETCH C1 INTO :codigo_bco, :cheque, :valor_cheque, :concepto,
                               :clase, :numero_factura, :valor_factura;

        staora  = sqlca.sqlcode;
        if (staora ==  1403) break;
        if (staora == -1405) {
            staora  = 0;
            if (!strlen(codigo_bco.arr)) {
                strcpy (codigo_bco.arr, "");
                codigo_bco.len = 0;
            }
            if (!strlen(cheque.arr)) {
                strcpy (cheque.arr, "");
                cheque.len = 0;
            }
            if (!strlen(concepto.arr)) {
                strcpy (concepto.arr, "");
                concepto.len = 0;
            }
            if (!strlen(clase.arr)) {
                strcpy (clase.arr, "");
                clase.len = 0;
            }
        }
        else if (staora)
                 fprintf (stderr, "Error leyendo Ingresos_D (%d)\n", staora);

        codigo_bco.arr     [codigo_bco.len]     = '\0';
        cheque.arr         [cheque.len]         = '\0';
        concepto.arr       [concepto.len]       = '\0';
        clase.arr          [clase.len]          = '\0';

        if (con_lin > 11)
           titulos();
        sprintf(cadena,"%9s",cheque.arr);
        fprintf(fp,"%-4s%9s",codigo_bco.arr,fmtnum("zzzzzzzzz",cadena,r_t));
        sprintf(cadena,"%7.2f",valor_cheque);
        fprintf(fp,"%13s",fmtnum("z,zzz,zzz.zz",cadena,r_t));
        sprintf(cadena,"%6.2f",numero_factura);
        strorg(concepto.arr,1,18);
        if (numero_factura == 0)
            strcpy(clase.arr," ");
        fprintf(fp," %-18s%2s%6s",concepto.arr,clase.arr,fmtnum("zzzzzz",cadena,r_t));
        sprintf(cadena,"%7.2f",valor_factura);
        fprintf(fp,"%14s\n",fmtnum("zz,zzz,zzz.zz",cadena,r_t));
        total_cheque +=valor_cheque;
        total_factura+=valor_factura;
        con_lin++;
  }
        cl=con_lin;
        for (i=1;i<11-cl;i++) {
             fprintf (fp,"\n");
             con_lin++;
        }
        sprintf(cadena,"%7.2f",valor_efectivos);
        fprintf(fp,"%27s\n",fmtnum("z,zzz,zzz.zz",cadena,r_t));
        sprintf(cadena,"%7.2f",total_cheque+valor_efectivos);
        fprintf(fp,"%27s",fmtnum("z,zzz,zzz.zz",cadena,r_t));
        sprintf(cadena,"%7.2f",total_factura);
        fprintf(fp,"%40s\n\n",fmtnum("z,zzz,zzz.zz",cadena,r_t));
        con_lin+=3;
}

void lista_cuentas()
{
 staora  = 0;
 while (staora == 0) {

        EXEC SQL FETCH C2 INTO :cuenta, :infa, :valor_deb, :valor_cre;

        staora  = sqlca.sqlcode;
        if (sqlca.sqlcode == 1403) break;

        if (sqlca.sqlcode != 1403 && sqlca.sqlcode != 0)
            fprintf (stderr, "Error leyendo C2 (%d)\n", sqlca.sqlcode);

        cuenta.arr  [cuenta.len] = '\0';
        infa.arr    [infa.len]   = '\0';

//        sprintf(cadena,"%12s",infa.arr);
        fprintf(fp,"%-10s%-15s ",cuenta.arr,infa.arr);
        sprintf(cadena,"%9.2f",valor_deb);
        fprintf(fp,"%28s",fmtnum("zzz,zzz,zzz.zz",cadena,r_t));
        sprintf(cadena,"%9.2f",valor_cre);
        fprintf(fp,"%14s\n",fmtnum("zzz,zzz,zzz.zz",cadena,r_t));
        con_lin++;
  }
}

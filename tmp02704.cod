
/*****************************************************************
* BALANCEP.C Version 1.0 - Rev 1.2 - Jun. 30/92.
*
* anexobal.c. Anexo al balance de prueba
*
* Uso: anexobal codigo_emp aamm cuentai cuentaf device copias userid/password\n");
*
* Mario E. Santiago I. Creado Noviembre 19-1993.
* Teodoro Tarud & Cia Ltda.
*
*/

#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <setjmp.h>
#include <stdlib.h>
#include <math.h>

void trabajo();
void titulos();
void lista_balance();
void imprime_acumulados();
void imprime_acumulanit();
void ver_anexo();
void leer_articulos();
void leer_bienes();
void leer_bancos();
void leer_varios();
void leer_import();
void totales();

/* EXEC SQL BEGIN DECLARE SECTION; */ 


/* VARCHAR uid[100]; */ 
struct { unsigned short len; unsigned char arr[100]; } uid;

				     /* Parametros de comunicacion con ORACLE */
/* VARCHAR nomb_emp   [61]; */ 
struct { unsigned short len; unsigned char arr[61]; } nomb_emp;

double  nit;
int     digito;
/* VARCHAR codigo_emp [03]; */ 
struct { unsigned short len; unsigned char arr[3]; } codigo_emp;


/* VARCHAR cuenta     [20]; */ 
struct { unsigned short len; unsigned char arr[20]; } cuenta;

/* VARCHAR nombre_cta [70]; */ 
struct { unsigned short len; unsigned char arr[70]; } nombre_cta;

/* VARCHAR db_cr      [03]; */ 
struct { unsigned short len; unsigned char arr[3]; } db_cr;

int     nivel;
double  valor_deb;
double  valor_cre;
double  valors;

/* VARCHAR ano_mesi   [20]; */ 
struct { unsigned short len; unsigned char arr[20]; } ano_mesi;

/* VARCHAR ano_mes    [20]; */ 
struct { unsigned short len; unsigned char arr[20]; } ano_mes;

/* VARCHAR cuentai    [20]; */ 
struct { unsigned short len; unsigned char arr[20]; } cuentai;

/* VARCHAR cuentaf    [20]; */ 
struct { unsigned short len; unsigned char arr[20]; } cuentaf;


/* VARCHAR cuentan    [20]; */ 
struct { unsigned short len; unsigned char arr[20]; } cuentan;

/* VARCHAR cuentax    [20]; */ 
struct { unsigned short len; unsigned char arr[20]; } cuentax;


/* VARCHAR	nombre_var [50]; */ 
struct { unsigned short len; unsigned char arr[50]; } nombre_var;

/* VARCHAR	nombre_bco [50]; */ 
struct { unsigned short len; unsigned char arr[50]; } nombre_bco;

/* VARCHAR	nombre_art [50]; */ 
struct { unsigned short len; unsigned char arr[50]; } nombre_art;

/* VARCHAR	nombre_imp [50]; */ 
struct { unsigned short len; unsigned char arr[50]; } nombre_imp;

/* VARCHAR	nombre_bien[50]; */ 
struct { unsigned short len; unsigned char arr[50]; } nombre_bien;

/* VARCHAR	nombre_ctan[50]; */ 
struct { unsigned short len; unsigned char arr[50]; } nombre_ctan;

/* VARCHAR	nombre_ctam[50]; */ 
struct { unsigned short len; unsigned char arr[50]; } nombre_ctam;

/* VARCHAR	codigo     [20]; */ 
struct { unsigned short len; unsigned char arr[20]; } codigo;

/* VARCHAR	codigob    [20]; */ 
struct { unsigned short len; unsigned char arr[20]; } codigob;

/* VARCHAR infa       [20]; */ 
struct { unsigned short len; unsigned char arr[20]; } infa;

/* VARCHAR infb       [20]; */ 
struct { unsigned short len; unsigned char arr[20]; } infb;

/* VARCHAR infc       [20]; */ 
struct { unsigned short len; unsigned char arr[20]; } infc;

/* VARCHAR infd       [20]; */ 
struct { unsigned short len; unsigned char arr[20]; } infd;

double  total_no5;
double  valor_debn;
double  valor_cren;
/* VARCHAR vecinf     [20][20]; */ 
struct { unsigned short len; unsigned char arr[22]; } vecinf[20];

/* VARCHAR cuentab    [20]; */ 
struct { unsigned short len; unsigned char arr[20]; } cuentab;

/* VARCHAR veca       [20]; */ 
struct { unsigned short len; unsigned char arr[20]; } veca;

/* VARCHAR vecb       [20]; */ 
struct { unsigned short len; unsigned char arr[20]; } vecb;

/* VARCHAR vecc       [20]; */ 
struct { unsigned short len; unsigned char arr[20]; } vecc;

/* VARCHAR vecd       [20]; */ 
struct { unsigned short len; unsigned char arr[20]; } vecd;

double  nitn;
/* VARCHAR sucursal   [10]; */ 
struct { unsigned short len; unsigned char arr[10]; } sucursal;

/* VARCHAR sucursali  [10]; */ 
struct { unsigned short len; unsigned char arr[10]; } sucursali;

/* VARCHAR sucursalf  [10]; */ 
struct { unsigned short len; unsigned char arr[10]; } sucursalf;

/* VARCHAR sucursalb  [10]; */ 
struct { unsigned short len; unsigned char arr[10]; } sucursalb;

/* VARCHAR sucursaln  [10]; */ 
struct { unsigned short len; unsigned char arr[10]; } sucursaln;

/* VARCHAR cen_cosi   [04]; */ 
struct { unsigned short len; unsigned char arr[4]; } cen_cosi;

/* VARCHAR cen_cosf   [04]; */ 
struct { unsigned short len; unsigned char arr[4]; } cen_cosf;

/* VARCHAR cen_cosb   [04]; */ 
struct { unsigned short len; unsigned char arr[4]; } cen_cosb;

int     cen_cosn;
int     cen_cos;
/* VARCHAR nomb_suci  [12]; */ 
struct { unsigned short len; unsigned char arr[12]; } nomb_suci;

/* VARCHAR nomb_sucf  [12]; */ 
struct { unsigned short len; unsigned char arr[12]; } nomb_sucf;


/* EXEC SQL END DECLARE SECTION; */ 

/* EXEC SQL INCLUDE SQLCA;
 */ 
/* Copyright (c) 1985,1986 by Oracle Corporation. */

/*
NAME
  SQLCA : SQL Communications Area.
FUNCTION
  Contains no code. Oracle fills in the SQLCA with status info
  during the execution of a SQL stmt.
NOTES
  If the symbol SQLCA_STORAGE_CLASS is defined, then the SQLCA
  will be defined to have this storage class. For example:

    #define SQLCA_STORAGE_CLASS extern

  will define the SQLCA as an extern.

  If the symbol SQLCA_INIT is defined, then the SQLCA will be
  statically initialized. Although this is not necessary in order
  to use the SQLCA, it is a good pgming practice not to have
  unitialized variables. However, some C compilers/OS's don't
  allow automatic variables to be init'd in this manner. Therefore,
  if you are INCLUDE'ing the SQLCA in a place where it would be
  an automatic AND your C compiler/OS doesn't allow this style
  of initialization, then SQLCA_INIT should be left undefined --
  all others can define SQLCA_INIT if they wish.

  If the symbol SQLCA_NONE is defined, then the SQLCA variable will
  not be defined at all.  The symbol SQLCA_NONE should not be defined
  in source modules that have embedded SQL.  However, source modules
  that have no embedded SQL, but need to manipulate a sqlca struct
  passed in as a parameter, can set the SQLCA_NONE symbol to avoid
  creation of an extraneous sqlca variable.

*/

#ifndef SQLCA
#define SQLCA 1

struct   sqlca
         {
         /* ub1 */ char    sqlcaid[8];
         /* b4  */ long    sqlabc;
         /* b4  */ long    sqlcode;
         struct
           {
           /* ub2 */ unsigned short sqlerrml;
           /* ub1 */ char           sqlerrmc[70];
           } sqlerrm;
         /* ub1 */ char    sqlerrp[8];
         /* b4  */ long    sqlerrd[6];
         /* ub1 */ char    sqlwarn[8];
         /* ub1 */ char    sqlext[8];
         };

#ifndef SQLCA_NONE 
#ifdef SQLCA_STORAGE_CLASS
  SQLCA_STORAGE_CLASS struct sqlca sqlca
#else
         struct sqlca sqlca
#endif

# ifdef  SQLCA_INIT
         = {
         {'S', 'Q', 'L', 'C', 'A', ' ', ' ', ' '},
         sizeof(struct sqlca),
         0,
         { 0, {0}},
         {'N', 'O', 'T', ' ', 'S', 'E', 'T', ' '},
         {0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0}
         }
#endif /* SQLCA_INIT */
         ;

#endif 

#endif 

/* end SQLCA */


double  valor_niv3=0;
double  valor_niv4=0;
char    cuenta_adl  [20];
char    cuenta_an   [20];
char    sucursal_an [05];
int     cen_cos_an;
char    g_nombre    [70];
char    nombre_ctan2[50];
char    nombre_adl  [50];
int     traidos;
int     num_ret;
int     loop_4;
int     staora;
int     staorad  = 0;
int     staoran  = 0;
int     staorax  = 0;
char    pagina[4];                                   /* Contador de Paginas */
int     con_pag=0;                                   /* Contador de Paginas */
int     con_lin=66;                                   /* Contador de Lineas  */
int     cl;
        		                /* Variables de recepcion para datos */
char *fmtnum(), r_t[100];
int     diai;
int     mesi;
int     anoi;
double  nitn_an;
char    codigo_an[20];
double  valor_debx;
double  valor_crex;
dou
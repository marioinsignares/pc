
/*****************************************************************
* NOMLINOV  Version 1.0 - Rev 1.2 - Feb. 11/99.
*
* nomlinov.c Programa de liquidaci¢n de novedades
*
* Uso : nomlinov codigo_emp device copias userid/password
*
* Mario E. Santiago I. Creado Febrero 11-2000.
* Teodoro Tarud & Cia Ltda.
*
*/

#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>

double redondo();
/* EXEC SQL BEGIN DECLARE SECTION; */ 


/* VARCHAR uid[100]; */ 
struct { unsigned short len; unsigned char arr[100]; } uid;

/* VARCHAR codigo_emp     [05]; */ 
struct { unsigned short len; unsigned char arr[5]; } codigo_emp;

/* VARCHAR ano_mesi       [20]; */ 
struct { unsigned short len; unsigned char arr[20]; } ano_mesi;

/* VARCHAR ano_mesf       [20]; */ 
struct { unsigned short len; unsigned char arr[20]; } ano_mesf;

/* VARCHAR periodo        [04]; */ 
struct { unsigned short len; unsigned char arr[4]; } periodo;

/* VARCHAR w_arch         [100]; */ 
struct { unsigned short len; unsigned char arr[100]; } w_arch;

int     i;
int     j;
/* VARCHAR ano            [6]; */ 
struct { unsigned short len; unsigned char arr[6]; } ano;

/* VARCHAR nit            [30]; */ 
struct { unsigned short len; unsigned char arr[30]; } nit;

/* VARCHAR nombre         [100]; */ 
struct { unsigned short len; unsigned char arr[100]; } nombre;

/* VARCHAR base           [30]; */ 
struct { unsigned short len; unsigned char arr[30]; } base;

/* VARCHAR valor          [30]; */ 
struct { unsigned short len; unsigned char arr[30]; } valor;


/* EXEC SQL END DECLARE SECTION; */ 

/* EXEC SQL INCLUDE SQLCA;
 */ 
/*
 * $Header: sqlca.h,v 1.3 1994/12/12 19:27:27 jbasu Exp $ sqlca.h 
 */

/* Copyright (c) 1985,1986, 1998 by Oracle Corporation. */
 
/*
NAME
  SQLCA : SQL Communications Area.
FUNCTION
  Contains no code. Oracle fills in the SQLCA with status info
  during the execution of a SQL stmt.
NOTES
  **************************************************************
  ***                                                        ***
  *** This file is SOSD.  Porters must change the data types ***
  *** appropriately on their platform.  See notes/pcport.doc ***
  *** for more information.                                  ***
  ***                                                        ***
  **************************************************************

  If the symbol SQLCA_STORAGE_CLASS is defined, then the SQLCA
  will be defined to have this storage class. For example:
 
    #define SQLCA_STORAGE_CLASS extern
 
  will define the SQLCA as an extern.
 
  If the symbol SQLCA_INIT is defined, then the SQLCA will be
  statically initialized. Although this is not necessary in order
  to use the SQLCA, it is a good pgming practice not to have
  unitialized variables. However, some C compilers/OS's don't
  allow automatic variables to be init'd in this manner. Therefore,
  if you are INCLUDE'ing the SQLCA in a place where it would be
  an automatic AND your C compiler/OS doesn't allow this style
  of initialization, then SQLCA_INIT should be left undefined --
  all others can define SQLCA_INIT if they wish.

  If the symbol SQLCA_NONE is defined, then the SQLCA variable will
  not be defined at all.  The symbol SQLCA_NONE should not be defined
  in source modules that have embedded SQL.  However, source modules
  that have no embedded SQL, but need to manipulate a sqlca struct
  passed in as a parameter, can set the SQLCA_NONE symbol to avoid
  creation of an extraneous sqlca variable.
 
MODIFIED
    lvbcheng   07/31/98 -  long to int
    jbasu      12/12/94 -  Bug 217878: note this is an SOSD file
    losborne   08/11/92 -  No sqlca var if SQLCA_NONE macro set 
  Clare      12/06/84 - Ch SQLCA to not be an extern.
  Clare      10/21/85 - Add initialization.
  Bradbury   01/05/86 - Only initialize when SQLCA_INIT set
  Clare      06/12/86 - Add SQLCA_STORAGE_CLASS option.
*/
 
#ifndef SQLCA
#define SQLCA 1
 
struct   sqlca
         {
         /* ub1 */ char    sqlcaid[8];
         /* b4  */ int     sqlabc;
         /* b4  */ int     sqlcode;
         struct
           {
           /* ub2 */ unsigned short sqlerrml;
           /* ub1 */ char           sqlerrmc[70];
           } sqlerrm;
         /* ub1 */ char    sqlerrp[8];
         /* b4  */ int     sqlerrd[6];
         /* ub1 */ char    sqlwarn[8];
         /* ub1 */ char    sqlext[8];
         };

#ifndef SQLCA_NONE 
#ifdef   SQLCA_STORAGE_CLASS
SQLCA_STORAGE_CLASS struct sqlca sqlca
#else
         struct sqlca sqlca
#endif
 
#ifdef  SQLCA_INIT
         = {
         {'S', 'Q', 'L', 'C', 'A', ' ', ' ', ' '},
         sizeof(struct sqlca),
         0,
         { 0, {0}},
         {'N', 'O', 'T', ' ', 'S', 'E', 'T', ' '},
         {0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0}
         }
#endif
         ;
#endif
 
#endif
 
/* end SQLCA */


FILE    *fp1;
FILE    *fp2;

char *fmtnum(), r_t[100];
int     con_pag;                                   /* Contador de Paginas */
int     con_lin=66;                                /* Contador de Lineas  */
int     nconsec=0;
char    copias[6];

int	staora = 0;
char    formas[5];
char    fechas[100];
char    fecha[30];
char    cadena[100];
char    comando[100];
char    csubsrv[20];
char    aestado[2][8];
double  ndeven;
double  ndeduc;
char    registro[170];

void lista_empresa();
void acumule_nov();
void regcontrol();
void regtraslado();

void main(argc, argv)
int     argc;
char    *argv[];
{
char    device[10];
int     status = 0;

if (argc < 6)
   {
    printf ("Incorrecta invocacion:\n");
    printf ("Uso : retencpl codigo_emp año mes_inicial mes_final periodo device copias archivo userid/password\n");
    printf ("      device : t salida por terminal\n");
    printf ("               Px salida por impresora (x nro printer)\n");
    printf ("               userid/password nombre usuario y password\n");
    printf ("archivo: nombre archivo con toda su rura ");
    exit (1);
   }

strcpy (codigo_emp.arr, argv[1]);
codigo_emp.len = strlen(codigo_emp.arr);
strcpy (ano.arr, argv[2]);
ano.len = strlen(ano.arr);
strcpy (ano_mesi.arr, argv[3]);
ano_mesi.len = strlen(ano_mesi.arr);
strcpy (ano_mesf.arr, argv[4]);
ano_mesf.len = strlen(ano_mesf.arr);
strcpy (periodo.arr, argv[5]);
periodo.len = strlen(periodo.arr);
strcpy (device,             argv[6]);
strlow (device);
strcpy (copias,             argv[7]);
strcpy (w_arch.arr,         argv[8]);
w_arch.len = strlen(w_arch.arr);
if (!strpos ("/", argv[9]))
   {
    printf ("user id/password incorrecto.\n");
    exit (1);
   }

strcpy (uid.arr,   argv[9]);
uid.len   =        strlen(uid.arr);

sprintf(ano_mesi.arr,"%4s%02d",ano,atoi(ano_mesi.arr));
sprintf(ano_mesf.arr,"%4s%02d",ano,atoi(ano_mesf.arr));

/******************************************************
 * Establecer conexion concurrente con ORACLE (orlon) *
 ******************************************************/
    /* EXEC SQL CONNECT :uid; */ 

{
    struct sqlexd sqlstm;

    sqlstm.sqlvsn = 10;
    sqlstm.arrsiz = 4;
    sqlstm.sqladtp = &sqladt;
    sqlstm.sqltdsp = &sqltds;
    sqlstm.iters = (unsigned int  )100;
    sqlstm.offset = (unsigned int  )5;
    sqlstm.cud = sqlcud0;
    sqlstm.sqlest = (unsigned char  *)&sqlca;
    sqlstm.sqlety = (unsigned short)256;
    sqlstm.occurs = (unsigned int  )0;
    sqlstm.sqhstv[0] = (         void  *)&uid;
    sqlstm.sqhstl[0] = (unsigned int  )102;
    sqlstm.sqhsts[0] = (         int  )102;
    sqlstm.sqindv[0] = (         void  *)0;
    sqlstm.sqinds[0] = (         int  )0;
    sqlstm.sqharm[0] = (unsigned int  )0;
    sqlstm.sqadto[0] = (unsigned short )0;
    sqlstm.sqtdso[0] = (unsigned short )0;
    sqlstm.sqphsv = sqlstm.sqhstv;
    sqlstm.sqphsl = sqlstm.sqhstl;
    sqlstm.sqphss = sqlstm.sqhsts;
    sqlstm.sqpind = sqlstm.sqindv;
    sqlstm.sqpins = sqlstm.sqinds;
    sqlstm.sqparm = sqlstm.sqharm;
    sqlstm.sqparc = sqlstm.sqharc;
    sqlstm.sqpadto = sqlstm.sqadto;
    sqlstm.sqptdso = sqlstm.sqtdso;
    sqlcxt((void **)0, &sqlctx, &sqlstm, &sqlfpn);
}



    if (sqlca.sqlcode==-1915)
       {
	fprintf (stderr,"Oracle Base de Datos no esta activa. SGA (%d)\n",
		 	sqlca.sqlcode);
        exit (1);
       }
    else
       if (sqlca.sqlcode==-1017)
	  {
	   fprintf (stderr,"User Name/Password es Invalido. Re-intente.\n");
	   exit (1);
	  }
       else
          if (sqlca.sqlcode)
	     exit (1);

    busco_impresora(device);
    abre_impresora(copias);

/**********************************************
 * Procesar una sentencia SQL (oexec).        *
 **********************************************/

  CURSOR  C1
  IS  
  select  n.nit,
          n.nombre,
          to_char((-1*(decode(co.db_cr,'DB',sum(valor_deb),'CR',sum(valor_cre),'DB_CR',sum(valor_deb-valor_cre))))*1000/9.6,'999999999999') Base,
          to_char(-1*(decode(co.db_cr,'DB',sum(valor_deb),'CR',sum(valor_cre),'DB_CR',sum(valor_deb-valor_cre))),'999999999999') Valor
  from    acumulanit a, nits n, plan p, ciudades c, conceptodian_c co, conceptodian_d cd
  where   n.codigo_nit(+)       = a.codigo_nit                and 
          n.codigo_ciu          = c.codigo (+)                and 
          a.codigo_emp          = :codigo_emp                 and
          a.codigo_emp          = p.codigo_emp                and 
          p.cuenta  = 
          substr(a.cuenta,1,decode(to_number(nivel),0,1,to_number(nivel)*2)) and
          ano_mes              >=  :ano_mesi                  and 
          ano_mes              <=  :ano_mesf                  and 
          p.cuenta             >=        cd.cuenta            and 
          p.cuenta             <=        cd.cuentaf           and 
          length(p.cuenta)      =  length(cd.cuenta)          and          
          co.formato            =        cd.formato           and 
          co.concepto           =        cd.concepto          and
          co.concepto           =        '2320'               and
          co.formato            =        '1002'                          
  group by co.concepto,co.formato,co.monto,co.db_cr,n.nit, n.nombre
  order by n.nit,valor;

  /* EXEC SQL OPEN C1; */ 


  if ((fp1 = fopen(w_arch.arr, "w")) == NULL) {
      fprintf (stderr,"Error abriendo archivo pipe \n");
      exit (1);
  }
  fopen(fp1);
  lista_empresa();
  fclose(fp1);

  /* EXEC SQL COMMIT WORK RELEASE; */ 

  /* EXEC SQL CLOSE C1; */ 


  cierre_impresora();
  exit   (0);
}

void lista_empresa()
{

 staora  = 0;

 /* EXEC SQL FETCH C1 INTO :nit, :nombre, :base, :valor; */ 


 staora  = sqlca.sqlcode;

 if (staora == -1405) {
    staora = 0;
 }
 if (staora) {
    fprintf (stderr, "Error leyendo C1 (%d)\n", staora);
    exit   (1);
 }

 nit.arr          [nit.len]        = '\0';
 nombre.arr       [nombre.len]     = '\0';
 base.arr         [base.len]       = '\0';
 valor.arr        [valor.len]      = '\0';

 while (staora == 0) {

      /* EXEC SQL FETCH C1 INTO :nit, :nombre, :base, :valor; */ 

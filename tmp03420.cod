
/*****************************************************************
* MAYORYB.PC Version 1.0 - Rev 1.2 - Jun. 30/92.
*
* mayoryb.pc. Libro de Mayor y Balnaces
*
* Uso : mayoryb codigo_emp aamm copias device timbrado (s/n) userid/password
*
* Martin A. Toloza L. Creado Diciembre 23-1997.
* Teodoro Tarud & Cia Ltda.
*
*/

#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <setjmp.h>
#include <stdlib.h>
#include <math.h>

void titulos();
void imprime_anterior();
void imprime_actual();
void imprime_sumas();
void imprime_del_mes();
void lista_balance();
void imprime_anterior();
void imprime_actual();
void imprime_sumas();
void totales();
void leer_C2();
void leer_C3();

				     /* Parametros de comunicacion con ORACLE */
        		             /* Variables de recepcion para datos */
/* EXEC SQL BEGIN DECLARE SECTION; */ 


/* VARCHAR uid[100]; */ 
struct { unsigned short len; unsigned char arr[100]; } uid;

                                 /* Empresas (C1) */
/* VARCHAR nomb_emp      [50]; */ 
struct { unsigned short len; unsigned char arr[50]; } nomb_emp;

double  nit;
int     digito;
/* VARCHAR codigo_emp    [6]; */ 
struct { unsigned short len; unsigned char arr[6]; } codigo_emp;

/* VARCHAR niv           [2]; */ 
struct { unsigned short len; unsigned char arr[2]; } niv;

                                 /* Acumulados (C2) */
/* VARCHAR cuenta        [20]; */ 
struct { unsigned short len; unsigned char arr[20]; } cuenta;

/* VARCHAR nombre_cta    [70]; */ 
struct { unsigned short len; unsigned char arr[70]; } nombre_cta;

double  valor_deb;
double  valor_cre;
/* VARCHAR db_cr         [6]; */ 
struct { unsigned short len; unsigned char arr[6]; } db_cr;

/* VARCHAR ano_mesi      [20]; */ 
struct { unsigned short len; unsigned char arr[20]; } ano_mesi;

/* VARCHAR ano_mes       [20]; */ 
struct { unsigned short len; unsigned char arr[20]; } ano_mes;

                                 /* Acumulados (C3) */
/* VARCHAR cuentam       [20]; */ 
struct { unsigned short len; unsigned char arr[20]; } cuentam;

/* VARCHAR nombre_ctam   [70]; */ 
struct { unsigned short len; unsigned char arr[70]; } nombre_ctam;

double  valor_debm;
double  valor_crem;
/* VARCHAR db_crm        [6]; */ 
struct { unsigned short len; unsigned char arr[6]; } db_crm;


/* VARCHAR sucursali     [10]; */ 
struct { unsigned short len; unsigned char arr[10]; } sucursali;

/* VARCHAR sucursalf     [10]; */ 
struct { unsigned short len; unsigned char arr[10]; } sucursalf;

/* VARCHAR cen_cosi      [04]; */ 
struct { unsigned short len; unsigned char arr[4]; } cen_cosi;

/* VARCHAR cen_cosf      [04]; */ 
struct { unsigned short len; unsigned char arr[4]; } cen_cosf;

/* VARCHAR nomb_suci     [12]; */ 
struct { unsigned short len; unsigned char arr[12]; } nomb_suci;

/* VARCHAR nomb_sucf     [12]; */ 
struct { unsigned short len; unsigned char arr[12]; } nomb_sucf;


/* EXEC SQL END DECLARE SECTION; */ 

/* EXEC SQL INCLUDE SQLCA;
 */ 
/* Copyright (c) 1985,1986 by Oracle Corporation. */

/*
NAME
  SQLCA : SQL Communications Area.
FUNCTION
  Contains no code. Oracle fills in the SQLCA with status info
  during the execution of a SQL stmt.
NOTES
  If the symbol SQLCA_STORAGE_CLASS is defined, then the SQLCA
  will be defined to have this storage class. For example:

    #define SQLCA_STORAGE_CLASS extern

  will define the SQLCA as an extern.

  If the symbol SQLCA_INIT is defined, then the SQLCA will be
  statically initialized. Although this is not necessary in order
  to use the SQLCA, it is a good pgming practice not to have
  unitialized variables. However, some C compilers/OS's don't
  allow automatic variables to be init'd in this manner. Therefore,
  if you are INCLUDE'ing the SQLCA in a place where it would be
  an automatic AND your C compiler/OS doesn't allow this style
  of initialization, then SQLCA_INIT should be left undefined --
  all others can define SQLCA_INIT if they wish.

  If the symbol SQLCA_NONE is defined, then the SQLCA variable will
  not be defined at all.  The symbol SQLCA_NONE should not be defined
  in source modules that have embedded SQL.  However, source modules
  that have no embedded SQL, but need to manipulate a sqlca struct
  passed in as a parameter, can set the SQLCA_NONE symbol to avoid
  creation of an extraneous sqlca variable.

*/

#ifndef SQLCA
#define SQLCA 1

struct   sqlca
         {
         /* ub1 */ char    sqlcaid[8];
         /* b4  */ long    sqlabc;
         /* b4  */ long    sqlcode;
         struct
           {
           /* ub2 */ unsigned short sqlerrml;
           /* ub1 */ char           sqlerrmc[70];
           } sqlerrm;
         /* ub1 */ char    sqlerrp[8];
         /* b4  */ long    sqlerrd[6];
         /* ub1 */ char    sqlwarn[8];
         /* ub1 */ char    sqlext[8];
         };

#ifndef SQLCA_NONE 
#ifdef SQLCA_STORAGE_CLASS
  SQLCA_STORAGE_CLASS struct sqlca sqlca
#else
         struct sqlca sqlca
#endif

# ifdef  SQLCA_INIT
         = {
         {'S', 'Q', 'L', 'C', 'A', ' ', ' ', ' '},
         sizeof(struct sqlca),
         0,
         { 0, {0}},
         {'N', 'O', 'T', ' ', 'S', 'E', 'T', ' '},
         {0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0}
         }
#endif /* SQLCA_INIT */
         ;

#endif 

#endif 

/* end SQLCA */

                                            /* Variables globales del usuario */
char *fmtnum(), r_t[100];
int     con_pag=0;                                   /* Contador de Paginas */
int     con_lin=66;                                  /* Contador de Lineas  */
int     cl;
int     oraest;
int     oraestm;
int     mesi;
int     anoi;
double  valor_debx=0;
double  valor_crex=0;
double  tot_deb;
double  tot_cre;
double  tot_debm;
double  tot_crem;
double  tot_deba;
double  tot_crea;
char    cadena[100];
char    cadena2[90];
char    cadenon[200];
char    login[20];
char    copias[5];
char	timbrado[2];

void main(argc, argv)
int     argc;
char    *argv[];
{

char	device[6];
int	status = 0;

    if (argc < 11)
       {
	printf ("Incorrecta invocacion:\n");
        printf ("Uso : codigo_emp sucursali sucursalf c.costoi c.costof aaaamm copias device timbrado (s/n) nivel userid/password\n");
	printf ("      device : t salida por terminal\n");
	printf ("      device : s salida standar     \n");
	printf ("               Px salida por impresora (x nro printer)\n");
	printf ("               userid/password nombre usuario y password\n");
        exit (1);
       }
       strcpy (codigo_emp.arr, argv[1]);
       codigo_emp.len = strlen(codigo_emp.arr);

       strcpy (sucursali.arr,  argv[2]);
       sucursali.len  =        strlen(sucursali.arr);
       strcpy (sucursalf.arr,  argv[3]);
       sucursalf.len  =        strlen(sucursalf.arr);
       strcpy (cen_cosi.arr,   argv[4]);
       cen_cosi.len   =        strlen(cen_cosi.arr);
       strcpy (cen_cosf.arr,   argv[5]);
       cen_cosf.len   =        strlen(cen_cosf.arr);

       strcpy (copias,         argv[7]);
       strcpy (device,         argv[8]);
       strlow (device);
       strcpy (timbrado,       argv[9]);
       strlow (timbrado);
       strcpy (niv.arr,        argv[10]);
       niv.len = strlen(niv.arr);

    if (!strpos ("/", argv[11]))
       {
        printf ("user id/password incorrecto.\n");
	exit (1);
       }

    strcpy (uid.arr,   argv[11]);
    uid.len   =        strlen(uid.arr);

/******************************************************
 * Establecer conexion concurrente con ORACLE (orlon) *
 ******************************************************/
    /* EXEC SQL CONNECT :uid; */ 

{
    struct sqlexd sqlstm;

    sqlstm.sqlvsn = 8;
    sqlstm.arrsiz = 3;
    sqlstm.iters = (unsigned long  )100;
    sqlstm.offset = (unsigned short)2;
    sqlstm.cud = sqlcud0;
    sqlstm.sqlest = (unsigned char  *)&sqlca;
    sqlstm.sqlety = (unsigned short)0;
    sqlstm.sqhstv[0] = (unsigned char  *)&uid;
    sqlstm.sqhstl[0] = (unsigned long  )102;
    sqlstm.sqindv[0] = (         short *)0;
    sqlstm.sqharm[0] = (unsigned long )0;
    sqlstm.sqphsv = sqlstm.sqhstv;
    sqlstm.sqphsl = sqlstm.sqhstl;
    sqlstm.sqpind = sqlstm.sqindv;
    sqlstm.sqparm = sqlstm.sqharm;
    sq
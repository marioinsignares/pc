/*****************************************************************
* MAYORYB.PC Version 1.0 - Rev 1.2 - Jun. 30/92.
*
* mayoryb.pc. Libro de Mayor y Balnaces
*
* Uso : mayoryb codigo_emp aamm copias device timbrado (s/n) userid/password
*
* Martin A. Toloza L. Creado Diciembre 23-1997.
* Teodoro Tarud & Cia Ltda.
*
*/

#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <setjmp.h>
#include <stdlib.h>
#include <math.h>

void titulos();
void imprime_anterior();
void imprime_actual();
void imprime_sumas();
void imprime_del_mes();
void lista_balance();
void imprime_anterior();
void imprime_actual();
void imprime_sumas();
void totales();
void leer_C2();
void leer_C3();

				     /* Parametros de comunicacion con ORACLE */
        		             /* Variables de recepcion para datos */
EXEC SQL BEGIN DECLARE SECTION;

VARCHAR uid[100];
                                 /* Empresas (C1) */
VARCHAR nomb_emp      [50];
double  nit;
int     digito;
VARCHAR codigo_emp    [6];
VARCHAR niv           [2];
                                 /* Acumulados (C2) */
VARCHAR cuenta        [20];
VARCHAR nombre_cta    [70];
double  valor_deb;
double  valor_cre;
VARCHAR db_cr         [6];
VARCHAR ano_mesi      [20];
VARCHAR ano_mes       [20];
                                 /* Acumulados (C3) */
VARCHAR cuentam       [20];
VARCHAR nombre_ctam   [70];
double  valor_debm;
double  valor_crem;
VARCHAR db_crm        [6];

VARCHAR sucursali     [10];
VARCHAR sucursalf     [10];
VARCHAR cen_cosi      [04];
VARCHAR cen_cosf      [04];
VARCHAR nomb_suci     [12];
VARCHAR nomb_sucf     [12];
VARCHAR libro         [04];

EXEC SQL END DECLARE SECTION;
EXEC SQL INCLUDE SQLCA;
                                            /* Variables globales del usuario */
char *fmtnum(), r_t[100];
int     con_pag=0;                                   /* Contador de Paginas */
int     con_lin=66;                                  /* Contador de Lineas  */
int     cl;
int     oraest;
int     oraestm;
int     mesi;
int     anoi;
double  valor_debx=0;
double  valor_crex=0;
double  tot_deb;
double  tot_cre;
double  tot_debm;
double  tot_crem;
double  tot_deba;
double  tot_crea;
char    cadena[100];
char    cadena2[90];
char    cadenon[200];
char    login[20];
char    copias[5];
char	timbrado[2];

void main(argc, argv)
int     argc;
char    *argv[];
{

char	device[6];
int	status = 0;

    if (argc < 11)
       {
	      printf ("Incorrecta invocacion:\n");
        printf ("Uso : codigo_emp sucursali sucursalf c.costoi c.costof aaaamm copias device timbrado (s/n) nivel libro(0= COLGAAP 1=IFRS) userid/password\n");
      	printf ("      device : t salida por terminal\n");
      	printf ("      device : s salida standar     \n");
      	printf ("               Px salida por impresora (x nro printer)\n");
        printf ("      libro(0= COLGAAP 1=IFRS)\n");
      	printf ("               userid/password nombre usuario y password\n");
        exit (1);
       }
       strcpy (codigo_emp.arr, argv[1]);
       codigo_emp.len = strlen(codigo_emp.arr);

       strcpy (sucursali.arr,  argv[2]);
       sucursali.len  =        strlen(sucursali.arr);
       strcpy (sucursalf.arr,  argv[3]);
       sucursalf.len  =        strlen(sucursalf.arr);
       strcpy (cen_cosi.arr,   argv[4]);
       cen_cosi.len   =        strlen(cen_cosi.arr);
       strcpy (cen_cosf.arr,   argv[5]);
       cen_cosf.len   =        strlen(cen_cosf.arr);

       strcpy (copias,         argv[7]);
       strcpy (device,         argv[8]);
       strlow (device);
       strcpy (timbrado,       argv[9]);
       strlow (timbrado);
       strcpy (niv.arr,        argv[10]);
       niv.len = strlen(niv.arr);
       strcpy (libro.arr, argv[11]);
       libro.len =        strlen(libro.arr);

    if (!strpos ("/", argv[12]))
       {
        printf ("user id/password incorrecto.\n");
 	      exit (1);
       }

    strcpy (uid.arr,   argv[12]);
    uid.len   =        strlen(uid.arr);

/******************************************************
 * Establecer conexion concurrente con ORACLE (orlon) *
 ******************************************************/
    EXEC SQL CONNECT :uid;

    if (sqlca.sqlcode==-1915)
       {
	fprintf (stderr,"Oracle Base de Datos no esta activa. SGA (%d)\n",
		 	sqlca.sqlcode);
        exit (1);
       }
    else
       if (sqlca.sqlcode==-1017)
	  {
	   fprintf (stderr,"User Name/Password es Invalido. Re-intente.\n");
	   exit (1);
	  }
       else
          if (sqlca.sqlcode)
	     exit (1);

    busco_impresora(device);
    abre_impresora(copias);

/**********************************************
 * Procesar una sentencia SQL (oexec).        *
 **********************************************/
    strcpy (ano_mes.arr,   argv[6]);
    ano_mes.len = strlen(ano_mes.arr);
    if (ano_mes.len != 6) {
       printf("Error, la el periodo debe ser asi: AAAAMM");
       getchar();
       exit (1);
    }
    strcpy (cadena,         argv[6]);
    strorg (cadena,1,4);
    anoi=atoi(cadena);
    strcpy (cadena,         argv[6]);
    strorg (cadena,5,2);
    mesi=atoi(cadena);
    if (mesi==13)
        mesi=12;
    sprintf (ano_mesi.arr,"%d%02d",anoi-1,13);
    ano_mesi.len =       strlen(ano_mesi.arr);

    EXEC SQL select n.nombre, n.nit, n.digito
                    into :nomb_emp, :nit, :digito
             from   nits n, empresas e
             where  n.codigo_nit = e.codigo_nit and
                    e.codigo_emp =  :codigo_emp;

    if (sqlca.sqlcode != 1403 && sqlca.sqlcode != 0)
        fprintf (stderr, "Error leyendo Empresa (%d)\n", sqlca.sqlcode);
    nomb_emp.arr   [nomb_emp.len] = '\0';

/* Cx */

    EXEC SQL select nombre
             into  :nomb_suci
             from   sucursal
             where  sucursal   = :sucursali   and
                    codigo_emp = to_number(:codigo_emp);

    if (sqlca.sqlcode == 0)
        nomb_emp.arr [nomb_emp.len] = '\0';

    if (sqlca.sqlcode != 1403 && sqlca.sqlcode != 0)
        fprintf (stderr, "Error leyendo Sucursali=%s (%d)\n",sucursali.arr, sqlca.sqlcode);

/* Cx1 */

    EXEC SQL select nombre
             into  :nomb_sucf
             from   sucursal
             where  sucursal   = :sucursalf   and
                    codigo_emp = to_number(:codigo_emp);

    if (sqlca.sqlcode == 0)
        nomb_emp.arr [nomb_emp.len] = '\0';

    if (sqlca.sqlcode != 1403 && sqlca.sqlcode != 0)
        fprintf (stderr, "Error leyendo Sucursalf=%s (%d)\n",sucursalf.arr, sqlca.sqlcode);

    EXEC SQL DECLARE C2 CURSOR FOR
             select nvl(p.cuenta,'999999999'), Substr(p.nombre,1,37),
                    sum(nvl(a.valor_deb,0)),
                    sum(nvl(a.valor_cre,0)),
                    p.db_cr
             from  acumulados a, plan p
             where a.ano_mes(+) >=  :ano_mesi              and
                   a.ano_mes(+) <   :ano_mes               and
        	         a.sucursal   >= (:sucursali)            and
                   a.sucursal   <= (:sucursalf)            and
                   a.cen_cos    >= to_number(:cen_cosi)    and
                   a.cen_cos    <= to_number(:cen_cosf)    and
                   a.libro       = to_number(:libro)       and
                   p.cuenta      =  substr(a.cuenta(+),1,decode(to_number(p.nivel),0,1,to_number(p.nivel)*2))
                                                           and
                   p.nivel       =  :niv                   and
                   p.codigo_emp  = a.codigo_emp            and
                   p.codigo_emp  =  :codigo_emp
             group by p.cuenta, p.nombre, p.db_cr
             order by p.cuenta;

    EXEC SQL DECLARE C3 CURSOR FOR
             select nvl(p.cuenta,'999999999'), Substr(p.nombre,1,37),
                    sum(nvl(a.valor_deb,0)),
                    sum(nvl(a.valor_cre,0)),
                    p.db_cr
             from  acumulados a, plan p
             where a.ano_mes    =  :ano_mes                and
        	         a.sucursal   >= (:sucursali)            and
                   a.sucursal   <= (:sucursalf)            and
                   a.cen_cos    >= to_number(:cen_cosi)    and
                   a.cen_cos    <= to_number(:cen_cosf)    and
                   a.libro       = to_number(:libro)       and
                   p.nivel      =  :niv                    and
                   p.cuenta     =  substr(a.cuenta,1,decode(to_number(p.nivel),0,1,to_number(p.nivel)*2))
                                                           and
                   p.codigo_emp = a.codigo_emp             and
                   p.codigo_emp =  :codigo_emp
             group by p.cuenta, p.nombre, p.db_cr
             order by p.cuenta;

    EXEC SQL OPEN C2;
    EXEC SQL OPEN C3;

    oraest=0;
    leer_C2();

    oraestm=0;
    leer_C3();

    lista_balance();
    totales();

    cierre_impresora();

    EXEC SQL CLOSE C2;
    EXEC SQL CLOSE C3;

    EXEC SQL COMMIT WORK RELEASE;

    exit   (0);
}

/************************
* TITULOS()
*    Imprime titulos en el archivo de spool.
*/

void titulos()
{
 con_pag++;
 fprintf(fp,"%s",salte_pagina);
 if (strcmp(timbrado,"s")) {
     if (!strcmp(codigo_emp.arr,"3"))
        fprintf(fp,".");
     strful(cadena,(int)(42-strlen(nomb_emp.arr))/2,' ');
     fprintf(fp,"%s%s%s%s%s\n",diezcpi,ancho_on,cadena,nomb_emp.arr,ancho_off);
     sprintf (cadena,"%12.0f",nit);
     fprintf (fp,"%s%s%25s %18s",condensado_on,ancho_on,"NIT :",fmtnum("zzz,zzz,zzz,zzz",cadena,r_t));
     if (digito > 0) {
        sprintf (cadena,"%d",digito);
        fprintf (fp,"-%s",fmtnum("z",cadena,r_t));
     }
     else if (digito == 0)
             fprintf (fp,"-%s","0");
     sprintf(cadena2,"SUCURSAL: %s %s A %s %s C.COSTO: %s A %s",sucursali.arr,nomb_suci.arr,sucursalf.arr,nomb_sucf.arr,cen_cosi.arr,cen_cosf.arr);
     strful(cadena,(int)(80-strlen(cadena2))/2,' ');
     fprintf(fp,"\n%s%s%s%s",condensado_on,ancho_on,cadena,cadena2);
     fprintf(fp,"\n%20s%s%s\n\n"," ","LIBRO DE MAYOR Y BALANCES",ancho_off);
     fecha_system(cadena);
     if (strcmp(timbrado,"s"))
        fprintf(fp,"%s%s%s%-44s%s%10s / %d",diezcpi,condensado_on,"FECHA PROCESO : ",cadena,"PERIODO : ",mes[mesi-1],anoi);
     else
        fprintf(fp,"%s%s%s%-44s%s%10s / %d",diezcpi,condensado_on,"                "," "   ,"PERIODO : ",mes[mesi-1],anoi);
 }
 else {
     fecha_system(cadena);
     fprintf(fp,"%s%s%s%-44s%s%10s / %d",diezcpi,condensado_on,"                "," ","PERIODO : ",mes[mesi-1],anoi);
 }
 fprintf(fp,"%54s %d\n\n","PAGINA ",con_pag);
 fprintf(fp,"%40s%116s\n",enfatizado_on,"           -----SALDO ANTERIOR-----            -----MOVTOS DEL MES-----              -----SALDO ACTUAL-----");
 fprintf(fp,"%s%s%155s%s\n\n",diezcpi,condensado_on,"CUENTA   NOMBRE DE LA CUENTA                              DEBITOS          CREDITOS           DEBITOS          CREDITOS           DEBITOS          CREDITOS",enfatizado_off);
 con_lin = 9;
}

void lista_balance()
{
 while (oraest==0 || oraestm==0) {
        if (strcmp(cuenta.arr,cuentam.arr)==0) {
//            printf("1.1) cuenta.arr=<%s> cuentam.arr<%s>",cuenta.arr,cuentam.arr); getchar();
            imprime_anterior();
            imprime_actual();
            leer_C2();
            leer_C3();
        }
        else {
              if (strcmp(cuenta.arr,cuentam.arr)<0 && strlen(cuenta.arr) != 0 ) {
                  imprime_anterior();
                  imprime_sumas();
//                  printf("2.1) cuenta.arr=<%s> cuentam.arr<%s>",cuenta.arr,cuentam.arr); getchar();
                  leer_C2();
              }
              else {
                    imprime_del_mes();
                    imprime_actual();
//                    printf("3.1) cuenta.arr=<%s> cuentam.arr<%s>",cuenta.arr,cuentam.arr); getchar();
                    leer_C3();
              }
        }
/*        if (valor_debx>0 || valor_crex>0) { */
            fprintf(fp,"%s",cadenon);
            valor_debx=valor_crex=0;
            strcpy(cadenon,"");
        /*}   */
//        printf("1) oraest<%d>, oraestm<%d>",oraest,oraestm); getchar();
 }
}

void imprime_anterior()
{
  if (con_lin > 60)
      titulos();
  sprintf (cadena2,"%-9s",fmtnum("ZZZZZZZZ",cuenta.arr,r_t));
  strcpy  (cadenon,cadena2);
  sprintf (cadena2,"%-38s",nombre_cta.arr);
  strcat  (cadenon,cadena2);
  if (!strcmp(db_cr.arr,"DB")) {
     valor_debx=valor_deb-valor_cre;
     if (valor_debx < 0) {
         valor_crex=valor_debx * -1;
         valor_debx=0;
     }
  }
  else {
        valor_crex=valor_cre-valor_deb;
        if (valor_crex < 0) {
            valor_debx=valor_crex * -1;
            valor_crex=0;
        }
  }
  tot_deb += valor_debx;
  tot_cre += valor_crex;
  sprintf (cadena,"%13.2f",valor_debx);
  sprintf (cadena2,"%18s",fmtnum("zz,zzz,zzz,zz9.99",cadena,r_t));
  strcat  (cadenon,cadena2);
  sprintf (cadena,"%13.2f",valor_crex);
  sprintf (cadena2,"%18s",fmtnum("zz,zzz,zzz,zz9.99",cadena,r_t));
  strcat  (cadenon,cadena2);
}

void imprime_actual()
{
  sprintf (cadena,"%13.2f",valor_debm);
  sprintf (cadena2,"%18s",fmtnum("zz,zzz,zzz,zz9.99",cadena,r_t));
  strcat  (cadenon,cadena2);
  sprintf (cadena,"%13.2f",valor_crem);
  sprintf (cadena2,"%18s",fmtnum("zz,zzz,zzz,zz9.99",cadena,r_t));
  strcat  (cadenon,cadena2);
  tot_debm += valor_debm;
  tot_crem += valor_crem;

  if (!strcmp(db_crm.arr,"DB")) {
     valor_debx=(valor_debx-valor_crex)+(valor_debm-valor_crem);
     valor_crex=0;
     if (valor_debx < 0) {
         valor_crex=valor_debx * -1;
         valor_debx=0;
     }
  }
  else {
        valor_crex=(valor_crex-valor_debx)+(valor_crem-valor_debm);
        valor_debx=0;
        if (valor_crex < 0) {
            valor_debx=valor_crex * -1;
            valor_crex=0;
        }
  }
  tot_deba += valor_debx;
  tot_crea += valor_crex;
  sprintf (cadena,"%13.2f",valor_debx);
  sprintf (cadena2,"%18s",fmtnum("zz,zzz,zzz,zz9.99",cadena,r_t));
  strcat  (cadenon,cadena2);
  sprintf (cadena,"%13.2f",valor_crex);
  sprintf (cadena2,"%18s\n",fmtnum("zz,zzz,zzz,zz9.99",cadena,r_t));
  strcat  (cadenon,cadena2);
  con_lin ++;
}

void imprime_sumas()
{
  sprintf (cadena2,"%18s",fmtnum("zz,zzz,zzz,zz9.99","0.00",r_t));
  strcat  (cadenon,cadena2);
  sprintf (cadena2,"%18s",fmtnum("zz,zzz,zzz,zz9.99","0.00",r_t));
  strcat  (cadenon,cadena2);

  if (!strcmp(db_cr.arr,"DB")) {
     if (valor_debx < 0) {
         valor_crex=valor_debx * -1;
         valor_debx=0;
     }
  }
  else {
        if (valor_crex < 0) {
            valor_debx=valor_crex * -1;
            valor_crex=0;
        }
  }
  tot_deba += valor_debx;
  tot_crea += valor_crex;
  sprintf (cadena,"%13.2f",valor_debx);
  sprintf (cadena2,"%18s",fmtnum("zz,zzz,zzz,zz9.99",cadena,r_t));
  strcat  (cadenon,cadena2);
  sprintf (cadena,"%13.2f",valor_crex);
  sprintf (cadena2,"%18s\n",fmtnum("zz,zzz,zzz,zz9.99",cadena,r_t));
  strcat  (cadenon,cadena2);
  con_lin ++;
}

void imprime_del_mes()
{
  if (con_lin > 60)
      titulos();
  sprintf (cadena2,"%-9s",fmtnum("ZZZZZZZZ",cuentam.arr,r_t));
  strcpy  (cadenon,cadena2);
  sprintf (cadena2,"%-38s",nombre_ctam.arr);
  strcat  (cadenon,cadena2);
  valor_debx=0;
  valor_crex=0;
  sprintf (cadena,"%13.2f",valor_debx);
  sprintf (cadena2,"%18s",fmtnum("zz,zzz,zzz,zz9.99",cadena,r_t));
  strcat  (cadenon,cadena2);
  sprintf (cadena,"%13.2f",valor_crex);
  sprintf (cadena2,"%18s",fmtnum("zz,zzz,zzz,zz9.99",cadena,r_t));
  strcat  (cadenon,cadena2);
}

void totales()
{
  if (con_lin > 60)
      titulos();
  fprintf (fp,"%47s%18s%18s%18s%18s%18s%18s\n"," "," -----------------"," -----------------"," -----------------"," -----------------"," -----------------"," -----------------");
  fprintf (fp,"%s","              SUMAS IGUALES =================> ");
  sprintf (cadena,"%13.2f",tot_deb);
  fprintf (fp,"%18s",fmtnum("zzz,zzz,zzz,zz9.99",cadena,r_t));
  sprintf (cadena,"%13.2f",tot_cre);
  fprintf (fp,"%18s",fmtnum("zzz,zzz,zzz,zz9.99",cadena,r_t));
  sprintf (cadena,"%13.2f",tot_debm);
  fprintf (fp,"%18s",fmtnum("zzz,zzz,zzz,zz9.99",cadena,r_t));
  sprintf (cadena,"%13.2f",tot_crem);
  fprintf (fp,"%18s",fmtnum("zzz,zzz,zzz,zz9.99",cadena,r_t));
  sprintf (cadena,"%13.2f",tot_deba);
  fprintf (fp,"%18s",fmtnum("zzz,zzz,zzz,zz9.99",cadena,r_t));
  sprintf (cadena,"%13.2f",tot_crea);
  fprintf (fp,"%18s\n",fmtnum("zzz,zzz,zzz,zz9.99",cadena,r_t));
  fprintf (fp,"%47s%18s%18s%18s%18s%18s%18s\n"," "," ================="," ================="," ================="," ================="," ================="," =================");
  if (abs((long int)(tot_deb-tot_cre) > 0)) {
      fprintf (fp,"\n%s","  ****  BALANCE DESCUADRADO ****  ===========> ");
      sprintf (cadena,"%13.2f",tot_deb-tot_cre);
      fprintf (fp,"%18s",fmtnum("zzz,zzz,zzz,zz9.99",cadena,r_t));
  }
}

void leer_C2()
{
 EXEC SQL FETCH C2 INTO :cuenta, :nombre_cta, :valor_deb, :valor_cre, :db_cr;

 oraest  = sqlca.sqlcode;
 if (oraest == -1405)
     oraest  = 0;
 else if (oraest) {
          strcpy(cuenta.arr,"9999999999");
          fprintf (stderr, "Error leyendo C2-1 (%d), codigo_emp.arr<%s>, ano_mesi.arr<%s>, ano_mes.arr<%s>, :sucursali.arr<%s>, :sucursalf.arr<%s>, :cen_cosi.arr<%s>, :cen_cosf.arr<%s>, :niv.arr<%s>\n", oraest, codigo_emp.arr, ano_mesi.arr, ano_mes.arr, sucursali.arr, sucursalf.arr, cen_cosi.arr, cen_cosf.arr, niv.arr); 
      }

 cuenta.arr      [cuenta.len]     = '\0';
 nombre_cta.arr  [nombre_cta.len] = '\0';
 db_cr.arr       [db_cr.len]      = '\0';
}

void leer_C3()
{
 EXEC SQL FETCH C3 INTO :cuentam, :nombre_ctam, :valor_debm, :valor_crem, :db_crm;

 oraestm  = sqlca.sqlcode;
 if (oraestm == -1405)
     oraestm  = 0;
 else if (oraestm == -1002) {
          fprintf (stderr, "Error leyendo C3-1 (%d)\n", oraestm);
          strcpy(cuentam.arr,"9999999999");
          cuentam.len = strlen(cuentam.arr);
          oraestm = 1403;
      }
 else if (oraestm) {
          strcpy(cuentam.arr,"9999999999");
          cuentam.len = strlen(cuentam.arr);
          fprintf (stderr, "Error leyendo C3-2 (%d)\n", oraestm);
      }

 cuentam.arr     [cuentam.len]     = '\0';
 nombre_ctam.arr [nombre_ctam.len] = '\0';
 db_crm.arr      [db_crm.len]      = '\0';
}


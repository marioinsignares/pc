/*****************************************************************
* CIERRE.PC Version 1.0 - Rev 1.2 - Feb. 14/02.
*
* cierre.pc. Cierre de otras cuentas
*
* Uso: ajusteinf codigo_emp aamm device copias userid/password
*
* Mario Santiago I. Creado en Febrero 14 de 2.002.
* Teodoro Tarud & Cia Ltda.
*
*/

#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <setjmp.h>
#include <stdlib.h>
#include <math.h>

double redondo();

void hacer_asiento();
void ver_inf();

EXEC SQL BEGIN DECLARE SECTION;

VARCHAR uid[100];
                                 /* Empresa (C1) */
VARCHAR nomb_emp    [50];
int     digito;
int     a2k;
VARCHAR codigo_emp  [3];
                                 /* Infacu (C2) */
VARCHAR vecinf      [20][20];
                                 /* Movto_C (C3) */
VARCHAR ano_mesf    [30];
VARCHAR comprobanteb[20];
VARCHAR consecutivob[20];
VARCHAR fechab      [30];
                                 /* Movto_D (C4) */
VARCHAR secuenciab  [20];
VARCHAR cuentab     [20];
VARCHAR infa        [20];
VARCHAR infb        [20];
VARCHAR infc        [20];
VARCHAR infd        [20];
VARCHAR codigo_nitb [10];
VARCHAR valor_debb  [20];
VARCHAR valor_creb  [20];
char    inf         [5][20];
                                 /* Control_Mes (C5) */
double  consecutivo;
VARCHAR fuenteb     [3];
double  consecutivo14;
                                 /* Acumulados (C6) */
VARCHAR cuenta      [20];
VARCHAR imputa      [20];
double  valor;
double  nit;
double  nitc;
float   cod_nitc;
float   codigo_nit;
VARCHAR fecha_asto  [30];
VARCHAR ano_mesi    [20];
VARCHAR ano_mes     [20];
VARCHAR codigovar   [20];
VARCHAR cod_var     [20];
VARCHAR codigo      [20];
                                 /* Plan (C8) */
VARCHAR veca        [20];
VARCHAR vecb        [20];
VARCHAR vecc        [20];
VARCHAR vecd        [20];
char    vecplan     [5][20];

VARCHAR sucursal    [20];
VARCHAR cen_cos     [20];
VARCHAR libro       [04];

EXEC SQL END DECLARE SECTION;
EXEC SQL INCLUDE SQLCA;
				     /* Parametros de comunicacion con ORACLE */
                                            /* Variables globales del usuario */
char    pagina[4];                                   /* Contador de Paginas */
int     con_pag=0;                                   /* Contador de Paginas */
int     con_lin=66;                                  /* Contador de Lineas  */
int     cl;
int     staora     =0;
int     traidos    =0;
int     num_ret    =0;
int     loop_2     =0;
double  secuencia  =0;
        		                /* Variables de recepcion para datos */
char *fmtnum(), r_t[100];
int     diai;
int     mesx, mesi, mesf;
int     anox, anoi, anof;
int     i, j, k;
char    cadena[200];
char    login[30];
char    copias[5];

void main(argc, argv)
int     argc;
char    *argv[];
{

char	device[6];
int	status = 0;

    if (argc < 7)
       {
	      printf ("Incorrecta invocacion:\n");
        printf ("Uso : codigo_emp aaaamm copias device nro_cpbte libro userid/password\n");
      	printf ("      device : t salida por terminal\n");
      	printf ("      device : s salida standar     \n");
      	printf ("               Px salida por impresora (x nro printer)\n");
        printf ("      libro(0= COLGAAP 1=IFRS)\n");
	      printf ("               userid/password nombre usuario y password\n");
        exit (1);
       }
       strcpy (codigo_emp.arr, argv[1]);
       codigo_emp.len =        strlen(codigo_emp.arr);
       strcpy (copias,         argv[3]);
       strcpy (device,         argv[4]);
       strlow (device);
       strcpy (comprobanteb.arr, argv[5]);
       comprobanteb.len =      strlen(comprobanteb.arr);
       strcpy (libro.arr, argv[6]);
       libro.len =        strlen(libro.arr);

    if (!strpos ("/", argv[7]))
       {
        printf ("user id/password incorrecto.\n");
	      exit (1);
       }

    strcpy (uid.arr,    argv[7]);
    uid.len =           strlen(uid.arr);

/******************************************************
 * Establecer conexion concurrente con ORACLE (orlon) *
 ******************************************************/

    EXEC SQL CONNECT :uid;

    if (sqlca.sqlcode==-1915)
       {
	fprintf (stderr,"Oracle Base de Datos no esta activa. SGA (%d)\n",
		 	sqlca.sqlcode);
        exit (1);
       }
    else
       if (sqlca.sqlcode==-1017)
	  {
	   fprintf (stderr,"User Name/Password es Invalido. Re-intente.\n");
	   exit (1);
	  }
       else
          if (sqlca.sqlcode)
	     exit (1);

    busco_impresora(device);
    abre_impresora(copias);

/*********************************************
 * Procesar una sentencia SQL (oexec).       *
 *********************************************/
    strcpy (ano_mes.arr,   argv[2]);
    ano_mes.len = strlen(ano_mes.arr);
    strcpy (cadena,argv[2]);
    strorg (cadena,1,4);
    anoi         =        atoi(cadena);
    strcpy (cadena,argv[2]);
    strorg (cadena,5,2);
    mesi         =        atoi(cadena);
    sprintf (ano_mesi.arr,"%04d%02d",anoi-1,13);
    ano_mesi.len = strlen(ano_mesi.arr);

    anof=anoi;
    mesf=13;
    sprintf (ano_mesf.arr,"%d%02d",anof,mesf);
    ano_mesf.len =       strlen(ano_mesf.arr);

    EXEC SQL DECLARE C2 CURSOR FOR
             select inf
             from   infacu;

    EXEC SQL OPEN C2;

    staora  = 0;
    traidos = 0;
    num_ret = 0;
    while (staora == 0) {

          EXEC SQL FETCH C2 INTO :vecinf;

          if ( sqlca.sqlcode != 1403 && sqlca.sqlcode != 0 && sqlca.sqlcode != -1405 )
             fprintf (stderr, "Error leyendo C2 (%d)\n", sqlca.sqlcode);
          else {
               if (sqlca.sqlcode == -1405)
                  staora = 0;
               else staora  = sqlca.sqlcode;
          }

          traidos = sqlca.sqlerrd[2];

          for (loop_2 = 0; loop_2 < (traidos - num_ret); loop_2++) {
              vecinf[loop_2].arr  [vecinf[loop_2].len] = '\0';
          }
          num_ret = traidos;
    }
    k = traidos;
    EXEC SQL CLOSE C2;

    EXEC SQL DECLARE C6 CURSOR FOR
             select a.cuenta, c.imputa, c.nit, c.codigo_nit, a.codigo_nit,
                    n.nit,
                    sum(nvl(a.valor_deb,0)-nvl(a.valor_cre,0)),
                    last_day(to_date(:ano_mes,'yymm')),
                    a.codigo, c.cod_var,
                    a.sucursal, a.cen_cos
             from  acumulanit a, cierre c, nits n
             where a.codigo_emp =  :codigo_emp                         and
                   a.codigo_emp = c.codigo_emp                         and
                   a.ano_mes   >=  :ano_mesi                           and
                   a.ano_mes   <=  :ano_mes                            and
                   a.cuenta     = c.cuenta                             and
                   a.libro      = to_number(:libro)                    and
                   a.codigo_nit = n.codigo_nit
             group by a.cuenta, c.imputa, c.nit, c.codigo_nit, a.codigo_nit,
                      n.nit, a.codigo, c.cod_var, a.sucursal, a.cen_cos
             order by a.cuenta;

    EXEC SQL DECLARE C7 CURSOR FOR
        select c.consecutivo
        from movto_c c, movto_d d
        where c.codigo_emp   = to_number(:codigo_emp)   and
              c.comprobante  = to_number(:comprobanteb) and
              c.clase        = 'CD'                     and
              c.tipo         = '7'                      and
              c.ano_mes      = to_number(:ano_mesf)     and
              c.codigo_emp   = d.codigo_emp             and
              c.ano_mes      = d.ano_mes                and
              c.consecutivo  = d.consecutivo            and
              d.libro        = to_number(:libro)
        group by c.consecutivo;

    EXEC SQL OPEN C6;

    hacer_asiento();

    cierre_impresora();

    EXEC SQL CLOSE C6;

//    EXEC SQL ROLLBACK;
    EXEC SQL COMMIT WORK RELEASE;

    exit   (0);
}

void hacer_asiento()
{
  strcpy(fuenteb.arr,"14");
  fuenteb.len = strlen(fuenteb.arr);

 /* Lee consecutivo de control_mes Fte 14 Cns ultimo Asiento Cierre otras cuentas */
  
  EXEC SQL OPEN C7;
  EXEC SQL FETCH C7 INTO :consecutivo14;
  EXEC SQL CLOSE C7;
/*
  EXEC SQL select consecutivo   into :consecutivo14
           from control_mes
           where fuente       = to_number(:fuenteb)       and
                 ano_mes      = to_number(:ano_mesf)      and
                 codigo_emp   = to_number(:codigo_emp);
*/
  if ( sqlca.sqlcode != 1403 && sqlca.sqlcode != 0 && sqlca.sqlcode != -1405 )
      fprintf (stderr, "Error leyendo Control_Mes (%d)\n", sqlca.sqlcode);
  else {
        sprintf(consecutivob.arr,"%5.0f",consecutivo14);
        consecutivob.len = strlen(consecutivob.arr);

//        printf("<%s> <%s> <%s> ", codigo_emp.arr, ano_mesf.arr, consecutivob.arr); getchar();

        EXEC SQL delete from movto_d
                 where codigo_emp   = to_number(:codigo_emp)   and
                       ano_mes      = to_number(:ano_mesf)     and
                       libro        = to_number(:libro)        and
                       consecutivo  = to_number(:consecutivob);

        if ( sqlca.sqlcode != 1403 && sqlca.sqlcode != 0 && sqlca.sqlcode != -1405 )
            fprintf (stderr, "Error leyendo Movto_D (%d)\n", sqlca.sqlcode);

        EXEC SQL delete from movto_c
                 where codigo_emp   = to_number(:codigo_emp)   and
                       comprobante  = to_number(:comprobanteb) and
                       clase        = 'CD'                     and
                       tipo         = '7'                      and
                       ano_mes      = to_number(:ano_mesf)     and
                       consecutivo  = to_number(:consecutivob);

        if ( sqlca.sqlcode != 1403 && sqlca.sqlcode != 0 && sqlca.sqlcode != -1405 )
            fprintf (stderr, "Error leyendo Movto_Cx (%d)\n", sqlca.sqlcode);
  }

  strcpy(fuenteb.arr,"08");
  fuenteb.len = strlen(fuenteb.arr);

  /* Lee consecutivo de Control_mes Fte 08 sgte consecutivo */

  EXEC SQL select consecutivo+1 into :consecutivo
           from control_mes
           where fuente       = to_number(:fuenteb)       and
                 ano_mes      = to_number(:ano_mesf)      and
                 codigo_emp   = to_number(:codigo_emp);

  if (sqlca.sqlcode)
     {
      fprintf (stderr, "Error leyendo Control_Mes 08 (%d)\n", sqlca.sqlcode);
      consecutivo=1;
      sprintf(consecutivob.arr,"%5.0f",consecutivo);
      consecutivob.len = strlen(consecutivob.arr);
               /* Inserta en Control_Mes Fte 08 si no existe (C11) */

      EXEC SQL insert into control_mes
               values (to_number(:fuenteb), 
                       to_number(:ano_mesf), 
                       'CONTROL CIERRE OTR. CTAS', 
                       to_number(:consecutivob), 
                       to_number(:codigo_emp), 
                       0);
     }
  else {
        sprintf(consecutivob.arr,"%5.0f",consecutivo);
        consecutivob.len = strlen(consecutivob.arr);
               /* Actualiza Cns de Fte 08 en control_mes (C12) */
        EXEC SQL update control_mes
                 set    consecutivo = :consecutivob
                 where codigo_emp   = to_number(:codigo_emp)    and
                       ano_mes      = to_number(:ano_mesf)      and
                       fuente       = :fuenteb;
  }

  strcpy(fuenteb.arr,"14");
  fuenteb.len = strlen(fuenteb.arr);

  EXEC SQL select consecutivo   into :consecutivo14
           from control_mes
           where fuente       = to_number(:fuenteb)       and
                 ano_mes      = to_number(:ano_mesf)      and
                 codigo_emp   = to_number(:codigo_emp);

  if (sqlca.sqlcode)
     {
      fprintf (stderr, "Error leyendo Control_Mes 14 (%d)\n", sqlca.sqlcode);
               /* Inserta en Control_Mes Fte 14 si no existe (C11) */
      EXEC SQL insert into control_mes
               values (to_number(:fuenteb), 
                       to_number(:ano_mesf), 
                       'CONTROL CIERRE OTR. CTAS',
                       to_number(:consecutivob), 
                       to_number(:codigo_emp), 0);
     }
  else {
               /* Actualiza Cns de Fte 14 en control_mes (C12) */
        EXEC SQL update control_mes
                 set    consecutivo = :consecutivob
                 where codigo_emp   = to_number(:codigo_emp)    and
                       ano_mes      = to_number(:ano_mesf)      and
                       fuente       = :fuenteb;
  }

  EXEC SQL FETCH C6 INTO :cuenta, :imputa, :nitc, :cod_nitc, :codigo_nit, :nit, :valor, :fecha_asto, :codigo, :cod_var, :sucursal, :cen_cos;

  cuenta.arr      [cuenta.len]     = '\0';
  imputa.arr      [imputa.len]     = '\0';
  fecha_asto.arr  [fecha_asto.len] = '\0';
  codigo.arr      [codigo.len]     = '\0';
  cod_var.arr     [cod_var.len]    = '\0';
  sucursal.arr    [sucursal.len]   = '\0';
  cen_cos.arr     [cen_cos.len]    = '\0';
  strcpy(fechab.arr,fecha_asto.arr);
  fechab.len = strlen(fechab.arr);

//  printf("1) %s %s %13.0f %6.0f %6.0f %15.0f %s",cuenta.arr, imputa.arr, nitc, cod_nitc, codigo_nit, valor, fecha_asto.arr); getchar();

  EXEC SQL insert into movto_c
           (CODIGO_EMP,
      	    ANO_MES,
      	    COMPROBANTE,
      	    CONSECUTIVO,
      	    CLASE,
      	    DESCRIPCION,
      	    FECHA,
      	    TIPO,
      	    ESTADO,
      	    NITB,
      	    CODIGO_NITB,
      	    VALORB,
      	    RETENCION,
      	    CONTADO)
           values(:codigo_emp, :ano_mesf, :comprobanteb, :consecutivob, 'CD',
                  'CIERRE DE OTRAS CUENTAS',:fechab,'7', '0','','','','','');

  if ( sqlca.sqlcode != 1403 && sqlca.sqlcode != 0 && sqlca.sqlcode != -1405 )
      fprintf (stderr, "Error leyendo Movto_Cy (%d)\n", sqlca.sqlcode);

  staora  = 0;
  while (staora == 0) {

        cuenta.arr      [cuenta.len]     = '\0';
        imputa.arr      [imputa.len]     = '\0';
        fecha_asto.arr  [fecha_asto.len] = '\0';
        codigo.arr      [codigo.len]     = '\0';
        cod_var.arr     [cod_var.len]    = '\0';
//  printf("2) %s %s %s %s %s %s",codigo_emp.arr, ano_mesf.arr, comprobanteb.arr, consecutivob.arr, fechab.arr, fecha_asto.arr); getchar();

        if (valor > 0) {
//           printf("valor <%10.2f> mayor de 0", valor ); getchar();
           secuencia++;
           sprintf(secuenciab.arr,"%6.0f",secuencia);
           secuenciab.len = strlen(secuenciab.arr);

           if (cod_nitc==0)
              strcpy(codigo_nitb.arr,"");
           else sprintf(codigo_nitb.arr,"%5.0f",cod_nitc);
           codigo_nitb.len = strlen(codigo_nitb.arr);

           if (!strcmp(cod_var.arr,"")) {
              strcpy(codigovar.arr,imputa.arr);
              codigovar.len = strlen(codigovar.arr);
           }
           else {
                 strcpy(codigovar.arr,cod_var.arr);
                 codigovar.len = strlen(cod_var.arr);
           }

           strcpy(cuentab.arr,imputa.arr);
           cuentab.len = strlen(cuentab.arr);

           ver_inf();

           sprintf(valor_debb.arr,"%10.2f",valor);
           valor_debb.len = strlen(valor_debb.arr);

           strcpy (valor_creb.arr,"");
           valor_creb.len = strlen(valor_creb.arr);

          /* Graba en movto_d el Debito (C4) */
/*
               printf("1) codigo_emp <%s>",codigo_emp.arr);
               printf("ano_mesf <%s>",ano_mesf.arr);
               printf("consecutivob <%s>",consecutivob.arr);
               printf("secuenciab <%s>",secuenciab.arr);
               printf("cuentab <%s>",cuentab.arr);
               printf("infa <%s>",infa.arr);
               printf("infb <%s>",infb.arr);
               printf("infc <%s>",infc.arr);
               printf("infd <%s>",infd.arr);
               printf("codigo_nitb <%s>",codigo_nitb.arr);
               printf("valor_debb <%s>",valor_debb.arr); getchar();
*/
           EXEC SQL insert into movto_d
           	    (CODIGO_EMP,
        		     ANO_MES,
        		     CONSECUTIVO,
        		     SECUENCIA,
        		     CUENTA,
        	 	     INFA,
        		     INFB,
        		     INFC,
        		     INFD,
        		     CODIGO_NIT,
        		     VALOR_DEB,
        		     VALOR_CRE,
        		     SUCURSAL,
        		     CEN_COS,
                 LIBRO)
                    values(to_number(:codigo_emp),  
                           to_number(:ano_mesf), 
                           to_number(:consecutivob),
                           to_number(:secuenciab),  
                           :cuentab,  
                           :infa, 
                           :infb, 
                           :infc, 
                           :infd,
                           to_number(:codigo_nitb), 
                           to_number(:valor_debb,'9999999999.99'), 
                           to_number(:valor_creb,'9999999999.99'), 
                           :sucursal, 
                           to_number(:cen_cos),
                           to_number(:libro));

           if ( sqlca.sqlcode != 1403 && sqlca.sqlcode != 0 ) {
               printf ("1) codigo_emp   (%s)(%d)\n", codigo_emp.arr, codigo_emp.len);
               printf ("ano_mesf     (%s)(%d)\n", ano_mesf.arr, ano_mesf.len);
               printf ("consecutivob (%s)(%d)\n", consecutivob.arr, consecutivob.len);
               printf ("secuenciab   (%s)(%d)\n", secuenciab.arr, secuenciab.len);
               printf ("cuentab      (%s)(%d)\n", cuentab.arr, cuentab.len);
               printf ("infa         (%s)(%d)\n", infa.arr, infa.len);
               printf ("infb         (%s)(%d)\n", infb.arr, infb.len);
               printf ("infc         (%s)(%d)\n", infc.arr, infc.len);
               printf ("infd         (%s)(%d)\n", infd.arr, infd.len);
               printf ("codigo_nitb  (%s)(%d)\n", codigo_nitb.arr, codigo_nitb.len);
               printf ("valor_debb   (%s)(%d)\n", valor_debb.arr, valor_debb.len);
               printf ("valor_creb   (%s)(%d)\n", valor_creb.arr, valor_creb.len);
               printf ("sucursal     (%s)(%d)\n", sucursal.arr, sucursal.len);
               printf ("cen_cos      (%s)(%d)\n", cen_cos.arr, cen_cos.len);
               printf ("Error Grabando Debito (%d)\n", sqlca.sqlcode);
               exit (0);
           }

           secuencia++;
           sprintf(secuenciab.arr,"%6.0f",secuencia);
           secuenciab.len = strlen(secuenciab.arr);

           if (codigo_nit==0)
              strcpy(codigo_nitb.arr,"");
           else sprintf(codigo_nitb.arr,"%5.0f",codigo_nit);
           codigo_nitb.len = strlen(codigo_nitb.arr);

           strcpy(codigovar.arr,codigo.arr);
           codigovar.len = strlen(codigovar.arr);
           strcpy(cuentab.arr,cuenta.arr);
           cuentab.len = strlen(cuentab.arr);

           strcpy(cuentab.arr,cuenta.arr);
           cuentab.len = strlen(cuentab.arr);

           ver_inf();

           strcpy (valor_debb.arr,"");
           valor_debb.len = strlen(valor_debb.arr);

           sprintf(valor_creb.arr,"%10.2f",valor);
           valor_creb.len = strlen(valor_creb.arr);

          /* Graba en movto_d el Credito (C4) */
/*
               printf("2) codigo_emp <%s>",codigo_emp.arr);
               printf("ano_mesf <%s>",ano_mesf.arr);
               printf("consecutivob <%s>",consecutivob.arr);
               printf("secuenciab <%s>",secuenciab.arr);
               printf("cuentab <%s>",cuentab.arr);
               printf("infa <%s>",infa.arr);
               printf("infb <%s>",infb.arr);
               printf("infc <%s>",infc.arr);
               printf("infd <%s>",infd.arr);
               printf("codigo_nitb <%s>",codigo_nitb.arr);
               printf("valor_creb <%s>",valor_creb.arr); getchar();
*/
           EXEC SQL insert into movto_d
           	    (CODIGO_EMP,
        		     ANO_MES,
        		     CONSECUTIVO,
        		     SECUENCIA,
        		     CUENTA,
        	 	     INFA,
        		     INFB,
        		     INFC,
        		     INFD,
        		     CODIGO_NIT,
        		     VALOR_DEB,
        		     VALOR_CRE,
        		     SUCURSAL,
        		     CEN_COS,
                 LIBRO)
                    values(to_number(:codigo_emp),  
                           to_number(:ano_mesf), 
                           to_number(:consecutivob),
                           to_number(:secuenciab),  
                           :cuentab,  
                           :infa, 
                           :infb, 
                           :infc, 
                           :infd,
                           to_number(:codigo_nitb), 
                           to_number(:valor_debb,'9999999999.99'), 
                           to_number(:valor_creb,'9999999999.99'), 
                           :sucursal, 
                           to_number(:cen_cos),
                           to_number(:libro));

           if ( sqlca.sqlcode != 1403 && sqlca.sqlcode != 0 ) {
               printf ("2) codigo_emp   (%s)(%d)\n", codigo_emp.arr, codigo_emp.len);
               printf ("ano_mesf     (%s)(%d)\n", ano_mesf.arr, ano_mesf.len);
               printf ("consecutivob (%s)(%d)\n", consecutivob.arr, consecutivob.len);
               printf ("secuenciab   (%s)(%d)\n", secuenciab.arr, secuenciab.len);
               printf ("cuentab      (%s)(%d)\n", cuentab.arr, cuentab.len);
               printf ("infa         (%s)(%d)\n", infa.arr, infa.len);
               printf ("infb         (%s)(%d)\n", infb.arr, infb.len);
               printf ("infc         (%s)(%d)\n", infc.arr, infc.len);
               printf ("infd         (%s)(%d)\n", infd.arr, infd.len);
               printf ("codigo_nitb  (%s)(%d)\n", codigo_nitb.arr, codigo_nitb.len);
               printf ("valor_debb   (%s)(%d)\n", valor_debb.arr, valor_debb.len);
               printf ("valor_creb   (%s)(%d)\n", valor_creb.arr, valor_creb.len);
               printf ("sucursal     (%s)(%d)\n", sucursal.arr, sucursal.len);
               printf ("cen_cos      (%s)(%d)\n", cen_cos.arr, cen_cos.len);
               printf ("Error Grabando Credito (%d)\n", sqlca.sqlcode);
               exit (0);
           }
        }
        else {
           if (valor < 0) {
//              printf("valor <%10.2f> menor de 0", valor ); getchar();
              secuencia++;
              sprintf(secuenciab.arr,"%6.0f",secuencia);
              secuenciab.len = strlen(secuenciab.arr);

              if (cod_nitc==0)
                 strcpy(codigo_nitb.arr,"");
              else sprintf(codigo_nitb.arr,"%5.0f",cod_nitc);
              codigo_nitb.len = strlen(codigo_nitb.arr);

              if (!strcmp(cod_var.arr,"")) {
                 strcpy(codigovar.arr,imputa.arr);
                 codigovar.len = strlen(codigovar.arr);
              }
              else {
                    strcpy(codigovar.arr,cod_var.arr);
                    codigovar.len = strlen(cod_var.arr);
              }

              strcpy(cuentab.arr,imputa.arr);
              cuentab.len = strlen(cuentab.arr);

              ver_inf();

              sprintf(valor_creb.arr,"%10.2f",valor*-1);
              valor_creb.len = strlen(valor_creb.arr);

              strcpy (valor_debb.arr,"");
              valor_debb.len = strlen(valor_debb.arr);

              /* Graba en movto_d el Credito (C4) */
/*
                  printf("3) codigo_emp <%s>",codigo_emp.arr);
                  printf("ano_mesf <%s>",ano_mesf.arr);
                  printf("consecutivob <%s>",consecutivob.arr);
                  printf("secuenciab <%s>",secuenciab.arr);
                  printf("cuentab <%s>",cuentab.arr);
                  printf("infa <%s>",infa.arr);
                  printf("infb <%s>",infb.arr);
                  printf("infc <%s>",infc.arr);
                  printf("infd <%s>",infd.arr);
                  printf("codigo_nitb <%s>",codigo_nitb.arr);
                  printf("valor_creb <%s>",valor_creb.arr); getchar();
*/
              EXEC SQL insert into movto_d
           	    (CODIGO_EMP,
        		     ANO_MES,
        		     CONSECUTIVO,
        		     SECUENCIA,
        		     CUENTA,
        	 	     INFA,
        		     INFB,
        		     INFC,
        		     INFD,
        		     CODIGO_NIT,
        		     VALOR_DEB,
        		     VALOR_CRE,
        		     SUCURSAL,
        		     CEN_COS,
                 LIBRO)
                    values(to_number(:codigo_emp),  
                           to_number(:ano_mesf), 
                           to_number(:consecutivob),
                           to_number(:secuenciab),  
                           :cuentab,  
                           :infa, 
                           :infb, 
                           :infc, 
                           :infd,
                           to_number(:codigo_nitb), 
                           to_number(:valor_debb,'9999999999.99'), 
                           to_number(:valor_creb,'9999999999.99'), 
                           :sucursal, 
                           to_number(:cen_cos),
                           to_number(:libro));

           if ( sqlca.sqlcode != 1403 && sqlca.sqlcode != 0 ) {
               printf ("3) codigo_emp   (%s)(%d)\n", codigo_emp.arr, codigo_emp.len);
               printf ("ano_mesf     (%s)(%d)\n", ano_mesf.arr, ano_mesf.len);
               printf ("consecutivob (%s)(%d)\n", consecutivob.arr, consecutivob.len);
               printf ("secuenciab   (%s)(%d)\n", secuenciab.arr, secuenciab.len);
               printf ("cuentab      (%s)(%d)\n", cuentab.arr, cuentab.len);
               printf ("infa         (%s)(%d)\n", infa.arr, infa.len);
               printf ("infb         (%s)(%d)\n", infb.arr, infb.len);
               printf ("infc         (%s)(%d)\n", infc.arr, infc.len);
               printf ("infd         (%s)(%d)\n", infd.arr, infd.len);
               printf ("codigo_nitb  (%s)(%d)\n", codigo_nitb.arr, codigo_nitb.len);
               printf ("valor_debb   (%s)(%d)\n", valor_debb.arr, valor_debb.len);
               printf ("valor_creb   (%s)(%d)\n", valor_creb.arr, valor_creb.len);
               printf ("sucursal     (%s)(%d)\n", sucursal.arr, sucursal.len);
               printf ("cen_cos      (%s)(%d)\n", cen_cos.arr, cen_cos.len);
               printf  ("Error Grabando Credito (%d)\n", sqlca.sqlcode);
               exit (0);
           }

              secuencia++;
              sprintf(secuenciab.arr,"%6.0f",secuencia);
              secuenciab.len = strlen(secuenciab.arr);
              /////////////////////////////////////////////////////////////////////////////////
              // Ojo aqui puede haber problemas ver inf's en plan de la cuenta 24080101      //
              // si tiene nit y codigo al mismo tiempo, pues esta colocando codigo_nit = 970 //
              // para esa cuenta que tiene valor $-3,811,715.00 de la pagina 4 del anexo al  //
              // balance del mes de Diciembre de 2001                                        //
              /////////////////////////////////////////////////////////////////////////////////
              if (codigo_nit==0)
                 strcpy(codigo_nitb.arr,"");
              else sprintf(codigo_nitb.arr,"%5.0f",codigo_nit);
              codigo_nitb.len = strlen(codigo_nitb.arr);

              codigo_nitb.len = strlen(codigo_nitb.arr);
              strcpy(codigovar.arr,codigo.arr);
              codigovar.len = strlen(codigovar.arr);

              strcpy(cuentab.arr,cuenta.arr);
              cuentab.len = strlen(cuentab.arr);

              ver_inf();

              strcpy (valor_creb.arr,"");
              valor_creb.len = strlen(valor_creb.arr);

              sprintf(valor_debb.arr,"%10.2f",valor*-1);
              valor_debb.len = strlen(valor_debb.arr);

              /* Graba en movto_d el Debito (C4) */
/*
                  printf("4) codigo_emp <%s>",codigo_emp.arr);
                  printf("ano_mesf <%s>",ano_mesf.arr);
                  printf("consecutivob <%s>",consecutivob.arr);
                  printf("secuenciab <%s>",secuenciab.arr);
                  printf("cuentab <%s>",cuentab.arr);
                  printf("infa <%s>",infa.arr);
                  printf("infb <%s>",infb.arr);
                  printf("infc <%s>",infc.arr);
                  printf("infd <%s>",infd.arr);
                  printf("codigo_nitb <%s>",codigo_nitb.arr);
                  printf("valor_debb <%s>",valor_debb.arr); getchar();
*/
              EXEC SQL insert into movto_d
           	    (CODIGO_EMP,
        		     ANO_MES,
        		     CONSECUTIVO,
        		     SECUENCIA,
        		     CUENTA,
        	 	     INFA,
        		     INFB,
        		     INFC,
        		     INFD,
        		     CODIGO_NIT,
        		     VALOR_DEB,
        		     VALOR_CRE,
        		     SUCURSAL,
        		     CEN_COS,
                 LIBRO)
                    values(to_number(:codigo_emp),  
                           to_number(:ano_mesf), 
                           to_number(:consecutivob),
                           to_number(:secuenciab),  
                           :cuentab,  
                           :infa, 
                           :infb, 
                           :infc, 
                           :infd,
                           to_number(:codigo_nitb), 
                           to_number(:valor_debb,'9999999999.99'), 
                           to_number(:valor_creb,'9999999999.99'), 
                           :sucursal, 
                           to_number(:cen_cos),
                           to_number(:libro));

           if ( sqlca.sqlcode != 1403 && sqlca.sqlcode != 0 ) {
               printf ("4) codigo_emp   (%s)(%d)\n", codigo_emp.arr, codigo_emp.len);
               printf ("ano_mesf     (%s)(%d)\n", ano_mesf.arr, ano_mesf.len);
               printf ("consecutivob (%s)(%d)\n", consecutivob.arr, consecutivob.len);
               printf ("secuenciab   (%s)(%d)\n", secuenciab.arr, secuenciab.len);
               printf ("cuentab      (%s)(%d)\n", cuentab.arr, cuentab.len);
               printf ("infa         (%s)(%d)\n", infa.arr, infa.len);
               printf ("infb         (%s)(%d)\n", infb.arr, infb.len);
               printf ("infc         (%s)(%d)\n", infc.arr, infc.len);
               printf ("infd         (%s)(%d)\n", infd.arr, infd.len);
               printf ("codigo_nitb  (%s)(%d)\n", codigo_nitb.arr, codigo_nitb.len);
               printf ("valor_debb   (%s)(%d)\n", valor_debb.arr, valor_debb.len);
               printf ("valor_creb   (%s)(%d)\n", valor_creb.arr, valor_creb.len);
               printf ("sucursal     (%s)(%d)\n", sucursal.arr, sucursal.len);
               printf ("cen_cos      (%s)(%d)\n", cen_cos.arr, cen_cos.len);
               printf  ("Error Grabando Credito (%d)\n", sqlca.sqlcode);
               exit (0);
           }

           }
        }
        EXEC SQL FETCH C6 INTO :cuenta, :imputa, :nitc, :cod_nitc, :codigo_nit, :nit, :valor, :fecha_asto, :codigo, :cod_var;

        if ( sqlca.sqlcode != 1403 && sqlca.sqlcode != 0 && sqlca.sqlcode != -1405 ) {
             fprintf (stderr, "Error leyendo C6 (%d)\n", sqlca.sqlcode);
             staora = sqlca.sqlcode;
        }
        else {
             if ( sqlca.sqlcode == -1405 )
                  staora = 0;
             else {
                  fprintf (stderr, "2) Error leyendo C6 (%d)\n", sqlca.sqlcode);
                  staora = sqlca.sqlcode;
             }
        }

  }
}

void ver_inf()
{
  EXEC SQL select nit
           into  :nit
           from   nits
           where  codigo_nit = to_number(:codigo_nitb);

  EXEC SQL select infa, infb, infc, infd
           into :veca, :vecb, :vecc, :vecd
           from   plan
           where  codigo_emp = :codigo_emp and
                  cuenta     = :cuentab;

  if ( sqlca.sqlcode == 1403 )
      printf ("Cuentab (%-s) no existe\n", cuentab.arr);

  veca.arr [veca.len] = '\0';
  vecb.arr [vecb.len] = '\0';
  vecc.arr [vecc.len] = '\0';
  vecd.arr [vecd.len] = '\0';

  strcpy (vecplan[1], veca.arr);
  strcpy (vecplan[2], vecb.arr);
  strcpy (vecplan[3], vecc.arr);
  strcpy (vecplan[4], vecd.arr);

  for (i=1;i<=4;i++) {
       strcpy(inf[i],"");
  }
  i=j=0;
  for (i=1;i<=4;i++) {
      if (!strcmp(vecplan[i],"NIT")) {
          sprintf(inf[i],"%12.0f",nit);
      }
      for (j=1;j<=k;j++) {
          if (!strcmp(vecplan[i],vecinf[j].arr) && strcmp(vecplan[i],"") ) {
//              printf ("vecplan[%d]=%s vecinf[%d].arr=%s",i,vecplan[i],j,vecinf[j].arr);getchar();
              if (strcmp(codigovar.arr,"") || !strcmp(codigovar.arr,"0")) {
                  strcpy(inf[i],codigovar.arr);
              }
          }
      }
  }

  strcpy (infa.arr, inf[1]);
  strcpy (infb.arr, inf[2]);
  strcpy (infc.arr, inf[3]);
  strcpy (infd.arr, inf[4]);
  infa.len = strlen(infa.arr);
  infb.len = strlen(infb.arr);
  infc.len = strlen(infc.arr);
  infd.len = strlen(infd.arr);
}


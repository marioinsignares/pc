/*****************************************************************
* NOMLINOV  Version 1.0 - Rev 1.2 - Feb. 11/99.
*
* nomlinov.c Programa de liquidaci¢n de novedades
*
* Uso : nomlinov codigo_emp device copias userid/password
*
* Mario E. Santiago I. Creado Febrero 11-2000.
* Teodoro Tarud & Cia Ltda.
*
*/

#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>

double redondo();
EXEC SQL BEGIN DECLARE SECTION;

VARCHAR uid[100];
VARCHAR codigo_emp     [05];
VARCHAR fecha_has      [20];
VARCHAR fecha_des      [20];
VARCHAR tipocta        [03];
VARCHAR ctacte         [20];
VARCHAR xctacte        [20];
VARCHAR fechat         [06];
VARCHAR nombre         [30];
VARCHAR csi            [02];
VARCHAR w_arch         [100];
int     codigo_nit;
int     codigo;
int     clase_pd;
int     i;
int     j;
double  nit;
double  nite;
double  ntotal;
double  valor_noved;

EXEC SQL END DECLARE SECTION;
EXEC SQL INCLUDE SQLCA;

FILE    *fp1;
FILE    *fp2;

char *fmtnum(), r_t[100];
int     con_pag;                                   /* Contador de Paginas */
int     con_lin=66;                                /* Contador de Lineas  */
int     nconsec=0;
char    copias[6];

int	staora = 0;
char    formas[5];
char    fechas[100];
char    fecha[30];
char    cadena[100];
char    comando[100];
char    csubsrv[20];
char    aestado[2][8];
double  ndeven;
double  ndeduc;
char    registro[170];

void lista_empresa();
void acumule_nov();
void regcontrol();
void regtraslado();

void main(argc, argv)
int     argc;
char    *argv[];
{
char    device[10];
int     status = 0;

if (argc < 6)
   {
    printf ("Incorrecta invocacion:\n");
    printf ("Uso : nomlinov codigo_emp device copias primas(S/N) archivo userid/password\n");
    printf ("      device : t salida por terminal\n");
    printf ("               Px salida por impresora (x nro printer)\n");
    printf ("               userid/password nombre usuario y password\n");
    printf ("archivo: nombre archivo con toda su rura ");
    exit (1);
   }

strcpy (codigo_emp.arr, argv[1]);
codigo_emp.len = strlen(codigo_emp.arr);
strcpy (device,             argv[2]);
strlow (device);
strcpy (copias,             argv[3]);
strcpy (csi.arr,            argv[4]);
csi.len = strlen(csi.arr);
strcpy (w_arch.arr,         argv[5]);
w_arch.len = strlen(w_arch.arr);
if (!strpos ("/", argv[6]))
   {
    printf ("user id/password incorrecto.\n");
    exit (1);
   }

strcpy (uid.arr,   argv[6]);
uid.len   =        strlen(uid.arr);

/******************************************************
 * Establecer conexion concurrente con ORACLE (orlon) *
 ******************************************************/
    EXEC SQL CONNECT :uid;

    if (sqlca.sqlcode==-1915)
       {
	fprintf (stderr,"Oracle Base de Datos no esta activa. SGA (%d)\n",
		 	sqlca.sqlcode);
        exit (1);
       }
    else
       if (sqlca.sqlcode==-1017)
	  {
	   fprintf (stderr,"User Name/Password es Invalido. Re-intente.\n");
	   exit (1);
	  }
       else
          if (sqlca.sqlcode)
	     exit (1);

    busco_impresora(device);
    abre_impresora(copias);

/**********************************************
 * Procesar una sentencia SQL (oexec).        *
 **********************************************/

 EXEC SQL DECLARE C1 CURSOR FOR
       select e.codigo, n.codigo_nit, n.nit,
              e.ctacte, e.tipocta, 
              substr(rtrim(e.nombre)||' '||e.primer_ap,1,18) as nombre
       from   nomemple e, nits n
       where  e.codigo_nit    = n.codigo_nit     and
              e.estado_lab    <> 'R'             and
              e.codigo_emp    = :codigo_emp      and
              e.ctacte      is not null
       order by e.codigo;

 EXEC SQL DECLARE C2 CURSOR FOR
       select v.clase_pd, round(v.valor_noved,0)
       from   nomnoved v, nits n, nomfijos f
       where  n.codigo_nit    = :codigo_nit      and
              f.codigo_emp    = v.codigo_emp     and
              v.fecha_has     = f.fecha_has      and
              v.codigo_emp    = :codigo_emp      and
              v.codigo        = :codigo
       order by v.clase_pd, v.concepto;

 EXEC SQL OPEN C1;

 if (!strcmp(csi.arr,"S"))
    sprintf(csubsrv,"%s%02d","PP",atoi(codigo_emp.arr));
 else
    sprintf(csubsrv,"%s%02d","PN",atoi(codigo_emp.arr));

 if ((fp1 = fopen("nominat", "w")) == NULL) {
     fprintf (stderr,"Error abriendo archivo pipe \n");
     exit (1);
 }
 lista_empresa();
 fclose(fp1);
 regcontrol();

strcpy(comando,"COPY nominac + nominat ");
strcat(comando,w_arch.arr);
system(comando);
/*
 if ((fp1 = fopen("nominac", "r")) == NULL) {
     fprintf (stderr,"Error abriendo archivo pipe \n");
     exit (1);
 }
 if ((fp2 = fopen(w_arch.arr, "w")) == NULL) {
     fprintf (stderr,"Error abriendo archivo %s\n",w_arch.arr);
     exit (1);
 }
 fread(registro,sizeof(registro),1,fp1);
 while(!feof(fp1)) {
    fwrite(registro,sizeof(registro),1,fp2);
    fread(registro,sizeof(registro),1,fp1);
 }
 fclose(fp1);
 if ((fp1 = fopen("nominat", "r")) == NULL) {
     fprintf (stderr,"Error abriendo archivo pipe \n");
     exit (1);
 }
 fread(registro,sizeof(registro),1,fp1);
 fwrite("\n",1,1,fp2);
 while(!feof(fp1)) {
    fwrite(registro,sizeof(registro),1,fp2);
    fread(registro,sizeof(registro),1,fp1);
 }
*/
 EXEC SQL COMMIT WORK RELEASE;
 EXEC SQL CLOSE C1;

 cierre_impresora();
 exit   (0);
}

void lista_empresa()
{

 staora  = 0;

 EXEC SQL FETCH C1 INTO :codigo, :codigo_nit, :nit, :ctacte, :tipocta, :nombre;

 staora  = sqlca.sqlcode;

 if (staora == -1405) {
    staora = 0;
 }
 if (staora) {
    fprintf (stderr, "Error leyendo C1 (%d)\n", staora);
    exit   (1);
 }
 tipocta.arr      [tipocta.len]     = '\0';
 ctacte.arr       [ctacte.len]      = '\0';
 nombre.arr       [nombre.len]      = '\0';

 while (staora == 0) {
      sprintf(cadena,"%12.0f",nit);
      EXEC SQL OPEN C2;
      EXEC SQL FETCH C2 INTO :clase_pd, :valor_noved;

      staora  = sqlca.sqlcode;
      if (staora) {
         fprintf (stderr, "Error leyendo C2 (%d) (%d) (%d)\n", codigo, codigo_nit, staora);
      }
      while (staora == 0) {
            acumule_nov();
            regtraslado();

      }
      EXEC SQL CLOSE C2;
      ndeven = ndeduc = 0;
      EXEC SQL FETCH C1 INTO :codigo, :codigo_nit, :nit, :ctacte, :tipocta, :nombre;

      tipocta.arr      [tipocta.len]    = '\0';
      ctacte.arr       [ctacte.len]     = '\0';
      nombre.arr       [nombre.len]     = '\0';

      staora  = sqlca.sqlcode;
      if (staora ==  1403) break;
      if (staora == -1405)
          staora  = 0;
      else if (staora)
               fprintf (stderr, "Error leyendo C1 (%d)\n", staora);
 }
}

void acumule_nov()
{
 while (staora == 0) {
      if (clase_pd == 1)
           ndeven = ndeven + valor_noved;
      else
           ndeduc = ndeduc + valor_noved;

      EXEC SQL FETCH C2 INTO :clase_pd, :valor_noved;

      staora  = sqlca.sqlcode;
      if (staora ==  1403) break;
      if (staora == -1405)
          staora  = 0;
      else if (staora)
               fprintf (stderr, "Error leyendo C2 (%d)\n", staora);

 }
}

void regcontrol()
{
 EXEC SQL select nit||digito, ctacte, to_char(fecha_has,'yymmdd')
          into :nite, :xctacte, :fechat
          from nomfijos f, nits n
          where f.codigo_nit = n.codigo_nit and
                f.codigo_emp = :codigo_emp;
 staora  = sqlca.sqlcode;

 if (staora == -1405) {
    staora = 0;
 }
 if (staora) {
    fprintf (stderr, "Error leyendo C3 (%d)\n", staora);
    exit   (1);
 }
 xctacte.arr      [xctacte.len]     = '\0';
 fechat.arr       [fechat.len]      = '\0';

 if ((fp1 = fopen("nominac", "w")) == NULL) {
     fprintf (stderr,"Error abriendo archivo pipe \n");
     exit (1);
 }

 cadena[0]='\0';
 j=0;
 for(i=0;i<strlen(xctacte.arr);++i) {
     if (xctacte.arr[i] != '-') {
        cadena[j]=xctacte.arr[i];
        ++j;
     }
 }
 cadena[j]='\0';

 if (!strcmp(codigo_emp.arr,"22"))  {
    fprintf(fp1,"%s","1");
    fprintf(fp1,"%010.0f%s%s",nite,"KOOMBEA LIMITADA","225");
    fprintf(fp1,"%s","P.QUINCENA");
    fprintf(fp1,"%s%s%s",fechat.arr,"A",fechat.arr);
    fprintf(fp1,"%06d",nconsec);
    fprintf(fp1,"%s%012.0f","000000000000",ntotal);
    fprintf(fp1,"%s%s",cadena,"D");
    fprintf(fp1,"%s\n","                                                                                                                                    ");
    }
 else {
    fprintf(fp1,"%s","RC");
    fprintf(fp1,"%016.0f%s%s",nite,"NOMI",csubsrv);
    fprintf(fp1,"%s%s%s%s%016.0f00%06d","00",cadena,"CA","000051",ntotal,nconsec);
    fprintf(fp1,"%s","00000000");
    fprintf(fp1,"%s","000000");
    fprintf(fp1,"%s","0000");
    fprintf(fp1,"%s","9999");
    fprintf(fp1,"%s","00000000");
    fprintf(fp1,"%s","000000");
    fprintf(fp1,"%s","00");
    fprintf(fp1,"%s","01");
    fprintf(fp1,"%s","000000000589");
    fprintf(fp1,"%s","0000");
    fprintf(fp1,"%s\n","0000000000000000000000000000000000000000");
    }
 fclose(fp1);
}

void regtraslado()
{
   cadena[0]='\0';
   j=0;
   for(i=0;i<strlen(ctacte.arr);++i) {
       if (ctacte.arr[i] != '-') {
          cadena[j]=ctacte.arr[i];
          ++j;
       }
   }
   cadena[j]='\0';
 if (!strcmp(codigo_emp.arr,"22")) {
    fprintf(fp1,"%s%015.0f","6",nit);
//NOMBRE 18
    fprintf(fp1,"%-18s",nombre.arr);
    fprintf(fp1,"%s","005600078");
//BCO CUENTA BENEFICIARIO 9
    fprintf(fp1,"%s%s%s","000",cadena,"  S");
    if (!strcmp(tipocta.arr,"CA"))
        fprintf(fp1,"%s","37");
    else
        fprintf(fp1,"%s","27");
    fprintf(fp1,"%010.0f",ndeven-ndeduc);
    fprintf(fp1,"%s","000000000");
    fprintf(fp1,"%s\n","000000000000 ");
    }
 else {
    fprintf(fp1,"%s%016.0f","TR",nit);
    fprintf(fp1,"0000000000000000");
    fprintf(fp1,"%s%s%s%s","0000",cadena,tipocta.arr,"000051");
    fprintf(fp1,"%016.0f00",ndeven-ndeduc);
    fprintf(fp1,"%s","000000");
    fprintf(fp1,"%s","02");
    fprintf(fp1,"%s","0");
    fprintf(fp1,"%s","9999");
    fprintf(fp1,"%s","0000000000000000000000000000000000000000");
    fprintf(fp1,"%s","000000000000000000");
    fprintf(fp1,"%s","00000000");
    fprintf(fp1,"%s","0000");
    fprintf(fp1,"%s","0000");
    fprintf(fp1,"%s\n","0000000");
    }
   ntotal  = ntotal + ndeven-ndeduc;
   ndeven  = ndeduc = 0;
   ++nconsec;
}

/*****************************************************************
* CONMOVTO.C Version 1.0 - Rev 1.2 - Jun. 30/92.
*                          rev 1.6 - Nov. 11/97.
*
* ordenes.c. Listado y actualizacion del movimiento contable
*
* Uso : codigo_emp aamm s/n orden (T,C,F) tipo_ini tipo_fin comp_ini comp_fin device userid/password\n";
*
* Mario E. Santiago I. Creado Junio 30-1992.
* Teodoro Tarud & Cia Ltda.
*
*/

#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <setjmp.h>
#include <stdlib.h>
#include <math.h>
				     /* Parametros de comunicacion con ORACLE */

EXEC SQL BEGIN DECLARE SECTION;

VARCHAR uid[100];
                                            /* Variables globales del usuario */
VARCHAR codigo_emp [3];
VARCHAR vecinf     [20][14];
VARCHAR ano_mes    [20];
VARCHAR tipo_ini   [3];
VARCHAR tipo_fin   [3];
VARCHAR cmp_ini    [7];
VARCHAR cmp_fin    [8];
VARCHAR veca       [14];
VARCHAR vecb       [14];
VARCHAR vecc       [14];
VARCHAR vecd       [14];

/* Tabla MOVTO_C y MOVTO_D */

VARCHAR infa       [20][14];
VARCHAR infb       [20][14];
VARCHAR infc       [20][14];
VARCHAR infd       [20][14];
double  comprobante[20];
double  consecutivo[20];
VARCHAR clase      [20][3];
VARCHAR descripcion[20][50];
VARCHAR fecha      [20][20];
int     tipo       [20];
VARCHAR cuenta     [20][15];
double  codigo_nit [20];
double  valor_deb  [20];
double  valor_cre  [20];
VARCHAR estado     [20][2];
VARCHAR sucursal   [20][05];
VARCHAR cen_cos    [20][3];
double	wval_deb;
double	wval_cre;
VARCHAR nomb_emp   [60];
VARCHAR nomb_nit   [51];
VARCHAR codigo     [13];
VARCHAR cuentab    [15];
double  cons;
VARCHAR cuentax    [15];
double  codigo_nitb;
double  nit;
int     digito;
VARCHAR cen_cosb   [05];
VARCHAR sucursalb  [03];

EXEC SQL END DECLARE SECTION;
EXEC SQL INCLUDE SQLCA;

int     traidos    =0;
int     staora     =0;
int     num_ret    =0;
int     loop_2     =0;
int     loop_13    =0;
int     con_pag    =0;                                /* Contador de Paginas */
int     con_lin    =66;                               /* Contador de Lineas  */
int     cl;
char    vecmov     [5][14];
char    vecplan    [5][14];
char    orden      [2];
char    ordenar    [30];
char    timbrado   [2];
        		                /* Variables de recepcion para datos */
char *fmtnum(), r_t[100];
int     pos;

double  doble;
double  x;
double  num;
int     diai;
int     mesi;
int     anoi;
int     tipo_an;
int     i;
int     j;
int     k;
double  tot_deb[2];
double  tot_cre[2];
char    cadena[100];
char    login[40];

void titulos();
void lista_movto();
void totales_cpt();
void totales();

void main(argc, argv)
int     argc;
char    *argv[];
{

char	device[6];
int	status = 0;

    if (argc < 11)
       {
	printf ("Incorrecta invocacion:\n");
        printf ("Uso : codigo_emp aaaamm orden(T,C,F) tipo_ini tipo_fin\n");
        printf ("      comp_ini comp_fin device timbrado (s/n) userid/password\n");
	printf ("      device : t salida por terminal\n");
	printf ("      device : s salida standar     \n");
	printf ("               Px salida por impresora (x nro printer)\n");
	printf ("               userid/password nombre usuario y password\n");
        exit (1);
       }
       strcpy (codigo_emp.arr, argv[1]);
       codigo_emp.len =        strlen(codigo_emp.arr);
       strcpy (orden,          argv[3]);
       strcpy (tipo_ini.arr,   argv[4]);
       tipo_ini.len    =       strlen(tipo_ini.arr);
       strcpy (tipo_fin.arr,   argv[5]);
       tipo_fin.len    =       strlen(tipo_fin.arr);
       strcpy (cmp_ini.arr,    argv[6]);
       cmp_ini.len     =       strlen(cmp_ini.arr);
       strcpy (cmp_fin.arr,    argv[7]);
       cmp_fin.len     =       strlen(cmp_fin.arr);
       strcpy (device,         argv[8]);
       strlow (device);
       strcpy (timbrado,       argv[9]);
       strlow (timbrado);

    if (!strpos ("/", argv[10]))
       {
        printf ("user id/password incorrecto.\n");
	exit (1);
       }

    strcpy (uid.arr,    argv[10]);
    uid.len = strlen(uid.arr);
/******************************************************
 * Establecer conexion concurrente con ORACLE (orlon) *
 ******************************************************/
    EXEC SQL CONNECT :uid;

    if (sqlca.sqlcode==-1915)
       {
	fprintf (stderr,"Oracle Base de Datos no esta activa. SGA (%d)\n",
		 	sqlca.sqlcode);
        exit (1);
       }
    else
       if (sqlca.sqlcode==-1017)
	  {
	   fprintf (stderr,"User Name/Password es Invalido. Re-intente.\n");
	   exit (1);
	  }
       else
          if (sqlca.sqlcode)
	     exit (1);

    busco_impresora(device);
    abre_impresora("1");


    strcpy (ano_mes.arr,    argv[2]);
    ano_mes.len    =        strlen(ano_mes.arr);
    strcpy (cadena,         ano_mes.arr);
    strorg (cadena,1,4);
    anoi           =        atoi(cadena);
    strcpy (cadena,         ano_mes.arr);
    strorg (cadena,5,2);
    mesi           =        atoi(cadena);
    if (mesi==13)
        mesi=12;

      EXEC SQL DECLARE C2A CURSOR FOR
          select nvl(infa,'0'), decode(clase,'XX','0',nvl(infb,'0')),
                 nvl(infc,'0'), nvl(infd,'0'),
                 comprobante, c.consecutivo,
                 clase, descripcion, fecha, tipo, cuenta,
                 nvl(codigo_nit,970), nvl(valor_deb,0), nvl(valor_cre,0), estado, sucursal, cen_cos
	  from   movto_d d, movto_c c
          where  d.codigo_emp(+)  = c.codigo_emp                  and
                 d.ano_mes(+)     = c.ano_mes                     and
                 d.consecutivo(+) = c.consecutivo                 and
                 c.codigo_emp     = to_number(:codigo_emp)        and
                 c.ano_mes        = to_number(:ano_mes)           and
                 c.tipo          >= to_number(:tipo_ini)          and
                 c.tipo          <= to_number(:tipo_fin)          and
                 c.comprobante   >= to_number(:cmp_ini)           and
                 c.comprobante   <= to_number(:cmp_fin)
          order by tipo, comprobante;

     EXEC SQL DECLARE C2B CURSOR FOR
          select nvl(infa,'0'), decode(clase,'XX','0',nvl(infb,'0')),
                 nvl(infc,'0'), nvl(infd,'0'),
                 comprobante, c.consecutivo,
                 clase, descripcion, fecha, tipo, cuenta,
                 nvl(codigo_nit,970), nvl(valor_deb,0), nvl(valor_cre,0), estado, sucursal, cen_cos
	  from   movto_d d, movto_c c
          where  d.codigo_emp(+)  = c.codigo_emp                  and
                 d.ano_mes(+)     = c.ano_mes                     and
                 d.consecutivo(+) = c.consecutivo                 and
                 c.codigo_emp     = to_number(:codigo_emp)        and
                 c.ano_mes        = to_number(:ano_mes)           and
                 c.tipo          >= to_number(:tipo_ini)          and
                 c.tipo          <= to_number(:tipo_fin)          and
                 c.comprobante   >= to_number(:cmp_ini)           and
                 c.comprobante   <= to_number(:cmp_fin)
          order by c.consecutivo, secuencia;

     EXEC SQL DECLARE C2C CURSOR FOR
          select nvl(infa,'0'), decode(clase,'XX','0',nvl(infb,'0')),
                 nvl(infc,'0'), nvl(infd,'0'),
                 comprobante, c.consecutivo,
                 clase, descripcion, fecha, tipo, cuenta,
                 nvl(codigo_nit,970), nvl(valor_deb,0), nvl(valor_cre,0), estado, sucursal, cen_cos
	  from   movto_d d, movto_c c
          where  d.codigo_emp(+)  = c.codigo_emp                  and
                 d.ano_mes(+)     = c.ano_mes                     and
                 d.consecutivo(+) = c.consecutivo                 and
                 c.codigo_emp     = to_number(:codigo_emp)        and
                 c.ano_mes        = to_number(:ano_mes)           and
                 c.tipo          >= to_number(:tipo_ini)          and
                 c.tipo          <= to_number(:tipo_fin)          and
                 c.comprobante   >= to_number(:cmp_ini)           and
                 c.comprobante   <= to_number(:cmp_fin)
          order by c.fecha;

     EXEC SQL DECLARE C13 CURSOR FOR
              select inf
              from   infacu;

    EXEC SQL OPEN C13;

    staora  = 0;
    traidos = 0;
    num_ret = 0;
    while (staora == 0) {

          EXEC SQL FETCH C13 INTO :vecinf;

          if (sqlca.sqlcode != 1403 && sqlca.sqlcode != 0)
             fprintf (stderr, "Error leyendo C13 (%d)\n", sqlca.sqlcode);

          staora  = sqlca.sqlcode;
          traidos = sqlca.sqlerrd[2];

          for (loop_13 = 0; loop_13 < (traidos - num_ret); loop_13++) {
              vecinf[loop_13].arr  [vecinf[loop_13].len] = '\0';
          }
          num_ret = traidos;
    }
    k = traidos;
    EXEC SQL CLOSE C13;

    EXEC SQL select n.nombre, n.nit, n.digito
                    into :nomb_emp, :nit, :digito
             from   nits n, empresas e
             where  n.codigo_nit = e.codigo_nit and
                    e.codigo_emp = to_number(:codigo_emp);

    if (sqlca.sqlcode != 1403 && sqlca.sqlcode != 0)
        fprintf (stderr, "Error leyendo EMPRESAS (%d)\n", sqlca.sqlcode);

    if (!strcmp (orden,"T")) {
       EXEC SQL OPEN C2A;
    }
    else
       if (!strcmp (orden,"C")) {
          EXEC SQL OPEN C2B;
       }
       else
          if (!strcmp (orden,"F")) {
             EXEC SQL OPEN C2C;
          }

    staora  = 0;
    traidos = 0;
    num_ret = 0;
    while (staora == 0) {

          if (!strcmp (orden,"T")) {
          EXEC SQL FETCH C2A INTO :infa, :infb, :infc, :infd, :comprobante,
                                  :consecutivo, :clase, :descripcion,
                                  :fecha, :tipo,:cuenta, :codigo_nit,
                                  :valor_deb,   :valor_cre, :estado, sucursal, cen_cos;
          }
          else
             if (!strcmp (orden,"C")) {
          EXEC SQL FETCH C2B INTO :infa, :infb, :infc, :infd, :comprobante,
                                 :consecutivo, :clase, :descripcion,
                                 :fecha, :tipo, :cuenta, :codigo_nit,
                                 :valor_deb, :valor_cre, :estado, sucursal, cen_cos;
             }
             else
                if (!strcmp (orden,"F")) {
          EXEC SQL FETCH C2C INTO :infa, :infb, :infc, :infd, :comprobante,
                                 :consecutivo, :clase, :descripcion,
                                 :fecha, :tipo, :cuenta, :codigo_nit,
                                 :valor_deb, :valor_cre, :estado, sucursal, cen_cos;
                }

          staora  = sqlca.sqlcode;
          if (staora == -1405)
              staora  = 0;
          else if (staora)
                   fprintf (stderr, "Error leyendo C2 (%d)\n", staora);

          if (traidos == 0) tipo_an=tipo[0];

          traidos = sqlca.sqlerrd[2];

          for (loop_2 = 0; loop_2 < (traidos - num_ret); loop_2++) {
              infa       [loop_2].arr  [infa       [loop_2].len] = '\0';
              infb       [loop_2].arr  [infb       [loop_2].len] = '\0';
              infc       [loop_2].arr  [infc       [loop_2].len] = '\0';
              infd       [loop_2].arr  [infd       [loop_2].len] = '\0';
              clase      [loop_2].arr  [clase      [loop_2].len] = '\0';
              descripcion[loop_2].arr  [descripcion[loop_2].len] = '\0';
              fecha      [loop_2].arr  [fecha      [loop_2].len] = '\0';
              cuenta     [loop_2].arr  [cuenta     [loop_2].len] = '\0';
              estado     [loop_2].arr  [estado     [loop_2].len] = '\0';
              sucursal   [loop_2].arr  [sucursal   [loop_2].len] = '\0';
              cen_cos    [loop_2].arr  [cen_cos    [loop_2].len] = '\0';

              strcpy (vecmov[0], infa[loop_2].arr);
              strcpy (vecmov[1], infb[loop_2].arr);
              strcpy (vecmov[2], infc[loop_2].arr);
              strcpy (vecmov[3], infd[loop_2].arr);

              lista_movto();
          }
          num_ret = traidos;
    }
    if (!strcmp (orden,"T")) {
       EXEC SQL CLOSE C2A;
    }
    else
       if (!strcmp (orden,"C")) {
          EXEC SQL CLOSE C2B;
       }
       else
          if (!strcmp (orden,"F")) {
             EXEC SQL CLOSE C2C;
          }

/*****************************************
** COMMIT LOS CAMBIOS A LA BASE DE DATOS *
******************************************/

    totales();

    EXEC SQL COMMIT WORK RELEASE;

    cierre_impresora();

    exit   (0);
}

/************************
* TITULOS()
*    Imprime titulos en el archivo de spool.
*/

void titulos()
{
 extern char mes[12][12];
 char   fecha_s[40];
 double decimal;
 fecha_system(fecha_s);
 con_pag++;
 doble=atof(codigo_emp.arr);
 num=doble/2;
 decimal=modf(num,&x);
 if (doble==1)
    decimal=0;
 if (decimal==0)
     fprintf(fp,"%s",salte_pagina);
 else fprintf(fp,"%s.",salte_pagina);
 if (strcmp(timbrado,"s")) {
     strful(cadena,(int)(42-strlen(nomb_emp.arr))/2,' ');
     fprintf(fp,"%s%s%s%s%s\n",diezcpi,ancho_on,cadena,nomb_emp.arr,ancho_off);
     sprintf (cadena,"%12.0f",nit);
     fprintf (fp,"%s%s%25s %18s",condensado_on,ancho_on,"NIT :",fmtnum("zzz,zzz,zzz,zzz",cadena,r_t));
     if (digito > 0) {
        sprintf (cadena,"%d",digito);
        fprintf (fp,"-%s",fmtnum("z",cadena,r_t));
     }
     else if (digito == 0)
             fprintf (fp,"-%s","0");
     fprintf(fp,"%s\n\n",ancho_off);
     if (strcmp(timbrado,"s"))
        fprintf(fp,"%s%s%s%-44s%s%10s / %d",diezcpi,condensado_on,"FECHA PROCESO : ",fecha_s,"PERIODO : ",mes[mesi-1],anoi);
     else
        fprintf(fp,"%s%s%s%-44s%s%10s / %d",diezcpi,condensado_on,"                "," "    ,"PERIODO : ",mes[mesi-1],anoi);
 }
 else {
      fprintf(fp,"%s%s%s%-44s%s%10s / %d",diezcpi,condensado_on,"                "," ","PERIODO : ",mes[mesi-1],anoi);
 }
 fprintf(fp,"%48s %d\n\n","PAGINA ",con_pag);
 fprintf(fp,"%89s","   CUENTA  DESCRIPCION                             FECHA/SC/CC TC CL  DOCUM.    INFA/INFC");
 fprintf(fp,"%48s\n\n","    INFB/INFD        DEBITOS       CREDITOS  CNS");
 con_lin = 6;
}

void lista_movto()
{
char	wcadena[80];

         strcpy  (cuentab.arr, cuenta[loop_2].arr);
         cuentab.len = strlen(cuentab.arr);

         strcpy  (sucursalb.arr, sucursal[loop_2].arr);
         sucursalb.len = strlen(sucursalb.arr);

         strcpy  (cen_cosb.arr, cen_cos[loop_2].arr);
         cen_cosb.len = strlen(cen_cosb.arr);

         if (strcmp(estado[loop_2].arr, "2")) {

            EXEC SQL select infa, infb, infc, infd
                            into :veca, :vecb, :vecc, :vecd
                     from   plan
                     where  codigo_emp = (:codigo_emp) and
                            cuenta     = (:cuentab);

            if (sqlca.sqlcode == 1403)
               printf ("Cuentab (%-s) no existe\n", cuentab.arr);

            nomb_nit.arr[0] = '\0';
            if (codigo_nit[loop_2] != 970) {
               EXEC SQL select nombre
                        into :nomb_nit
                        from  nits
                        where codigo_nit = :codigo_nit[loop_2];
               nomb_nit.arr[nomb_nit.len] = '\0';
               if (sqlca.sqlcode == 1403)
                  printf ("Nit (%-d) no existe\n", codigo_nit);
            }

            veca.arr[veca.len] = '\0';
            vecb.arr[vecb.len] = '\0';
            vecc.arr[vecc.len] = '\0';
            vecd.arr[vecd.len] = '\0';
            strcpy (vecplan[0], veca.arr);
            strcpy (vecplan[1], vecb.arr);
            strcpy (vecplan[2], vecc.arr);
            strcpy (vecplan[3], vecd.arr);

         }
         strcpy(codigo.arr,"0");
         codigo.len = strlen(codigo.arr);
         if (strcmp(estado[loop_2].arr, "2")) {
            i=j=0;
            for (i=0;i<4;i++) {
                for (j=0;j<k;j++) {
                    if (!strcmp(vecplan[i],vecinf[j].arr)) {
                        strcpy(codigo.arr,vecmov[i]);
                        codigo.len = strlen(codigo.arr);
                    }
                }
            }
         }
         if (tipo_an != tipo[loop_2] && !strcmp(orden,"T"))
            totales_cpt();
         if (con_lin > 60)
             titulos();
         fprintf (fp,"%-11s",fmtnum(" 99999999",cuenta[loop_2].arr,r_t));
         fprintf (fp,"%-41s",descripcion[loop_2].arr);
         strcpy  (cadena,fecha[loop_2].arr);
         strcpy  (wcadena, cadena);
         numero_fechaf(wcadena);
         strcpy  (cadena, wcadena);
         fprintf (fp,"%s ",cadena);
         fprintf (fp,"%02d ",tipo[loop_2]);
         fprintf (fp,"%-3s",clase[loop_2].arr);
         sprintf (cadena,"%8.0f",comprobante[loop_2]);
         fprintf (fp,"%-9s",fmtnum("zzzzzzz9",cadena,r_t));
         fprintf (fp,"%12s",vecmov[0]);
         fprintf (fp,"%12s",vecmov[1]);
         sprintf (cadena,"%9.2f",valor_deb[loop_2]);
         fprintf (fp,"%15s",fmtnum("zzzz,zzz,zz9.99",cadena,r_t));
         sprintf (cadena,"%9.2f",valor_cre[loop_2]);
         fprintf (fp,"%15s",fmtnum("zzzz,zzz,zz9.99",cadena,r_t));
         sprintf (cadena,"%5f",consecutivo[loop_2]);
         fprintf (fp,"%5s\n",fmtnum("z,zzz",cadena,r_t));
         if (codigo_nit[loop_2] > 0)
            fprintf (fp,"%-13s%-41s"," ",nomb_nit.arr);

         fprintf (fp,"%03s",sucursalb.arr);
         fprintf (fp,"%4s%2s"," ",cen_cosb.arr);
         fprintf (fp,"%26s",vecmov[2]);
         fprintf (fp,"%13s\n",vecmov[3]);
         tot_deb[0] += valor_deb[loop_2];
         tot_deb[1] += valor_deb[loop_2];
         tot_cre[0] += valor_cre[loop_2];
         tot_cre[1] += valor_cre[loop_2];
         con_lin +=2;
}

void totales_cpt()
{
  if (con_lin > 60)
      titulos();
  fprintf (fp,"\n%102s","Totales comprobante ========================> ");
  sprintf (cadena,"%9.2f",tot_deb[0]);
  fprintf (fp,"%17s",fmtnum("zz,zzz,zzz,zz9.99",cadena,r_t));
  sprintf (cadena,"%9.2f",tot_cre[0]);
  fprintf (fp,"%17s\n\n",fmtnum("zz,zzz,zzz,zz9.99",cadena,r_t));
  if (tot_deb[0] != tot_cre[0])  {
      fprintf (fp,"\n%102s","****  MOVIMIENTO DESCUADRADO ****  ===========> ");
      sprintf (cadena,"%9.2f",tot_deb[0]-tot_cre[0]);
      fprintf (fp,"%17s\n",fmtnum("zz,zzz,zzz,zz9.99",cadena,r_t));
      con_lin++;
  }
  fprintf (fp,"\n");
  tot_deb[0]=0;
  tot_cre[0]=0;
  tipo_an=tipo[loop_2];
  con_lin +=3;
}

void totales()
{
  if (con_lin > 60)
      titulos();
  if (!strcmp(orden,"T"))
      totales_cpt();
  fprintf (fp,"\n%102s","Total del movimiento listado ===============> ");
  sprintf (cadena,"%9.2f",tot_deb[1]);
  fprintf (fp,"%17s",fmtnum("zz,zzz,zzz,zz9.99",cadena,r_t));
  sprintf (cadena,"%9.2f",tot_cre[1]);
  fprintf (fp,"%17s\n\n",fmtnum("zz,zzz,zzz,zz9.99",cadena,r_t));
  if (tot_deb[1] != tot_cre[1])  {
      fprintf (fp,"\n%102s","****  MOVIMIENTO DESCUADRADO ****  ===========> ");
      sprintf (cadena,"%9.2f",tot_deb[1]-tot_cre[1]);
      fprintf (fp,"%17s\n",fmtnum("zz,zzz,zzz,zz9.99",cadena,r_t));
  }
  fprintf (fp,"\n\n\nPROCESADO POR : ______________________  REVISADO POR : ______________________");
  fprintf (fp,"\n");
  con_lin +=7;
}


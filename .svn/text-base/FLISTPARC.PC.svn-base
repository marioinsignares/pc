/*****************************************************************
* FLISTPAR.C  Version 1.0 - Rev 1.2 - Mar. 11/98.
*
* flistpar.pc Programa de facturacion para listar EL PARETTO.
*
* Uso : flistpar fecha_ini fecha_fin constante device copias userid/password
*
* Martin A. Toloza L. Creado Marzo 11-1998.
* Teodoro Tarud & Cia Ltda.
*
*/
#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>

double redondo();
void titulos();
void fecha_oracle3();
				     /* Parametros de comunicacion con ORACLE */
        		             /* Variables de recepcion para datos */
EXEC SQL BEGIN DECLARE SECTION;

VARCHAR uid[100];
                                 /* Facturas (C1) */
VARCHAR fecha_ini     [20];
VARCHAR fecha_fin     [20];

VARCHAR codigoi       [20];
VARCHAR codigof       [20];
                                 /* Nits (C2) */
VARCHAR nomb_clie     [55];
VARCHAR wcod          [6];
                                 /* Paretto (C3) */
VARCHAR codigo_cliente[6];
double  valor;
                                 /* Paretto (C4) */
double  valor_total;

EXEC SQL END DECLARE SECTION;
EXEC SQL INCLUDE SQLCA;
                                            /* Variables globales del usuario */
char *fmtnum(), r_t[100];
int     con_pag;                                   /* Contador de Paginas */
int     con_lin=66;                                /* Contador de Lineas  */
int     staora = 0;
int     oraest = 0;
char    copias[3];
int     cantidad;
char    fechas[90];
char    fecha [70];
char    cadena [200];
char    cadena2[100];
char    wciu[6];
double  porcentaje;
double  valor_parcial;
double  constante;

void main(argc, argv)
int     argc;
char    *argv[];
{

char	device[6];
int	status = 0;

if (argc < 9)
   {
    printf ("Incorrecta invocacion:\n");
    printf ("Uso : flistpar fecha_ini fecha_fin codigoi codigof constante device copias userid/password\n");
    printf ("      device : t salida por terminal\n");
    printf ("               Px salida por impresora (x nro printer)\n");
    printf ("               userid/password nombre usuario y password\n");
    exit (1);
   }

strcpy (fecha_ini.arr, argv[1]);
fecha_ini.len   =      strlen(fecha_ini.arr);
strcpy (fecha_fin.arr, argv[2]);
fecha_fin.len   =      strlen(fecha_fin.arr);
if ( strlen(fecha_ini.arr) != 8 || strlen(fecha_fin.arr) != 8 ) {
   printf("Error, la fecha debe ser de 8 digitos y formato AAAAMMDD");
   exit (1);
}
strcpy (codigoi.arr, argv[3]);
codigoi.len   =      strlen(codigoi.arr);
strcpy (codigof.arr, argv[4]);
codigof.len   =      strlen(codigof.arr);

constante       =      atof(argv[5]);
strcpy (device,        argv[6]);
strlow (device);
strcpy (copias,        argv[7]);

strcpy(fecha,fecha_ini.arr);
fecha_oracle3(fecha);
strcpy(cadena,fecha);
strcpy(fecha,fecha_fin.arr);
strcat(cadena," hasta ");
fecha_oracle3(fecha);
strcat(cadena,fecha);
strcpy(fechas,cadena);

if (!strpos ("/", argv[8]))
   {
    printf ("user id/password incorrecto.\n");
    exit (1);
   }

strcpy (uid.arr,   argv[8]);
uid.len   =        strlen(uid.arr);

/******************************************************
 * Establecer conexion concurrente con ORACLE (orlon) *
 ******************************************************/
    EXEC SQL CONNECT :uid;

    if (sqlca.sqlcode==-1915)
       {
	fprintf (stderr,"Oracle Base de Datos no esta activa. SGA (%d)\n",
		 	sqlca.sqlcode);
        exit (1);
       }
    else
       if (sqlca.sqlcode==-1017)
	  {
	   fprintf (stderr,"User Name/Password es Invalido. Re-intente.\n");
	   exit (1);
	  }
       else
          if (sqlca.sqlcode)
	     exit (1);

    busco_impresora(device);
    abre_impresora(copias);

/**********************************************
 * Procesar una sentencia SQL (oexec).        *
 **********************************************/

   EXEC SQL DECLARE C3 CURSOR FOR
            select codigo_cliente, valor
            from   paretto
            where  valor > 0
            order  by valor desc;

   EXEC SQL delete from paretto;

   if (sqlca.sqlcode != 1403 && sqlca.sqlcode != 0)
       fprintf (stderr, "Error Borrando Paretto (%d)\n", sqlca.sqlcode);

   EXEC SQL insert into paretto
            select codigo_cliente,
                   sum(nvl(valor_oftalmica,0)+nvl(valor_contacto,0))
            from  facturas f
            where tipo_documento  in ('F','C')                       and
                  fecha_documento >= to_date(:fecha_ini,'yyyymmdd')  and
                  fecha_documento <= to_date(:fecha_fin,'yyyymmdd')  and
                  codigo_cliente  >= :codigoi                        and
                  codigo_cliente  <= :codigof                        and
                  estado_factura   = 0                               and
              not exists
              (select 'x'
               from   basura
               where  f.tipo_factura   = tipo_factura   and
                      f.tipo_documento = tipo_documento and
                      f.numero_factura = numero_factura)
            group by codigo_cliente;


   if (sqlca.sqlcode != 1403 && sqlca.sqlcode != 0)
       fprintf (stderr, "Error Insertando Paretto C1(%d)\n", sqlca.sqlcode);

   EXEC SQL select sum(valor)
            into  :valor_total
            from   paretto
            where  valor > 0;

   oraest  = sqlca.sqlcode;
   if (sqlca.sqlcode != 1403 && sqlca.sqlcode != 0)
       fprintf (stderr, "Error Leyendo Paretto C4(%d)\n", sqlca.sqlcode);

   EXEC SQL OPEN C3;
   staora  = 0;
   titulos();
   while (staora == 0) {

          EXEC SQL FETCH C3 INTO :codigo_cliente, :valor;

          staora  = sqlca.sqlcode;
          if (staora ==  1403) break;
          if (staora == -1405)
              staora  = 0;
          else if (staora)
                   fprintf (stderr, "Error Leyendo C3 (%d)\n", staora);

          codigo_cliente.arr  [codigo_cliente.len] = '\0';

          valor_parcial+=valor;
          strcpy (wcod.arr,codigo_cliente.arr);
          wcod.len   =        strlen(wcod.arr);

          EXEC SQL select n.nombre  into :nomb_clie
	           from  nits n, clientes cl
                   where n.codigo_nit      = cl.codigo_nit       and
                         cl.codigo_cliente =   :wcod;
          oraest  = sqlca.sqlcode;
          if (oraest != 1403 && oraest != 0)
              fprintf (stderr, "Error Leyendo C2 (%d)\n", oraest);
          nomb_clie.arr       [nomb_clie.len]      = '\0';

          porcentaje=valor_parcial/valor_total;
          strcpy (wciu,codigo_cliente.arr);
//          strorg (wciu,1,5);
          sprintf(cadena,"%8.2f",valor);
          strorg(nomb_clie.arr,1,35);
          fprintf(fp,"%01.4f %s %-35s %14s ",porcentaje,wciu,nomb_clie.arr,fmtnum("zzz,zzz,zz9.99",cadena,r_t));
          cantidad=(long int)valor/(long int)constante;
          if (cantidad > 70)
              cantidad = 70;
          strful(cadena,cantidad,'*');
          fprintf(fp,"I%s\n",cadena);
   }
   sprintf(cadena,"%8.2f",valor_total);
   fprintf(fp,"\n%44s %15s\n","Total Valor ",fmtnum("$zzz,zzz,zz9.99",cadena,r_t));
   cierre_impresora();

   EXEC SQL CLOSE C3;

   EXEC SQL COMMIT WORK RELEASE;

   exit   (0);
}

/************************
* TITULOS()
*    Imprime titulos en el archivo de spool.
*/

void titulos()
{
 con_pag++;
 strful(cadena,37,'*');
 fprintf(fp,"%s%s%s%s\n\n",diezcpi,ancho_on,cadena,ancho_off);
 strful(cadena,(int)(45-strlen("CURVA DE PARETTO"))/2,' ');
 fprintf(fp,"%s%s%s\n\n",condensado_on,cadena,"CURVA DE PARETTO");
 strful(cadena,(int)(90-strlen(fechas))/2,' ');
 fprintf(fp,"%s%s\n\n",cadena,fechas);
 strful(cadena2,(int)(45-strlen("CONSTANTE $         "))/2,' ');
 sprintf(cadena,"%8.2f",constante);
 fprintf(fp,"%s%s%s\n\n",cadena2,"CONSTANTE $ ",fmtnum("zz,zzz,zz9.99",cadena,r_t));
 fprintf(fp,"%71s%s\n"," ","1         2         3         4         5         6         7");
 fprintf(fp,"%s\n","  %   CODIGO   NOMBRE   DEL   CLIENTE                 VALOR      1234567890123456789012345678901234567890123456789012345678901234567890");
 strful(cadena,70,'-');
 fprintf(fp,"%62s%s\n"," ",cadena);
 con_lin = 10;
}

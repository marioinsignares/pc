/*****************************************************************
* PERDYGAN.C Version 1.0 - Rev 1.2 - Jun. 30/92.
*
* perdygan.c. Perdida y ganancias
*
* Uso: perdygan codigo_emp aamm device copias userid/password\n");
*
* Mario E. Santiago I. Creado en Marzo 19 de 1.994.
* Teodoro Tarud & Cia Ltda.
*
*/

#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <setjmp.h>
#include <stdlib.h>
#include <math.h>

void titulos();
void imprime_acumulados();
void actualizo_secuencia();
void hacer_cierre();
void cierre_ejercicio();
void ver_inf();
void ver_inf2();

EXEC SQL BEGIN DECLARE SECTION;

VARCHAR uid[100];

VARCHAR nomb_emp   [51];
double  nit;
int     digito;
VARCHAR codigo_emp [4];

                                            /* Variables globales del usuario */
char    pagina[4];                                   /* Contador de Paginas */
int     con_pag=0;                                   /* Contador de Paginas */
int     con_lin=66;                                   /* Contador de Lineas  */
int     cl;
VARCHAR ano_mesi[20];
VARCHAR ano_mes13[20];
VARCHAR ano_mes[20];
int     oraestn;
int     oraestx;
int     oraestd;
        		                /* Variables de recepcion para datos */
char *fmtnum(), r_t[255];
double  secuencia;
int     diai;
int     mesi;
int     anoi;

/* Columnas de la tabla Plan y Secuencia */

VARCHAR cuenta     [15];
VARCHAR nombre_cta [72];
VARCHAR db_cr      [09];
VARCHAR imprime_cta[09];
VARCHAR cuenta_r   [15];
VARCHAR raya       [20];
double  valor;
float   ptaje;
int     columna;
int     totalizo;
int     acumule;
int     nivel;
int     indentacion;
int     efectos;
int     salto;

int     i, j, k;
union efec {
      int  efec_ent;
      struct  efec_imp {
        unsigned clear_buffer : 1;
        unsigned subrayado    : 1;
        unsigned alto         : 1;
        unsigned enfatizado   : 1;
        unsigned ancho        : 1;
        unsigned condensado   : 1;
        unsigned elite        : 1;
        unsigned diezcpi      : 1;
      } efec_char;
} efec_u;

/* Columnas de la tabla Acumulados */

VARCHAR nivelb [5];
VARCHAR cuentab[15];
double  valor_deb;
double  valor_cre;

/* Columnas de la tabla Movto_c */

VARCHAR fechab      [30];
VARCHAR consecutivob[20];

/* Columnas de la tabla Movto_d */

VARCHAR secuenciab [20];
VARCHAR infa       [15];
VARCHAR infb       [15];
VARCHAR infc       [15];
VARCHAR infd       [15];
VARCHAR codigo_nitb[10];
VARCHAR valor_debb [25];
VARCHAR valor_creb [25];
char    inf        [5][15];

/* Columnas de la tabla Control_mes */

VARCHAR fuenteb  [9];
double  consecutivo;
double  consecutivo11;

/* Columnas de la tabla Control_mes */

VARCHAR codigo   [15];
double  nitn;
int     codigo_nit;

/* Columnas de la tabla Infacu */

VARCHAR info     [25];

/* Columnas de la tabla Plan */

VARCHAR vecplana [25];
VARCHAR vecplanb [25];
VARCHAR vecplanc [25];
VARCHAR vecpland [25];
char    vecplan  [5][25];

/* Columnas de Update Secuencias */

VARCHAR valorb   [26];
VARCHAR cuenta_rb[15];

/* Columnas de Update Secuencias */

VARCHAR cuenta_rs[15];
VARCHAR codigo_rs[15];

double  capital;
double  reserva;
double  reservan;
double  imporrenta;
double  total[10];
char    cadena[240];
char    cadena2[240];
char    cadena3[240];
char    cadena4[240];
char    cadena5[240];
char    cadenon[240];
char    login[220];
char    copias[5];
char    cierre[2];
char    vecinf[20][24];
char    timbrado[2];

/* sucursales y c.costo */

VARCHAR sucursal   [20];
VARCHAR cen_cos    [20];
VARCHAR sucursali  [10];
VARCHAR sucursalf  [10];
VARCHAR cen_cosi   [04];
VARCHAR cen_cosf   [04];
VARCHAR nomb_suci  [12];
VARCHAR nomb_sucf  [12];

VARCHAR sucursalb  [05];
VARCHAR cen_cosb   [03];
VARCHAR sucursal_rs[05];
VARCHAR cen_cos_rs [03];

EXEC SQL END DECLARE SECTION;
EXEC SQL INCLUDE SQLCA;

extern double redondo();

void main(argc, argv)
int     argc;
char    *argv[];
{

char	device[6];
int	staora;
int	status = 0;

    if (argc < 7)
       {
	printf ("Incorrecta invocacion:\n");
        printf ("Uso : codigo_emp sucursali sucursalf c.costoi c.costof aaaamm copias pagina device cierre(#) timbrado(s/n) userid/password\n");
	printf ("      cierre : 0=Solo imprime el G Y P\n");
	printf ("      cierre : 1=Hace el movimiento del cierre\n");
	printf ("      cierre : 2=Hace la actualizacion de los saldos\n");
	printf ("      cierre : 3=P Y G de un mes\n\n");
	printf ("      device : t salida por terminal\n");
	printf ("      device : s salida standar     \n");
	printf ("               Px salida por impresora (x nro printer)\n");
	printf ("               userid/password nombre usuario y password\n");
        exit (1);
       }
       strcpy (codigo_emp.arr,     argv[1]);
       codigo_emp.len = strlen(codigo_emp.arr);

       strcpy (sucursali.arr,  argv[2]);
       sucursali.len  =        strlen(sucursali.arr);
       strcpy (sucursalf.arr,  argv[3]);
       sucursalf.len  =        strlen(sucursalf.arr);
       strcpy (cen_cosi.arr,   argv[4]);
       cen_cosi.len   =        strlen(cen_cosi.arr);
       strcpy (cen_cosf.arr,   argv[5]);
       cen_cosf.len   =        strlen(cen_cosf.arr);

       strcpy (copias,         argv[7]);
       strcpy (pagina,         argv[8]);
       strcpy (device,         argv[9]);
       strlow (device);
       strcpy (cierre,         argv[10]);
       strcpy (timbrado,       argv[11]);
       strlow (timbrado);

    if (!strpos ("/", argv[12]))
       {
        printf ("user id/password incorrecto.\n");
	exit (1);
       }

    strcpy (uid.arr,    argv[12]);
    uid.len = strlen(uid.arr);

/*
*****************************************************
* Establecer conexion concurrente con ORACLE (orlon) *
*****************************************************
*/

    EXEC SQL CONNECT :uid;

    if (sqlca.sqlcode==-1915)
       {
	fprintf (stderr,"Oracle Base de Datos no esta activa. SGA (%d)\n",
		 	sqlca.sqlcode);
        exit (1);
       }
    else
       if (sqlca.sqlcode==-1017)
	  {
	   fprintf (stderr,"User Name/Password es Invalido. Re-intente.\n");
	   exit (1);
	  }
       else
          if (sqlca.sqlcode)
	     exit (1);

    busco_impresora(device);
    abre_impresora(copias);

/*
**********************************************
* Pasa la sentencia SQL a ORACLE. (osql3).    *
* e identifica la localizacion y tipo  de  un *
* area en el programa para recuperar datos de *
* ORACLE. (odefin).                           *
**********************************************
*/
    strcpy (ano_mes.arr,   argv[6]);
    ano_mes.len =          strlen(ano_mes.arr);

    strcpy (cadena,ano_mes.arr);
    strorg (cadena,1,4);
    anoi         =          atoi(cadena);

    strcpy (cadena,ano_mes.arr);
    strorg (cadena,5,2);
    mesi         =          atoi(cadena);

    if (!strcmp(cierre,"3")) {
       sprintf (ano_mesi.arr,"%d%02d",anoi,mesi);
       ano_mesi.len = strlen(ano_mesi.arr);
       sprintf (ano_mes13.arr,"%d%02d",anoi,mesi);
       ano_mes13.len = strlen(ano_mes13.arr);
       }
    else {
       sprintf (ano_mesi.arr,"%d%02d",anoi-1,13);
       ano_mesi.len = strlen(ano_mesi.arr);
       sprintf (ano_mes13.arr,"%d%02d",anoi,13);
       ano_mes13.len = strlen(ano_mes13.arr);
    }
    EXEC SQL select n.nombre, n.nit, n.digito
                    into :nomb_emp, :nit, :digito
             from   nits n, empresas e
             where  n.codigo_nit = e.codigo_nit and
                    e.codigo_emp = to_number(:codigo_emp);

    if (sqlca.sqlcode != 1403 && sqlca.sqlcode != 0)
        fprintf (stderr, "Error leyendo Empresa (%d)\n", sqlca.sqlcode);


/* Cx */

    EXEC SQL select nombre
             into  :nomb_suci
             from   sucursal
             where  sucursal   = :sucursali   and
                    codigo_emp = to_number(:codigo_emp);

    if (sqlca.sqlcode == 0)
        nomb_emp.arr [nomb_emp.len] = '\0';

    if (sqlca.sqlcode != 1403 && sqlca.sqlcode != 0)
        fprintf (stderr, "Error leyendo Sucursali=%s (%d)\n",sucursali.arr, sqlca.sqlcode);

/* Cx1 */

    EXEC SQL select nombre
             into  :nomb_sucf
             from   sucursal
             where  sucursal   = :sucursalf   and
                    codigo_emp = to_number(:codigo_emp);

    if (sqlca.sqlcode == 0)
        nomb_emp.arr [nomb_emp.len] = '\0';

    if (sqlca.sqlcode != 1403 && sqlca.sqlcode != 0)
        fprintf (stderr, "Error leyendo Sucursalf=%s (%d)\n",sucursalf.arr, sqlca.sqlcode);

     EXEC SQL DECLARE C2 CURSOR FOR
              select p.cuenta, p.nombre, db_cr, columna,
                     totalizo, acumule, nivel, indentacion, efectos,
                     nvl(valor,0), salto, raya, ptaje, cuenta_r, imprime_cta
              from   plan p, secuencia s
              where  p.codigo_emp = :codigo_emp and
                     s.cuenta     = p.cuenta          and
                     s.clase      = 'PYG'                and
                     s.codigo_emp = p.codigo_emp
              group by p.cuenta, p.nombre, db_cr, columna, totalizo,
                       acumule, nivel, consecutivo, indentacion, efectos,
                       valor, salto, raya, ptaje, cuenta_r, imprime_cta
              order by s.consecutivo;

      EXEC SQL DECLARE C9 CURSOR FOR
               select a.cuenta, a.codigo, a.codigo_nit, n.nit,
                      (nvl(sum(valor_deb),0)-nvl(sum(valor_cre),0))*-1,
                      a.sucursal, a.cen_cos
               from   acumulanit a, secuencia s, nits n
               where  a.codigo_emp = :codigo_emp                and
                      a.ano_mes   >= :ano_mesi                  and
                      a.ano_mes   <= :ano_mes                   and
                      a.cuenta like s.cuenta||'%'               and
                      substr(s.cuenta,1,1) <> '0'               and
                      a.codigo_emp = s.codigo_emp               and
                      a.codigo_nit = n.codigo_nit(+)            and
        	      a.sucursal  >= (:sucursali)               and
                      a.sucursal  <= (:sucursalf)               and
                      a.cen_cos   >= to_number(:cen_cosi)       and
                      a.cen_cos   <= to_number(:cen_cosf)       and
                      s.clase      = 'PYG'                      and
                      s.valor     is NULL
               group by s.cuenta, a.cuenta, a.sucursal, a.cen_cos, a.codigo, a.codigo_nit,
                      n.nit, s.consecutivo
               order by s.consecutivo, n.nit, a.codigo;

      EXEC SQL DECLARE C23 CURSOR FOR
               select nvl(s.cuenta_r,s.cuenta), s.codigo_r, s.codigo_nit_r,
                      n.nit, s.valor*-1, sucursal, cen_cos
               from   secuencia s, nits n
               where  s.codigo_emp    =      :codigo_emp and
                      s.valor         is not NULL          and
                      s.clase         = 'PYG'              and
                      s.codigo_nit_r  = n.codigo_nit(+);

    imprime_acumulados();

    cierre_impresora();

    EXEC SQL DECLARE C10 CURSOR FOR
                     select inf from infacu;

    EXEC SQL OPEN C10;

    staora = 0;
    k=0;
    while (!staora) {
          EXEC SQL FETCH C10 INTO :info;

          staora = sqlca.sqlcode;
          if (staora) break;

          info.arr [info.len] = '\0';
          strcpy(vecinf[k], info.arr);
          k++;
    }

    EXEC SQL CLOSE C10;

    if (!strcmp(cierre,"1"))
       hacer_cierre();
    if (!strcmp(cierre,"2"))
       cierre_ejercicio();

    EXEC SQL commit WORK RELEASE;

    exit   (0);
}

/************************
* TITULOS()
*    Imprime titulos en el archivo de spool.
*/

void titulos()
{
 con_pag++;
 fprintf(fp,"%s",salte_pagina);
 if (strcmp(timbrado,"s")) {
     if (atoi(pagina)>con_pag)
         return;
     if (!strcmp(codigo_emp.arr,"3"))
        fprintf(fp,".");
     strful(cadena,(int)(42-strlen(nomb_emp.arr))/2,' ');
     fprintf(fp,"%s%s%s%s%s\n",diezcpi,ancho_on,cadena,nomb_emp.arr,ancho_off);
     sprintf (cadena,"%12.0f",nit);
     fprintf (fp,"%s%s%25s %18s",condensado_on,ancho_on,"NIT :",fmtnum("zzz,zzz,zzz,zzz",cadena,r_t));
     if (digito > 0) {
        sprintf (cadena,"%d",digito);
        fprintf (fp,"-%s",fmtnum("z",cadena,r_t));
     }
     else if (digito == 0)
             fprintf (fp,"-%s","0");
     sprintf(cadena2,"SUCURSAL: %s %s A %s %s C.COSTO: %s A %s",sucursali.arr,nomb_suci.arr,sucursalf.arr,nomb_sucf.arr,cen_cosi.arr,cen_cosf.arr);
     strful(cadena,(int)(80-strlen(cadena2))/2,' ');
     fprintf(fp,"\n%s%s%s%s",condensado_on,ancho_on,cadena,cadena2);
     fprintf(fp,"\n%20s%s%s\n\n"," ","     ESTADO DE RESULTADO     ",ancho_off);
 }
 fecha_system(cadena);
 fprintf(fp,"%s%s%-44s%s%10s / %d",condensado_on,"FECHA PROCESO : ",cadena,"PERIODO : ",mes[mesi-1],anoi);
 fprintf(fp,"%54s %d%s\n\n","PAGINA ",con_pag,diezcpi);
 con_lin = 6;
}

void imprime_acumulados()
{
double valor_tempo;
int	staora;

    staora = 0;
    EXEC SQL OPEN C2;

 while (!staora) {
    EXEC SQL FETCH C2 INTO :cuenta,   :nombre_cta, :db_cr, :columna,
                           :totalizo, :acumule,    :nivel, :indentacion,
                           :efectos,  :valor,      :salto, :raya,
                           :ptaje,    :cuenta_r,   :imprime_cta;

      staora = sqlca.sqlcode;
      if (sqlca.sqlcode == 1403) break;
      if (sqlca.sqlcode == -1405) staora = 0;

      cuenta.arr      [cuenta.len]      = '\0';
      nombre_cta.arr  [nombre_cta.len]  = '\0';
      db_cr.arr       [db_cr.len]       = '\0';
      raya.arr        [raya.len]        = '\0';
      cuenta_r.arr    [cuenta_r.len]    = '\0';
      imprime_cta.arr [imprime_cta.len] = '\0';


      if (con_lin > 60) titulos();
      strcpy(cadena2,"");
      if (!strcmp(imprime_cta.arr,"S")) {
          if (strcmp(cuenta_r.arr,"")) {
              sprintf (cadena2,"%-9s",cuenta_r.arr);
              strorg  (cadena2,1,6);
              sprintf (cadena2,"%-9s",cadena2);
          }
          else {
                sprintf (cadena2,"%-9s",cuenta.arr);
                strorg  (cadena2,1,6);
                sprintf (cadena2,"%-9s",cadena2);
          }
      }
      strful  (cadena3,(int)(indentacion),' ');
      strcpy  (cadenon,cadena3);
      strcat  (cadenon,cadena2);
      sprintf (cadena2,"%-50s",nombre_cta.arr);
      strcat  (cadenon,cadena2);
      strcpy  (cadena3,"");
      strcpy  (cadena4,"");
      strcpy  (cadena5,"");
      efec_u.efec_ent = efectos;
      if (!memcmp(cuenta.arr,"0",1)) {
          if (efec_u.efec_char.diezcpi) {
              strcpy(cadena4,diezcpi);
          }
          if (efec_u.efec_char.elite) {
              strcpy(cadena4,elite);
              strcpy(cadena5,diezcpi);
          }
          if (efec_u.efec_char.condensado) {
              strcpy(cadena4,condensado_on);
              strcpy(cadena5,condensado_off);
          }
          if (efec_u.efec_char.ancho) {
              strcpy(cadena4,ancho_on);
              strcpy(cadena5,ancho_off);
          }
          if (efec_u.efec_char.enfatizado) {
              strcpy(cadena4,enfatizado_on);
              strcpy(cadena5,enfatizado_off);
          }
          if (efec_u.efec_char.alto) {
              strcpy(cadena4,alto_on);
              strcpy(cadena5,alto_off);
          }
          if (efec_u.efec_char.subrayado) {
              strcat(cadena4,subrayado_on);
              strcat(cadena5,subrayado_off);
          }
          if (efec_u.efec_char.clear_buffer) {
              strcpy(cadena4,clear_buffer);
          }
          if (totalizo == 0) {
              if (!memcmp(cuenta_r.arr,"330505",6)) {
                  strcpy(cuentab.arr,"3115");
                  cuentab.len = strlen(cuentab.arr);
                  sprintf(nivelb.arr,"%d",2);
                  nivelb.len = strlen(nivelb.arr);

               EXEC SQL select nvl(sum(valor_deb),0), nvl(sum(valor_cre),0)
                               into :valor_deb, :valor_cre
                        from acumulados
                        where codigo_emp   = to_number(:codigo_emp)       and
                              ano_mes     >= to_number(:ano_mesi  )       and
                              ano_mes     <= to_number(:ano_mes   )       and
       	                      sucursal    >= (:sucursali)                 and
                              sucursal    <= (:sucursalf)                 and
                              cen_cos     >= to_number(:cen_cosi)         and
                              cen_cos     <= to_number(:cen_cosf)         and
                              substr(cuenta,1,decode(to_number(:nivelb),0,1,
                                                     to_number(:nivelb)*2))
                                           = :cuentab;

               if (sqlca.sqlcode)
                  printf ("Error leyendo acumulados E1 (%d)\n",sqlca.sqlcode);

                  capital=(valor_cre-valor_deb)*.5;
                  strcpy(cuentab.arr,"330505");
                  cuentab.len = strlen(cuentab.arr);
                  sprintf(nivelb.arr,"%d",3);
                  nivelb.len  = strlen(nivelb.arr);

               EXEC SQL select nvl(sum(valor_deb),0), nvl(sum(valor_cre),0)
                               into :valor_deb, :valor_cre
                        from acumulados
                        where codigo_emp   = to_number(:codigo_emp)       and
                              ano_mes     >= to_number(:ano_mesi  )       and
                              ano_mes     <= to_number(:ano_mes   )       and
       	                      sucursal    >= (:sucursali)                 and
                              sucursal    <= (:sucursalf)                 and
                              cen_cos     >= to_number(:cen_cosi)         and
                              cen_cos     <= to_number(:cen_cosf)         and
                              substr(cuenta,1,decode(to_number(:nivelb),0,1,
                                                     to_number(:nivelb)*2))
                                           = :cuentab;

               if (sqlca.sqlcode)
                  printf ("Error leyendo acumulados E2 (%d)\n",sqlca.sqlcode);

                  reserva=(valor_cre-valor_deb);
                  /*if (capital > reserva)
                      fprintf (fp,"%s%-44s%s",cadena4,cadenon,cadena5); */
              }
              else if(memcmp(cuenta_r.arr,"330505",6) &&
                      memcmp(cuenta_r.arr,"240405",6))
                       fprintf (fp,"%s%-44s%s",cadena4,cadenon,cadena5);
          }
      }
      else {
            if (valor != 0) {
               if (valor==-.001) {
                   valor=0;
               }
               valor_deb=valor;
               valor_cre=0;
            }
            else {
                  strcpy(cuentab.arr,cuenta.arr);
                  cuentab.len = strlen(cuentab.arr);
                  sprintf(nivelb.arr,"%d",nivel);
                  nivelb.len = strlen(nivelb.arr);

               EXEC SQL select nvl(sum(valor_deb),0), nvl(sum(valor_cre),0)
                               into :valor_deb, :valor_cre
                        from acumulados
                        where codigo_emp   = to_number(:codigo_emp)       and
                              ano_mes     >= to_number(:ano_mesi  )       and
                              ano_mes     <= to_number(:ano_mes   )       and
       	                      sucursal    >= (:sucursali)                 and
                              sucursal    <= (:sucursalf)                 and
                              cen_cos     >= to_number(:cen_cosi)         and
                              cen_cos     <= to_number(:cen_cosf)         and
                              substr(cuenta,1,decode(to_number(:nivelb),0,1,
                                                     to_number(:nivelb)*2))
                                           = :cuentab;

               if (sqlca.sqlcode)
                  printf ("Error leyendo acumulados E3 (%d)\n",sqlca.sqlcode);
            }
            valor_deb-=valor_cre;
            total[acumule]+=valor_deb;
            sprintf (cadena,"%9.2f",valor_deb);
            strful(cadena3,(int)((columna)*16+44),' ');
            if (valor_deb !=0) {
                fprintf(fp,"\r%s",cadenon);
                fprintf(fp,"\r%s%16s",cadena3,fmtnum("zzzzz,zzz,zz9.99",cadena,r_t));
            }
            else salto=0;
            if (totalizo > 0 && valor_deb !=0) {
               fprintf (fp,"\n");
               con_lin++;
            }
      }
      if (totalizo > 0) {
          strful (cadena2,44,' ');
          strcpy (cadena3,cadena2);
          strful (cadena2,(int)((columna)*16),' ');
          strcat (cadena3,cadena2);
          sprintf(cadena,"%9.2f",total[totalizo]);
          total[acumule+1]+=total[totalizo];
          total[totalizo]=0;
          if (!strcmp(raya.arr,"L")) {
              fprintf(fp,"\r%s%16s",cadena3,"---------------");
              fprintf(fp,"%16s",fmtnum("zzzzz,zzz,zz9.99",cadena,r_t));
          }
          if (!strcmp(raya.arr,"U")) {
              fprintf(fp,"\r%s%16s%16s\n",cadena3," ","---------------");
              fprintf (fp,"%s%-44s%s",cadena4,nombre_cta.arr,cadena5);
              fprintf(fp,"\r%s%16s",cadena3," ");
              fprintf(fp,"%16s",fmtnum("zzzzz,zzz,zz9.99",cadena,r_t));
              con_lin++;
          }
          if (!strcmp(raya.arr,"D")) {
              fprintf(fp,"\r%s%16s%16s\n",cadena3," ","---------------");
              fprintf(fp,"%16s\n",fmtnum("zzzzz,zzz,zz9.99",cadena,r_t));
              fprintf(fp,"\r%s%16s%16s",cadena3," ","---------------");
              con_lin+=2;
          }
          if (salto==0)
             salto=1;
          for (i=1;i<=salto;i++) {
               fprintf (fp,"\n");
               con_lin++;
               salto=0;
          }
      }
      if (ptaje > 0) {
          if (total[acumule] < 0) {
              if (!memcmp(cuenta_r.arr,"240405",6)) {
                  imporrenta=redondo((total[acumule]*ptaje*-1)/1000)*1000;
                  sprintf(cadena,"%9.2f",imporrenta);
                  total[acumule]+=imporrenta;
                  fprintf (fp,"%s%-44s%s",cadena4,cadenon,cadena5);
                  fprintf(fp,"\r%46s%2.0f%-28s"," ",ptaje*100,"%");
                  fprintf(fp,"%16s",fmtnum("zzzzz,zzz,zz9.99",cadena,r_t));
              }
              else {
                    if (!memcmp(cuenta_r.arr,"330505",6)) {
/*
                        if (capital > reserva) {
                            reservan=(total[acumule]-imporrenta)*ptaje*-1;
                            if (capital < reserva+reservan) {
                                reservan=capital-reserva;
                            }
                            sprintf(cadena,"%9.2f",reservan);
                            total[acumule]+=reservan;
                            fprintf (fp,"%s%-44s%s",cadena4,cadenon,cadena5);
                            fprintf(fp,"\r%46s%2.0f%-28s"," ",ptaje*100,"%");
                            fprintf(fp,"%16s",fmtnum("zzzzz,zzz,zz9.99",cadena,r_t));
                        }
                        else {
*/
                              salto=0;
                              sprintf(cadena,"%9.2f",-0);
/*
                        }
*/
                    }
                    else {
                          sprintf(cadena,"%9.2f",total[acumule]*ptaje);
                          total[acumule]+=total[acumule]*ptaje;
                          fprintf(fp,"\r%46s%2.0f%-28s"," ",ptaje*100,"%");
                          fprintf(fp,"%16s",fmtnum("zzzzz,zzz,zz9.99",cadena,r_t));
                    }
              }
          }
      }
      if (strcmp(cuenta_r.arr,"")) {
         if (!memcmp(cuenta_r.arr,"360505",6)) {
             valor_tempo = atof(cadena);
             sprintf(cadena,"%9.2f",valor_tempo*-1);
             actualizo_secuencia();
         }
      }

      for (i=1;i<=salto;i++) {
           fprintf (fp,"\n");
           con_lin++;
      }
 }
EXEC SQL CLOSE C2;

fprintf(fp,"\n\n\n\nTEODORO TARUD JAAR                                                           \n");
fprintf(fp,"------------------                                        -------------------\n");
if ( !strcmp(codigo_emp.arr,"1") ||
     !strcmp(codigo_emp.arr,"2") ||
     !strcmp(codigo_emp.arr,"4"))
    fprintf(fp,"    GERENTE                                                   REVISOR FISCAL \n");
else
    fprintf(fp,"    GERENTE                                                     CONTADOR     \n");
fprintf(fp,"                                                               MAT.          \n");
}

void actualizo_secuencia()
{
  strcpy(valorb.arr,cadena);
  valorb.len = strlen(valorb.arr);
  strcpy(cuenta_rb.arr,cuenta_r.arr);
  cuenta_rb.len = strlen(cuenta_r.arr);

  EXEC SQL update secuencia
                  set valor  = :valorb
           where  cuenta_r   = :cuenta_rb  and
                  codigo_emp = :codigo_emp and
                  clase      = 'PYG';
}

void hacer_cierre()
{
int	staora;
int i;
    i = 0;


     EXEC SQL delete from acumulados
              where  codigo_emp   = to_number(:codigo_emp) and
                     ano_mes      = to_number(:ano_mes13);
     if (sqlca.sqlcode)
        printf ("Error borrando acumulados (%d)\n", sqlca.sqlcode);

     EXEC SQL delete from acumulanit
              where  codigo_emp   = to_number(:codigo_emp)       and
                     ano_mes      = to_number(:ano_mes13);
     if (sqlca.sqlcode)
        printf ("Error borrando acumulanit (%d)\n", sqlca.sqlcode);

     strcpy(fuenteb.arr,"11");
     fuenteb.len = strlen(fuenteb.arr);

  /* Lee consecutivo de control_mes Fte 11 Cns ultimo cierre*/
     EXEC SQL select consecutivo into :consecutivo11
              from   control_mes
              where  fuente       = to_number(:fuenteb)    and
                     ano_mes      = to_number(:ano_mes13)  and
                     codigo_emp   = to_number(:codigo_emp)
              for update of consecutivo;

  if (sqlca.sqlcode)
        printf ("Error leyendo control_mes fuente 11.1 (%d)\n", sqlca.sqlcode);
  else {
        sprintf(consecutivob.arr,"%5.0f",consecutivo11);
        consecutivob.len = strlen(consecutivob.arr);

        /* Borra movto_c con base en consecutivo */
        EXEC SQL delete from movto_c
                 where  codigo_emp   = to_number(:codigo_emp) and
                        comprobante  = 999                    and
                        clase        = 'CD'                   and
                        tipo         = '7'                    and
                        ano_mes      = to_number(:ano_mes13);

        /* Borra movto_d con base en consecutivo */
        EXEC SQL delete from movto_d
                 where  codigo_emp   = to_number(:codigo_emp) and
                        ano_mes      = to_number(:ano_mes13)  and
                        consecutivo  = to_number(:consecutivob);

  }
     sprintf(fechab.arr,"31-DIC-%04d",anoi);
     fechab.len = strlen(fechab.arr);

  /* Inserta en acumulados valores_deb y valor_cre en cero */
  EXEC SQL insert into acumulados
  (CODIGO_EMP,ANO_MES,CUENTA,VALOR_DEB,VALOR_CRE,SUCURSAL,CEN_COS)
           select codigo_emp, :ano_mes13, cuenta, 0, 0, sucursal, cen_cos
           from   acumulados
           where  codigo_emp   = to_number(:codigo_emp) and
                  ano_mes     >= to_number(:ano_mesi)   and
                  ano_mes     <= to_number(:ano_mes)
           group by codigo_emp, cuenta;

  /* Inserta en acumulanit valores_deb y valor_cre en cero */
  EXEC SQL insert into acumulanit
  (CODIGO_EMP, ANO_MES, CUENTA, CODIGO, CODIGO_NIT, VALOR_DEB, VALOR_CRE, SUCURSAL, CEN_COS)
           select codigo_emp, :ano_mes13, cuenta, codigo, codigo_nit, 0, 0, sucursal, cen_cos
           from   acumulanit
           where  codigo_emp   = to_number(:codigo_emp) and
                  ano_mes     >= to_number(:ano_mesi)   and
                  ano_mes     <= to_number(:ano_mes)
           group by codigo_emp, cuenta, codigo, codigo_nit;

     strcpy(fuenteb.arr,"08");
     fuenteb.len = strlen(fuenteb.arr);

  /* Lee consecutivo de control_mes Fte 08 sgte consecutivo */
  EXEC SQL select consecutivo+1 into :consecutivo
           from   control_mes
           where  fuente       = to_number(:fuenteb)    and
                  ano_mes      = to_number(:ano_mes13)  and
                  codigo_emp   = to_number(:codigo_emp)
                  for update of consecutivo;

  if (sqlca.sqlcode) {
      consecutivo=1;
      sprintf(consecutivob.arr,"%5.0f",consecutivo);
      consecutivob.len = strlen(consecutivob.arr);

      /* Inserta en control_mes Fte 08 si no existe */
      EXEC SQL insert into control_mes
      (FUENTE,ANO_MES,NOMBRE,CONSECUTIVO,CODIGO_EMP,VERSION)
               values (:fuenteb, :ano_mes13, 'CONTROL DE CIERRE PERIODO',
                       :consecutivob, :codigo_emp,1);

      if (sqlca.sqlcode)
         printf ("Error (C17), insert control_mes (%d)\n", sqlca.sqlcode);
  }
  else {
        sprintf(consecutivob.arr,"%5.0f",consecutivo);
        consecutivob.len = strlen(consecutivob.arr);

        /* Actualiza Cns de Fte 08 en control_mes */
        EXEC SQL update control_mes
                        set    consecutivo = :consecutivob
                 where  codigo_emp   = to_number(:codigo_emp) and
                        ano_mes      = to_number(:ano_mes13)  and
                        fuente       = :fuenteb;

        if (sqlca.sqlcode)
           printf ("Error (C18), update control_mes (%d)\n", sqlca.sqlcode);
  }
  sprintf(fechab.arr,"31-DIC-%04d",anoi);
  fechab.len = strlen(fechab.arr);
  strcpy(fuenteb.arr,"11");
  fuenteb.len = strlen(fuenteb.arr);

  EXEC SQL select consecutivo into :consecutivo11
           from   control_mes
           where  fuente       = to_number(:fuenteb)    and
                  ano_mes      = to_number(:ano_mes13)  and
                  codigo_emp   = to_number(:codigo_emp)
           for update of consecutivo;

  if (sqlca.sqlcode) {
      EXEC SQL insert into control_mes
              (FUENTE,ANO_MES,NOMBRE,CONSECUTIVO,CODIGO_EMP,VERSION)
               values (:fuenteb, :ano_mes13, 'CONTROL DE CIERRE PERIODO',
                       :consecutivob, :codigo_emp,1);

      if (sqlca.sqlcode)
         printf ("Error (C17), insert control_mes (%d)\n", sqlca.sqlcode);
  }
  else {
        EXEC SQL select consecutivo into :consecutivo11
                 from   control_mes
                 where  fuente       = to_number(:fuenteb)    and
                        ano_mes      = to_number(:ano_mes13)  and
                        codigo_emp   = to_number(:codigo_emp)
                 for update of consecutivo;

        if (sqlca.sqlcode)
           printf ("Error leyendo control_mes fuente 11.2 (%d)\n", sqlca.sqlcode);

        /* Actualiza Cns de Fte 11 en control_mes */
        EXEC SQL update control_mes
                        set    consecutivo = :consecutivob
                 where  codigo_emp   = to_number(:codigo_emp) and
                        ano_mes      = to_number(:ano_mes13)  and
                        fuente       = :fuenteb;

        if (sqlca.sqlcode)
           printf ("Error (C18), update control_mes (%d)\n", sqlca.sqlcode);
  }

  /* Selecciona valores para movto_d */
  EXEC SQL OPEN C9;

  /* Grava en movto_c */
  printf(":codigo_emp <%s> :ano_mes13 <%s> :consecutivob <%s> :fechab<%s>",codigo_emp.arr, ano_mes13.arr, consecutivob.arr, fechab.arr); getchar();
  EXEC SQL insert into movto_c
           (CODIGO_EMP,
	    ANO_MES,
	    COMPROBANTE,
	    CONSECUTIVO,
	    CLASE,
	    DESCRIPCION,
	    FECHA,
	    TIPO,
	    ESTADO,
	    NITB,
	    CODIGO_NITB,
	    VALORB,
	    RETENCION,
	    CONTADO)
           values(:codigo_emp, :ano_mes13, 999, :consecutivob, 'CD',
                  'MOVIMIENTO DE CIERRE DEL EJERCICIO',:fechab, '7', '0','','','','','');

  if (sqlca.sqlcode)
     printf ("Error (C6), insert movto_c (%d)\n", sqlca.sqlcode);

  staora=0;
  while (staora != 1403) {
        EXEC SQL FETCH C9 INTO :cuenta, :codigo, :codigo_nit,
                               :nitn,   :valor,  :sucursal,
                               :cen_cos;

        staora = sqlca.sqlcode;
        i++;
        if (staora)
            printf ("Error (C9), select (%d) i=(%d)\n", staora,i);
        if (sqlca.sqlcode == 1403) break;
        if (sqlca.sqlcode == -1405) staora = 0;

        cuenta.arr     [cuenta.len]     = '\0';
        codigo.arr     [codigo.len]     = '\0';
        sucursal.arr   [sucursal.len]   = '\0';
        cen_cos.arr    [cen_cos.len]    = '\0';

        secuencia++;
        sprintf(secuenciab.arr,"%6.0f",secuencia);
        secuenciab.len = strlen(secuenciab.arr);
        strcpy(cuentab.arr,cuenta.arr);
        cuentab.len = strlen(cuentab.arr);
        ver_inf();
        strcpy(valor_debb.arr,"");
        strcpy(valor_creb.arr,"");
        valor_debb.len = strlen(valor_debb.arr);
        valor_creb.len = strlen(valor_creb.arr);
        sprintf(codigo_nitb.arr,"%5d",codigo_nit);
        codigo_nitb.len = strlen(codigo_nitb.arr);
        if (valor>0) {
           sprintf(valor_debb.arr,"%10.2f",valor);
           valor_debb.len = strlen(valor_debb.arr);
        }
        else {
              valor=valor*-1;
              sprintf(valor_creb.arr,"%10.2f",valor);
              valor_creb.len = strlen(valor_creb.arr);
        }
        strcpy(sucursalb.arr,sucursal.arr);
        sucursalb.len = strlen(sucursal.arr);
        strcpy(cen_cosb.arr,cen_cos.arr);
        cen_cosb.len = strlen(cen_cosb.arr);

        if (valor> 0) {
           EXEC SQL insert into movto_d
           	    (CODIGO_EMP,
		     ANO_MES,
		     CONSECUTIVO,
		     SECUENCIA,
		     CUENTA,
	 	     INFA,
		     INFB,
		     INFC,
		     INFD,
		     CODIGO_NIT,
		     VALOR_DEB,
		     VALOR_CRE,
		     SUCURSAL,
		     CEN_COS)
                    values(:codigo_emp,  :ano_mes13, :consecutivob,
                           :secuenciab,  :cuentab,  :infa, :infb, :infc, :infd,
                           :codigo_nitb, :valor_debb, :valor_creb, :sucursalb, :cen_cosb);
        if (sqlca.sqlcode) {
           printf ("Error, insert movto_d (%d) \n", sqlca.sqlcode);
           printf ("codigo_emp   (%s)(%d)\n", codigo_emp.arr, codigo_emp.len);
           printf ("ano_mes13    (%s)(%d)\n", ano_mes13.arr, ano_mes13.len);
           printf ("consecutivob (%s)(%d)\n", consecutivob.arr, consecutivob.len);
           printf ("secuenciab   (%s)(%d)\n", secuenciab.arr, secuenciab.len);
           printf ("cuentab      (%s)(%d)\n", cuentab.arr, cuentab.len);
           printf ("infa         (%s)(%d)\n", infa.arr, infa.len);
           printf ("infb         (%s)(%d)\n", infb.arr, infb.len);
           printf ("infc         (%s)(%d)\n", infc.arr, infc.len);
           printf ("infd         (%s)(%d)\n", infd.arr, infd.len);
           printf ("codigo_nitb  (%s)(%d)\n", codigo_nitb.arr, codigo_nitb.len);
           printf ("valor_debb   (%s)(%d)\n", valor_debb.arr, valor_debb.len);
           printf ("valor_creb   (%s)(%d)\n", valor_creb.arr, valor_creb.len);
           printf ("sucursalb    (%s)(%d)\n", sucursalb.arr, sucursalb.len);
           printf ("cen_cosb     (%s)(%d)\n", cen_cosb.arr, cen_cosb.len);
           exit (0);
        }
        }
  }
  EXEC SQL CLOSE C9;


  /* Selecciona valores GENERADOS para movto_d */
  EXEC SQL OPEN C23;

  staora = 0;
  while (!staora) {
        EXEC SQL FETCH C23 INTO :cuenta_rs, :codigo_rs, :codigo_nit, :nitn,
                                :valor, :sucursal_rs, :cen_cos_rs;

        staora = sqlca.sqlcode;
        if (staora == 1403) break;
        if (sqlca.sqlcode == -1405) staora = 0;

        cuenta_rs.arr      [cuenta_rs.len]      = '\0';
        codigo_rs.arr      [codigo_rs.len]      = '\0';

        secuencia++;
        sprintf(secuenciab.arr,"%6.0f",secuencia);
        strcpy(cuentab.arr,cuenta_rs.arr);
        secuenciab.len = strlen(secuenciab.arr);
        cuentab.len = strlen(cuentab.arr);
        ver_inf2();
        strcpy(valor_debb.arr,"");
        strcpy(valor_creb.arr,"");
        valor_debb.len = strlen(valor_debb.arr);
        valor_creb.len = strlen(valor_creb.arr);
        sprintf(codigo_nitb.arr,"%5d",codigo_nit);
        codigo_nitb.len = strlen(codigo_nitb.arr);
        if (valor>0) {
           sprintf(valor_debb.arr,"%10.2f",valor);
           valor_debb.len = strlen(valor_debb.arr);
        }
        else {
              valor=valor*-1;
              sprintf(valor_creb.arr,"%10.2f",valor);
              valor_creb.len = strlen(valor_creb.arr);
        }
        strcpy(sucursalb.arr,sucursal_rs.arr);
        sucursalb.len = strlen(sucursal.arr);
        strcpy(cen_cosb.arr,cen_cos_rs.arr);
        cen_cosb.len = strlen(cen_cosb.arr);
        if (valor> 0) {
           EXEC SQL insert into movto_d
           	    (CODIGO_EMP,
		     ANO_MES,
		     CONSECUTIVO,
		     SECUENCIA,
		     CUENTA,
	 	     INFA,
		     INFB,
		     INFC,
		     INFD,
		     CODIGO_NIT,
		     VALOR_DEB,
		     VALOR_CRE,
		     SUCURSAL,
		     CEN_COS)
                    values(:codigo_emp,  :ano_mes13, :consecutivob,
                           :secuenciab,  :cuentab,   :infa, :infb, :infc, :infd,
                           :codigo_nitb, :valor_debb, :valor_creb, :sucursalb, :cen_cosb);
        if (sqlca.sqlcode)
           printf ("Error, insert movto_d (%d)\n", sqlca.sqlcode);
           staora = sqlca.sqlcode;
           if (sqlca.sqlcode == -1405) staora = 0;
        }
  }
  EXEC SQL CLOSE C23;
}

void cierre_ejercicio()
{
 /* Hace el cierre definitivo del ejercicio en el mes 13 */
 /* Suma desde el mes 13 del ano anterior hasta el actual y el resultado */
 /* lo deja en el mes 13 del ano en curso */
 /* Para el archivo de acumulados */
 EXEC SQL update acumulados a
                 set (valor_deb, valor_cre) =
                     (select nvl(sum(valor_deb),0), nvl(sum(valor_cre),0)
                      from  acumulados
                      where cuenta       = a.cuenta              and
                            sucursal     = a.sucursal            and
                            cen_cos      = a.cen_cos             and
                            ano_mes     >= to_number(:ano_mesi)  and
                            ano_mes     <= to_number(:ano_mes13) and
                            codigo_emp   = a.codigo_emp)
           where ano_mes      = to_number(:ano_mes13)   and
                 codigo_emp   = to_number(:codigo_emp);

 /* Para el archivo de acumulanit */
 EXEC SQL update acumulanit a
                 set (valor_deb, valor_cre) =
                     (select nvl(sum(valor_deb),0), nvl(sum(valor_cre),0)
                      from  acumulanit
                      where codigo_nit   = a.codigo_nit          and
                            codigo       = a.codigo              and
                            cuenta       = a.cuenta              and
                            sucursal     = a.sucursal            and
                            cen_cos      = a.cen_cos             and
                            ano_mes     >= to_number(:ano_mesi)  and
                            ano_mes     <= to_number(:ano_mes13) and
                            codigo_emp   = a.codigo_emp)
          where ano_mes      = to_number(:ano_mes13)             and
                codigo_emp   = to_number(:codigo_emp);

}

void ver_inf()
{
  EXEC SQL select infa, infb, infc, infd
                  into :vecplana, :vecplanb, :vecplanc, :vecpland
           from   plan
           where  codigo_emp = :codigo_emp and
                  cuenta     = :cuentab;

  vecplana.arr [vecplana.len] = '\0';
  vecplanb.arr [vecplanb.len] = '\0';
  vecplanc.arr [vecplanc.len] = '\0';
  vecpland.arr [vecpland.len] = '\0';

  strcpy (vecplan[0], vecplana.arr);
  strcpy (vecplan[1], vecplanb.arr);
  strcpy (vecplan[2], vecplanc.arr);
  strcpy (vecplan[3], vecpland.arr);

  for (i=0;i<4;i++) {
       strcpy(inf[i],"");
  }
  i=j=0;
  for (i=0;i<4;i++) {
      if (!strcmp(vecplan[i],"NIT")) {
          sprintf(inf[i],"%12.0f",nitn);
      }
      for (j=0;j<k;j++) {
          if (!strcmp(vecplan[i],vecinf[j])) {
              strcpy(inf[i],codigo.arr);
          }
      }
  }
  strcpy (infa.arr, inf[0]);
  strcpy (infb.arr, inf[1]);
  strcpy (infc.arr, inf[2]);
  strcpy (infd.arr, inf[3]);
  infa.len = strlen(infa.arr);
  infb.len = strlen(infb.arr);
  infc.len = strlen(infc.arr);
  infd.len = strlen(infd.arr);
}

void ver_inf2()
{
  EXEC SQL select infa, infb, infc, infd
                  into :vecplana, :vecplanb, :vecplanc, :vecpland
           from   plan
           where  codigo_emp = :codigo_emp and
                  cuenta     = :cuentab;

  vecplana.arr [vecplana.len] = '\0';
  vecplanb.arr [vecplanb.len] = '\0';
  vecplanc.arr [vecplanc.len] = '\0';
  vecpland.arr [vecpland.len] = '\0';

  strcpy (vecplan[0], vecplana.arr);
  strcpy (vecplan[1], vecplanb.arr);
  strcpy (vecplan[2], vecplanc.arr);
  strcpy (vecplan[3], vecpland.arr);

  for (i=0;i<4;i++) {
       strcpy(inf[i],"");
  }
  i=j=0;
  for (i=0;i<4;i++) {
      if (!strcmp(vecplan[i],"NIT")) {
          sprintf(inf[i],"%12.0f",nitn);
      }
      for (j=0;j<k;j++) {
          if (!strcmp(vecplan[i],vecinf[j])) {
              strcpy(inf[i],codigo_rs.arr);
          }
      }
  }
  strcpy (infa.arr, inf[0]);
  strcpy (infb.arr, inf[1]);
  strcpy (infc.arr, inf[2]);
  strcpy (infd.arr, inf[3]);
  infa.len = strlen(infa.arr);
  infb.len = strlen(infb.arr);
  infc.len = strlen(infc.arr);
  infd.len = strlen(infd.arr);
}

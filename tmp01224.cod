
/*****************************************************************
* PERDYGAN.C Version 1.0 - Rev 1.2 - Jun. 30/92.
*
* perdygan.c. Perdida y ganancias
*
* Uso: perdygan codigo_emp aamm device copias userid/password\n");
*
* Mario E. Santiago I. Creado en Marzo 19 de 1.994.
* Teodoro Tarud & Cia Ltda.
*
*/

#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <setjmp.h>
#include <stdlib.h>
#include <math.h>

void titulos();
void imprime_acumulados();
void actualizo_secuencia();
void hacer_cierre();
void cierre_ejercicio();
void ver_inf();
void ver_inf2();

/* EXEC SQL BEGIN DECLARE SECTION; */ 


/* VARCHAR uid[100]; */ 
struct { unsigned short len; unsigned char arr[100]; } uid;


/* VARCHAR nomb_emp   [51]; */ 
struct { unsigned short len; unsigned char arr[51]; } nomb_emp;

double  nit;
int     digito;
/* VARCHAR codigo_emp [4]; */ 
struct { unsigned short len; unsigned char arr[4]; } codigo_emp;


                                            /* Variables globales del usuario */
char    pagina[4];                                   /* Contador de Paginas */
int     con_pag=0;                                   /* Contador de Paginas */
int     con_lin=66;                                   /* Contador de Lineas  */
int     cl;
/* VARCHAR ano_mesi[20]; */ 
struct { unsigned short len; unsigned char arr[20]; } ano_mesi;

/* VARCHAR ano_mes13[20]; */ 
struct { unsigned short len; unsigned char arr[20]; } ano_mes13;

/* VARCHAR ano_mes[20]; */ 
struct { unsigned short len; unsigned char arr[20]; } ano_mes;

int     oraestn;
int     oraestx;
int     oraestd;
        		                /* Variables de recepcion para datos */
char *fmtnum(), r_t[255];
double  secuencia;
int     diai;
int     mesi;
int     anoi;

/* Columnas de la tabla Plan y Secuencia */

/* VARCHAR cuenta     [15]; */ 
struct { unsigned short len; unsigned char arr[15]; } cuenta;

/* VARCHAR nombre_cta [72]; */ 
struct { unsigned short len; unsigned char arr[72]; } nombre_cta;

/* VARCHAR db_cr      [09]; */ 
struct { unsigned short len; unsigned char arr[9]; } db_cr;

/* VARCHAR imprime_cta[09]; */ 
struct { unsigned short len; unsigned char arr[9]; } imprime_cta;

/* VARCHAR cuenta_r   [15]; */ 
struct { unsigned short len; unsigned char arr[15]; } cuenta_r;

/* VARCHAR raya       [20]; */ 
struct { unsigned short len; unsigned char arr[20]; } raya;

double  valor;
float   ptaje;
int     columna;
int     totalizo;
int     acumule;
int     nivel;
int     indentacion;
int     efectos;
int     salto;

int     i, j, k;
union efec {
      int  efec_ent;
      struct  efec_imp {
        unsigned clear_buffer : 1;
        unsigned subrayado    : 1;
        unsigned alto         : 1;
        unsigned enfatizado   : 1;
        unsigned ancho        : 1;
        unsigned condensado   : 1;
        unsigned elite        : 1;
        unsigned diezcpi      : 1;
      } efec_char;
} efec_u;

/* Columnas de la tabla Acumulados */

/* VARCHAR nivelb [5]; */ 
struct { unsigned short len; unsigned char arr[5]; } nivelb;

/* VARCHAR cuentab[15]; */ 
struct { unsigned short len; unsigned char arr[15]; } cuentab;

double  valor_deb;
double  valor_cre;

/* Columnas de la tabla Movto_c */

/* VARCHAR fechab      [30]; */ 
struct { unsigned short len; unsigned char arr[30]; } fechab;

/* VARCHAR consecutivob[20]; */ 
struct { unsigned short len; unsigned char arr[20]; } consecutivob;


/* Columnas de la tabla Movto_d */

/* VARCHAR secuenciab [20]; */ 
struct { unsigned short len; unsigned char arr[20]; } secuenciab;

/* VARCHAR infa       [15]; */ 
struct { unsigned short len; unsigned char arr[15]; } infa;

/* VARCHAR infb       [15]; */ 
struct { unsigned short len; unsigned char arr[15]; } infb;

/* VARCHAR infc       [15]; */ 
struct { unsigned short len; unsigned char arr[15]; } infc;

/* VARCHAR infd       [15]; */ 
struct { unsigned short len; unsigned char arr[15]; } infd;

/* VARCHAR codigo_nitb[10]; */ 
struct { unsigned short len; unsigned char arr[10]; } codigo_nitb;

/* VARCHAR valor_debb [25]; */ 
struct { unsigned short len; unsigned char arr[25]; } valor_debb;

/* VARCHAR valor_creb [25]; */ 
struct { unsigned short len; unsigned char arr[25]; } valor_creb;

char    inf        [5][15];

/* Columnas de la tabla Control_mes */

/* VARCHAR fuenteb  [9]; */ 
struct { unsigned short len; unsigned char arr[9]; } fuenteb;

double  consecutivo;
double  consecutivo11;

/* Columnas de la tabla Control_mes */

/* VARCHAR codigo   [15]; */ 
struct { unsigned short len; unsigned char arr[15]; } codigo;

double  nitn;
int     codigo_nit;

/* Columnas de la tabla Infacu */

/* VARCHAR info     [25]; */ 
struct { unsigned short len; unsigned char arr[25]; } info;


/* Columnas de la tabla Plan */

/* VARCHAR vecplana [25]; */ 
struct { unsigned short len; unsigned char arr[25]; } vecplana;

/* VARCHAR vecplanb [25]; */ 
struct { unsigned short len; unsigned char arr[25]; } vecplanb;

/* VARCHAR vecplanc [25]; */ 
struct { unsigned short len; unsigned char arr[25]; } vecplanc;

/* VARCHAR vecpland [25]; */ 
struct { unsigned short len; unsigned char arr[25]; } vecpland;

char    vecplan  [5][25];

/* Columnas de Update Secuencias */

/* VARCHAR valorb   [26]; */ 
struct { unsigned short len; unsigned char arr[26]; } valorb;

/* VARCHAR cuenta_rb[15]; */ 
struct { unsigned short len; unsigned char arr[15]; } cuenta_rb;


/* Columnas de Update Secuencias */

/* VARCHAR cuenta_rs[15]; */ 
struct { unsigned short len; unsigned char arr[15]; } cuenta_rs;

/* VARCHAR codigo_rs[15]; */ 
struct { unsigned short len; unsigned char arr[15]; } codigo_rs;


double  capital;
double  reserva;
double  reservan;
double  imporrenta;
double  total[10];
char    cadena[240];
char    cadena2[240];
char    cadena3[240];
char    cadena4[240];
char    cadena5[240];
char    cadenon[240];
char    login[220];
char    copias[5];
char    cierre[2];
char    vecinf[20][24];
char    timbrado[2];

/* sucursales y c.costo */

/* VARCHAR sucursal   [20]; */ 
struct { unsigned short len; unsigned char arr[20]; } sucursal;

/* VARCHAR cen_cos    [20]; */ 
struct { unsigned short len; unsigned char arr[20]; } cen_cos;

/* VARCHAR sucursali  [10]; */ 
struct { unsigned short len; unsigned char arr[10]; } sucursali;

/* VARCHAR sucursalf  [10]; */ 
struct { unsigned short len; unsigned char arr[10]; } sucursalf;

/* VARCHAR cen_cosi   [04]; */ 
struct { unsigned short len; unsigned char arr[4]; } cen_cosi;

/* VARCHAR cen_cosf   [04]; */ 
struct { unsigned short len; unsigned char arr[4]; } cen_cosf;

/* VARCHAR nomb_suci  [12]; */ 
struct { unsigned short len; unsigned char arr[12]; } nomb_suci;

/* VARCHAR nomb_sucf  [12]; */ 
struct { unsigned short len; unsigned char arr[12]; } nomb_sucf;


/* VARCHAR sucursalb  [05]; */ 
struct { unsigned short len; unsigned char arr[5]; } sucursalb;

/* VARCHAR cen_cosb   [03]; */ 
struct { unsigned short len; unsigned char arr[3]; } cen_cosb;

/* VARCHAR sucursal_rs[05]; */ 
struct { unsigned short len; unsigned char arr[5]; } sucursal_rs;

/* VARCHAR cen_cos_rs [03]; */ 
struct { unsigned short len; unsigned char arr[3]; } cen_cos_rs;


/* EXEC SQL END DECLARE SECTION; */ 

/* EXEC SQL INCLUDE SQLCA;
 */ 
/* Copyright (c) 1985,1986 by Oracle Corporation. */

/*
NAME
  SQLCA : SQL Communications Area.
FUNCTION
  Contains no code. Oracle fills in the SQLCA with status info
  during the execution of a SQL stmt.
NOTES
  If the symbol SQLCA_STORAGE_CLASS is defined, then the SQLCA
  will be defined to have this storage class. For example:

    #define SQLCA_STORAGE_CLASS extern

  will define the SQLCA as an extern.

  If the symbol SQLCA_INIT is defined, then the SQLCA will be
  statically initialized. Although this is not necessary in order
  to use the SQLCA, it is a good pgming practice not to have
  unitialized variables. However, some C compilers/OS's don't
  allow automatic variables to be init'd in this manner. Therefore,
  if you are INCLUDE'ing the SQLCA in a place where it would be
  an automatic AND your C compiler/OS doesn't allow this style
  of initialization, then SQLCA_INIT should be left undefined --
  all others can define SQLCA_INIT if they wish.

  If the symbol SQLCA_NONE is defined, then the SQLCA variable will
  not be defined at all.  The symbol SQLCA_NONE should not be defined
  in source modules that have embedded SQL.  However, source modules
  that have no embedded SQL, but need to manipulate a sqlca struct
  passed in as a parameter, can set the SQLCA_NONE symbol to avoid
  creation of an extraneous sqlca variable.

*/

#ifndef SQLCA
#define SQLCA 1

struct   sqlca
         {
         /* ub1 */ char    sqlcaid[8];
         /* b4  */ long    sqlabc;
         /* b4  */ long    sqlcode;
         struct
           {
           /* ub2 */ unsigned short sqlerrml;
           /* ub1 */ char           sqlerrmc[70];
           } sqlerrm;
         /* ub1 */ char    sqlerrp[8];
         /* b4  */ long    sqlerrd[6];
         /* ub1 */ char    sqlwarn[8];
         /* ub1 */ char    sqlext[8];
         };

#ifndef SQLCA_NONE 
#ifdef SQLCA_STORAGE_CLASS
  SQLCA_STORAGE_CLASS struct sqlca sqlca
#else
         struct sqlca sqlca
#endif

# ifdef  SQLCA_INIT
         = {
         {'S', 'Q', 'L', 'C', 'A', ' ', ' ', ' '},
         sizeof(struct sqlca),
         0,
         { 0, {0}},
         {'N', 'O', 'T', ' ', 'S', 'E', 'T', ' '},
         {0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0},
         {0, 0, 0, 0, 0, 0, 0, 0}
         }
#endif /* SQLCA_INIT */
         ;

#endif 

#endif 

/* end SQLCA */


extern double redondo();

void main(argc, argv)
int     argc;
char    *argv[];
{

char	device[6];
int	staora;
int	status = 0;

    if (argc < 7)
       {
	printf ("Incorrecta invocacion:\n");
        printf ("Uso : codigo_emp sucursali sucursalf c.costoi c.costof aaaamm copias pagina device cierre(#) timbrado(s/n) userid/password\n");
	printf ("      cierre : 0=Solo imprime el G Y P\n");
	printf ("      cierre : 1=Hace el movimiento del cierre\n");
	printf ("      cierre : 2=Hace la actualizacion de los saldos\n");
	printf ("      cierre : 3=P Y G de un mes\n\n");
	printf ("      device : t salida por terminal\n");
	printf ("      device : s salida standar     \n");
	printf ("               Px salida por impresora (x nro printer)\n");
	printf ("               userid/password nombre usuario y password\n");
        exit (1);
       }
       strcpy (codigo_emp.arr,     argv[1]);
       codigo_emp.len = strlen(codigo_emp.arr);

       strcpy (sucursali.arr,  argv[2]);
       sucursali.len  =        strlen(sucursali.arr);
       strcpy (sucursalf.arr,  argv[3]);
       sucursalf.len  =        strlen(sucursalf.arr);
       strcpy (cen_cosi.arr,   argv[4]);
       cen_cosi.len   =        strlen(cen_cosi.arr);
       strcpy (cen_cosf.arr,   argv[5]);
       cen_cosf.len   =        strlen(cen_cosf.arr);

       strcpy (copias,         argv[7]);
       strcpy (pagina,         argv[8]);
       strcpy (device,         argv[9]);
       strlow (device);
       strcpy (cierre,         argv[10]);
       strcpy (timbrado,       argv[11]);
       strlow (timbrado);

    if (!strpos ("/", argv[12]))
       {
        printf ("user id/password incorrecto.\n");
	exit (1);
       }

    strcpy (uid.arr,    argv[12]);
    uid.len = strlen(uid.arr);

/*
*****************************************************
* Establecer conexion concurrente con ORACLE (orlon) *
*****************************************************
*/

    /* EXEC SQL CONNECT :uid; */ 

{
    struct sqlexd sqlstm;

    sqlstm.sqlvsn = 8;
    sqlstm.arrsiz = 3;
    sqlstm.iters = (unsigned long  )100;
    sqlstm.offset = (unsigned short)2;
    sqlstm.cud = sqlcud0;
    sqlstm.sqlest = (unsigned char  *)&sqlca;
    sqlstm.sqlety = (unsigned short)0;
    sqlstm.sqhstv[0] = (unsigned char  *)&uid;
    sqlstm.sqhstl[0] = (unsigned long  )102;
    sqlstm.sqindv[0] = (         short *)0;
    sqlstm.sqharm[0] = (unsigned long )0;
    sqlstm.sqphsv = sqlstm.sqhstv;
    sqlstm.sqphsl = sqlstm.sqhstl;
    sqlstm.sqpind = sqlstm.sqindv;
    sqlstm.sqparm = sqlstm.sqharm;
    sqlstm.sqparc = sqlstm.sqharc;
    sqlcxt((void **)0, &sqlctx, &sqlstm, &sqlfpn);
}



    if (sqlca.sqlcode==-1915)
       {
	fprintf (stderr,"Oracle Base de Datos no esta activa. SGA (
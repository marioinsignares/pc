/*****************************************************************
* ORDENLC.C Version 1.0 - Rev 1.2 - May. 29/90.
*
* ordenlc.c. Listado de Ordenes de De talla de lentes de contacto.
*
* Uso : ordenlc numero_orden device userid/password
*
* Martin A. Toloza L. Creado Febrero 13-1998.
* Teodoro Tarud & Cia Ltda.
*
*/

#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>

void titulos();
void ver_tipo_material();
void leer_servicios();
void imprimo_servicios();
void totales();
void Rx_procesor();
void hacer_asiento();
void reverso_asiento();
void ver_inf();
				     /* Parametros de comunicacion con ORACLE */
        		             /* Variables de recepcion para datos */
EXEC SQL BEGIN DECLARE SECTION;

VARCHAR uid[100];
                                 /* Ordenes_c (C1) */
double  numero_orden;
int     loop_2 = 0;
int     traidos = 0;
int     num_ret = 0;
VARCHAR codigo_cliente [6];
VARCHAR nomb_clie      [51];
VARCHAR nomb_ciu       [30];
VARCHAR nomb_clase     [14];
VARCHAR tipo_material  [4];
VARCHAR fecha_control  [70];
VARCHAR fecha_cliente  [70];
double  codigo_nit;
double  valor_material;
double  valor_desctos;
double  valor_otros;
double  valor_total;
double  consecutivo;
double  ano_mes;
float   numero_caja;
VARCHAR color_caja     [02];
VARCHAR estado         [02];
VARCHAR orden          [12];
                                 /* Ordenes_d (C2) */
VARCHAR d_tipo_material[03];
float   diametro;
VARCHAR curva_base     [05];
float   esfera;
float   cilindro;
int     eje;
int     cantidad;
double  valor_venta;
VARCHAR lado_lente     [02];
VARCHAR ano_mesa       [08];
VARCHAR consecutivoa   [08];
                                 /* Tipos (C3) */
VARCHAR nomb_tipo      [26];
VARCHAR clase_material [02];
VARCHAR tipo_mat       [04];
                                 /* Servicios_len (C4) */
VARCHAR nomb_servicio  [26];
int     cantidad_srv;
double  valor_servicio;
VARCHAR tipo_servicio  [03];
                                 /* Ordenes_r (C5) */
VARCHAR observacion    [31];
float   gaveta;
float   pfactu;
                                 /* Ordenes_d (C6) */
double  tot_lin;
                                 /* Ordenes_o (C7) */
double  tot_lin2;

/* VARIABLES PARA ASIENTOS CONTABLES */

VARCHAR codigo_emp[5];
VARCHAR ultimo_numero_c[10];
VARCHAR fecha_corte_c[20];
VARCHAR vecinf      [20][14];
                                 /* Movto_C (C3) */
VARCHAR comprobanteb[07];
VARCHAR consecutivob[07];
VARCHAR fechab      [20];
                                 /* Movto_D (C4) */
double  secuencia;
VARCHAR secuenciab  [7];
VARCHAR cuentab     [15];
VARCHAR infa        [14];
VARCHAR infb        [14];
VARCHAR infc        [14];
VARCHAR infd        [14];
VARCHAR codigo_nitb [6];
VARCHAR valor_debb  [15];
VARCHAR valor_creb  [15];
double  costo_promedio_p;
double  valor;
char    inf         [5][14];
                                 /* Control_Mes (C5) */
VARCHAR fuenteb     [3];
double  consecutivo15;
float   nitn;
                                 /* Acumulados (C6) */
VARCHAR cuenta_db   [15];
VARCHAR cuenta_cr   [15];
VARCHAR fecha_asto  [20];
VARCHAR codigo      [03];
VARCHAR ano_mesi    [20];
VARCHAR codigox     [15];
                                 /* Plan (C8) */
VARCHAR veca        [14];
VARCHAR vecb        [14];
VARCHAR vecc        [14];
VARCHAR vecd        [14];
char    vecplan     [5][14];

EXEC SQL END DECLARE SECTION;
EXEC SQL INCLUDE SQLCA;
                                            /* Variables globales del usuario */
#define TITULO_1 "TEODORO TARUD & CIA LTDA."
#define TITULO_2 "Nit. 890.112.740-2"
#define A_F1     "###,###.##"
char *fmtnum(), r_t[100];
double  tot_pag;                                   /* Total    de Paginas */
int     con_pag;                                   /* Contador de Paginas */
int     con_lin= 22;                               /* Contador de Lineas  */
int     staora = 0;
int     oraest = 0;
char    fecha[10];
char    hora[12];
char    nombre_tipo[33];
double  subtotal;
double  cb;
double  costo_venta;
double  costo_factura;
int     i;
int     j, k;
char    cadena[100];
char    lineas[132];

void main(argc, argv)
int     argc;
char    *argv[];
{

char	device[6];
int	status = 0;

    if (argc < 4)
       {
	printf ("Incorrecta invocacion:\n");
	printf ("Uso : ordenlc numero_orden device userid/password\n");
	printf ("      device : t salida por terminal\n");
	printf ("               Px salida por impresora (x nro printer)\n");
	printf ("               userid/password nombre usuario y password\n");
        exit (1);
       }

       strcpy (orden.arr, argv[1]);
       orden.len   =      strlen(orden.arr);
       strcpy (device,    argv[2]);
       strlow (device);

    if (!strpos ("/", argv[3]))
       {
        printf ("user id/password incorrecto.\n");
	exit (1);
       }

    strcpy (uid.arr,   argv[3]);
    uid.len   =        strlen(uid.arr);

    strcpy(codigo_emp.arr,"1");
    codigo_emp.len  = strlen(codigo_emp.arr);

/******************************************************
 * Establecer conexion concurrente con ORACLE (orlon) *
 ******************************************************/
    EXEC SQL CONNECT :uid;

    if (sqlca.sqlcode==-1915)
       {
	fprintf (stderr,"Oracle Base de Datos no esta activa. SGA (%d)\n",
		 	sqlca.sqlcode);
        exit (1);
       }
    else
       if (sqlca.sqlcode==-1017)
	  {
	   fprintf (stderr,"User Name/Password es Invalido. Re-intente.\n");
	   exit (1);
	  }
       else
          if (sqlca.sqlcode)
	     exit (1);

    busco_impresora(device);
    abre_impresora("1");

/**********************************************
 * Procesar una sentencia SQL (oexec).        *
 **********************************************/

    EXEC SQL select numero_orden, codigo_cliente, n.nombre,
                    nvl(n.ciudad_env,nvl(n.nombre_muni,c.nombre)),
                    cl.nombre, o.diam_pedido||o.tipo_material,
                    to_char(fecha_control,'DD-MON-YYYY hh:mi am'),
                    nvl(valor_material,0), nvl(valor_desctos,0),
                    nvl(valor_otros,0),    nvl(valor_total,0),
                    o.consecutivo, o.ano_mes,
                    o.numero_caja, o.color_caja, o.estado
             into  :numero_orden, :codigo_cliente, :nomb_clie, :nomb_ciu,
                   :nomb_clase, :tipo_material, :fecha_control,
                   :valor_material, :valor_desctos, :valor_otros, :valor_total,
                   :consecutivo, :ano_mes, :numero_caja, :color_caja, :estado
             from   nits n,ordenes_c o,ciudades c, clase cl
             where  n.codigo_nit in (select codigo_nit
                                     from   clientes
                                     where  clientes.codigo_cliente in
                                     (select codigo_cliente
                                      from ordenes_c
                                      where numero_orden = :orden))    and
                    n.codigo_ciu     = c.codigo                        and
                    o.clase_material = cl.clase_material               and
                    numero_orden     = :orden;

    staora  = sqlca.sqlcode;
    if (staora != -1405 && staora != 1403 && staora != 0)
        fprintf (stderr, "Error leyendo Ordenes_c (%d)\n", staora);

    codigo_cliente.arr [codigo_cliente.len] = '\0';
    nomb_clie.arr      [nomb_clie.len]      = '\0';
    nomb_ciu.arr       [nomb_ciu.len]       = '\0';
    nomb_clase.arr     [nomb_clase.len]     = '\0';
    tipo_material.arr  [tipo_material.len]  = '\0';
    fecha_control.arr  [fecha_control.len]  = '\0';
    color_caja.arr     [color_caja.len]     = '\0';
    estado.arr         [estado.len]         = '\0';

    sprintf(ano_mesa.arr,"%8.0f",ano_mes);
    ano_mesa.len     =   strlen(ano_mesa.arr);
    sprintf(consecutivoa.arr,"%5.0f",consecutivo);
    consecutivoa.len =   strlen(consecutivoa.arr);


    EXEC SQL DECLARE C2 CURSOR FOR
             select nvl(d.tipo_material, o.tipo_material),
                    d.diametro, d.curva_base, esfera,
                    cilindro, eje, cantidad, valor_venta, lado_lente,
                    costo_promedio_p
             from   ordenes_c o, ordenes_d d
             where  d.consecutivo = o.consecutivo  and
                    d.ano_mes     =  :ano_mesa     and
                    numero_orden  =  :orden;

    EXEC SQL DECLARE C4 CURSOR FOR
             select s.nombre, o.cantidad, o.cantidad*o.valor_unidad
             from   ordenes_o o, servicios_len s
             where  o.tipo_servicio = s.tipo_servicio and
                    o.tipo_trabajo  = s.tipo_trabajo  and
                    o.consecutivo   =  :consecutivoa  and
                    o.ano_mes       =  :ano_mesa      and
                    o.tipo_servicio =  :tipo_servicio and
                    s.lista         = (select lista
                                       from   clientes
                                       where  codigo_cliente = :codigo_cliente )
             order by s.secuencia;

    EXEC SQL select observacion, gabeta, factura,
                    to_char(fecha_cliente,'DD-MON-YYYY')
             into  :observacion, :gaveta, :pfactu,
                   :fecha_cliente
             from   ordenes_r
             where  numero_orden    = :orden;

    if (sqlca.sqlcode != -1405 && sqlca.sqlcode != 1403 && sqlca.sqlcode != 0)
        fprintf (stderr, "Error leyendo Ordenes_r C5(%d)\n", sqlca.sqlcode);

    observacion.arr    [observacion.len]    = '\0';
    fecha_cliente.arr  [fecha_cliente.len]  = '\0';

    EXEC SQL select count(*) into :tot_lin
             from   ordenes_d
             where  ano_mes       = :ano_mesa  and
                    consecutivo   = :consecutivoa;

    if (sqlca.sqlcode != -1405 && sqlca.sqlcode != 1403 && sqlca.sqlcode != 0)
        fprintf (stderr, "Error leyendo Ordenes_d C6(%d)\n", sqlca.sqlcode);

    EXEC SQL select count(*) into :tot_lin2
             from   ordenes_o
             where  ano_mes       = :ano_mesa  and
                    consecutivo   = :consecutivoa;

    if (sqlca.sqlcode != -1405 && sqlca.sqlcode != 1403 && sqlca.sqlcode != 0)
        fprintf (stderr, "Error leyendo Ordenes_o C7(%d)\n", sqlca.sqlcode);

/***************************************/

    EXEC SQL DECLARE C8 CURSOR FOR
             select inf
             from   infacu;

    EXEC SQL OPEN C8;

    staora  = 0;
    traidos = 0;
    num_ret = 0;
    while (staora == 0) {

          EXEC SQL FETCH C8 INTO :vecinf;

          if (sqlca.sqlcode != 1403 && sqlca.sqlcode != 0)
             fprintf (stderr, "Error leyendo C8 (%d)\n", sqlca.sqlcode);

          staora  = sqlca.sqlcode;
          traidos = sqlca.sqlerrd[2];

          for (loop_2 = 0; loop_2 < (traidos - num_ret); loop_2++) {
              vecinf[loop_2].arr  [vecinf[loop_2].len] = '\0';
          }
          num_ret = traidos;
    }
    k = traidos;
    EXEC SQL CLOSE C8;

/***************************************/

    tot_pag=ceil((tot_lin+tot_lin2)/7);
    strcpy(fecha,fecha_control.arr);
    strorg(fecha,1,11);
    strcpy(hora,fecha_control.arr);
    strorg(hora,13,11);
//    fprintf (fp, "%s%s%c\r",line_feed6,set_vertical,22);
    fprintf(fp,"%s%s%c%s%c%c%s%c%c\r",line_feed6,diezcpi,27,"C",22,27,"B",17,0);
    titulos();

    EXEC SQL OPEN C2;
    staora  = 0;
    while (staora == 0) {

          EXEC SQL FETCH C2 INTO :d_tipo_material, :diametro, :curva_base,
                                 :esfera, :cilindro, :eje,
                                 :cantidad, :valor_venta, :lado_lente,
                                 :costo_promedio_p;
          staora  = sqlca.sqlcode;
          if (staora ==  1403) break;
          if (staora == -1405)
              staora  = 0;
          else if (staora)
                   fprintf (stderr, "Error leyendo C2 (%d)\n", staora);

          d_tipo_material.arr [d_tipo_material.len] = '\0';
          curva_base.arr      [curva_base.len]      = '\0';
          lado_lente.arr      [lado_lente.len]      = '\0';

          ver_tipo_material();
          if (con_lin > 21)
              titulos();
          if (cantidad > 0) {
              fprintf (fp, "%s%s",diezcpi,condensado_on);
              fprintf (fp, "%-13s" ,nomb_clase.arr);
              fprintf (fp, "%-35s  " ,nombre_tipo);
              fprintf (fp, "%2.1f   " ,diametro);
              cb=0;
              if (strlen(curva_base.arr)) {
                 strcpy(cadena,curva_base.arr);
                 cb=atof(cadena);
                 cb=cb/10;
              }
              fprintf (fp, "%2.2f    " ,cb);
              fprintf (fp, "%6.2f%2s",esfera," ");
              if (!strcmp(tipo_material.arr,"S")) {
                  fprintf (fp, "%6.2f%3s  ",cilindro," ");
                  fprintf (fp, "%3d%19s  ",eje," ");
             }
             else fprintf (fp, "%36s"," ");
             fprintf (fp, "%8d  "   ,cantidad);
             sprintf (cadena, "%7.0f",cantidad*valor_venta);
             costo_venta+=cantidad*costo_promedio_p;
             fmtnum("z,zzz,zz9",cadena,r_t);
             fprintf (fp, "%s%s%12s\n",condensado_off,elite,r_t);
             con_lin++;
          }
    }

    totales();

    Rx_procesor();
    fprintf(fp,"%c\r",11);
/*    con_lin = 17;
    for (i=1;i<22-con_lin;i++)
        fprintf(fp,"\n");
*/
    cierre_impresora();

    EXEC SQL CLOSE C2;
    EXEC SQL CLOSE C4;


    EXEC SQL COMMIT WORK RELEASE;

    exit   (0);
}

void ver_tipo_material()
{
 if (strcmp(tipo_material.arr,"V")) {
     if (strcmp(tipo_material.arr,"C")) {
        if (strcmp(tipo_material.arr,"O"))
           if (strcmp(tipo_material.arr,"D"))
              strcpy(tipo_mat.arr,tipo_material.arr);
           else strcpy(tipo_mat.arr,d_tipo_material.arr);
        else strcpy(tipo_mat.arr,d_tipo_material.arr);
     }
     else strcpy(tipo_mat.arr,tipo_material.arr);
 }
 else strcpy(tipo_mat.arr,tipo_material.arr);
 tipo_mat.len  = strlen(tipo_mat.arr);

 EXEC SQL select nombre, clase_material
          into  :nomb_tipo, :clase_material
          from   tipos
          where  tipo_material  = :tipo_mat;
 oraest  = sqlca.sqlcode;
 if (sqlca.sqlcode != -1405 && sqlca.sqlcode != 1403 && sqlca.sqlcode != 0)
     fprintf (stderr, "Error leyendo Tipos C3 (%d)\n", sqlca.sqlcode);

 nomb_tipo.arr      [nomb_tipo.len]      = '\0';
 clase_material.arr [clase_material.len] = '\0';
 strcpy(nombre_tipo,nomb_tipo.arr);
}


void leer_servicios()
{
 tipo_servicio.len = strlen(tipo_servicio.arr);
 EXEC SQL OPEN C4;

 EXEC SQL FETCH C4 INTO :nomb_servicio, :cantidad_srv, :valor_servicio;
 oraest  = sqlca.sqlcode;
 if (oraest == -1405)
     oraest  = 0;
}

void imprimo_servicios()
{
 while (!oraest) {
       nomb_servicio.arr [nomb_servicio.len] = '\0';
       subtotal+=valor_servicio;
       sprintf (cadena,"%6d",cantidad_srv);
       fprintf (fp,"%32s%25s%26s"," ",nomb_servicio.arr,fmtnum("zzz,zz9",cadena,r_t));
       sprintf (cadena,"%6.2f",valor_servicio);
       fprintf (fp,"%13s\n",fmtnum("zz,zzz,zz9",cadena,r_t));
       con_lin++;
       EXEC SQL FETCH C4 INTO :nomb_servicio, :cantidad_srv, :valor_servicio;
       oraest  = sqlca.sqlcode;
       if (oraest == -1405)
           oraest  = 0;
 }
}

/************************
* TOTALES()
*    Imprime totales en el archivo de spool.
*/


void totales()
{
/*    int rc; */
    fprintf (fp,"%s\r",elite);
    if (strcmp (lado_lente.arr,"S")) {
       if (valor_material != valor_total) {
           if (con_lin > 18)
               titulos();
           sprintf (cadena,"%6.2f",valor_material);
           fprintf (fp,"%s%s%57s%s%39s\n",condensado_off,enfatizado_on,"VALOR MATERIAL : .........................",enfatizado_off,fmtnum("$$$,$$9",cadena,r_t));
           con_lin++;
       }
    }
    subtotal = valor_material;

    strcpy(tipo_servicio.arr,"OT");
    leer_servicios();
    if (!oraest) {
       if (con_lin > 18)
          titulos();
       fprintf (fp,"%s%32s%s\r",enfatizado_on,"OTROS : ",enfatizado_off);
       imprimo_servicios();
    }
    if (subtotal != valor_total) {
       if (con_lin > 18)
          titulos();
       sprintf (cadena,"%6.2f",subtotal);
       fprintf (fp,"%s%32s%s%64s\n",enfatizado_on,"SUBTOTAL ",enfatizado_off,fmtnum("z,zzz,zz9",cadena,r_t));
       con_lin++;
    }
    if (valor_desctos > 0) {
       if (con_lin > 18)
           titulos();
       sprintf (cadena,"%6.2f",valor_desctos);
       fprintf (fp,"%s%32s%s%51s\n",enfatizado_on,"DESCUENTOS ",enfatizado_off,fmtnum("zzz,zz9",cadena,r_t));
       con_lin++;
    }
//    for (i=1;i<18-con_lin;i++)
//         fprintf(fp,"\n");
//    sprintf (cadena,"%6.2f",valor_total);
    if (con_lin <= 16)
       fprintf(fp,"%c\r",11);
    sprintf (cadena,"%6.2f",valor_total);
    fprintf (fp,"%s%s%51s%s%45s%s\n",condensado_off,enfatizado_on," ",enfatizado_off,fmtnum("$$$,$$$,$$9",cadena,r_t),diezcpi);
    con_lin++;
    con_pag=0;
    fprintf (fp,"\n");
    fprintf (fp,"%s%s%s\r",condensado_on,"Importado por LABOCOSTA S.A., Registro sanitario No. INVIMA 2009 DM-0003426",condensado_off);
//    fprintf (fp,"%s\r",condensado_off);
    hacer_asiento();
}

/************************
* Rx_procesor
*    Imprime Rx_procesor.
*/

void Rx_procesor()
{
/*  system("rx_procesor"); */
}

/************************
* TITULOS()
*    Imprime titulos en el archivo de spool.
*/

void titulos()
{
  for (i=0;i<22-con_lin;i++)
       fprintf(fp,"\n");
  con_pag++;
  strcpy(cadena,fecha);
  numero_fecha(cadena);
  fprintf (fp,"%s%s%s%s%34s%6.0f%s%s%s\n\n",condensado_off,diezcpi,enfatizado_on,ancho_on,alto_on,numero_orden,ancho_off,alto_off,enfatizado_off);
  fprintf (fp,"%34s\n%40s%5.0f%s  %s%s%5.0f%s%s%s%s %s%s %s\n",codigo_cliente.arr," ",consecutivo,elite,ancho_on,enfatizado_on,numero_caja,"-",color_caja.arr,ancho_off,diezcpi,cadena,enfatizado_off,hora);
//  fprintf (fp,"%s\n%40s%5.0f%s  %s%s%5.0f%s%s%s%s %s%s %s\n",codigo_cliente.arr," ",consecutivo,elite,ancho_on,enfatizado_on,numero_caja,"-",color_caja.arr,ancho_off,diezcpi,cadena,enfatizado_off,hora);
  fprintf (fp,"%s%s%s\n",elite,enfatizado_on,nomb_clie.arr);
  fprintf (fp,"%-49s%-39s%s%02d    %02.0f\n\n",nomb_ciu.arr,"CONTACTO",enfatizado_off,con_pag,tot_pag);
  fprintf (fp,"%53s%11s\n"," ","Fec.Cliente");
  sprintf(cadena,"%6.0f",pfactu);
  fmtnum("zzzzzz",cadena,r_t);
  fprintf (fp,"%12s",cadena);
  sprintf(cadena,"%6.0f",gaveta);
  fmtnum("zzzzzz",cadena,r_t);
  fprintf (fp,"%14s %-26s%11s\n\n",cadena,observacion.arr,fecha_cliente.arr);
  con_lin = 10;
  if (!strcmp(estado.arr,"R")) {
      fprintf (fp,"%30s%s%s\n",ancho_on,"**** A N U L A D A ****",ancho_off);
      con_lin++;
  }
}

void hacer_asiento()
{

  strcpy(fuenteb.arr,"18");
  fuenteb.len = strlen(fuenteb.arr);

  strcpy(comprobanteb.arr,orden.arr);
  comprobanteb.len = strlen(comprobanteb.arr);

  strcpy(fechab.arr,fecha);
  fechab.len = strlen(fechab.arr);

//  printf("0) codigo_emp<%s> ano_mesa<%s> comprobanteb<%s> fechab<%s>", codigo_emp.arr, ano_mesa.arr, comprobanteb.arr, fechab.arr); getchar();

/* Lee consecutivo de control_mes Fte 15 Cns ultimo Asiento Aj x Depreciacion */
//  printf("1) fuenteb<%s> ano_mesa<%s> codigo_emp<%s>",fuenteb.arr,ano_mesa.arr,codigo_emp.arr); getchar();
  EXEC SQL select consecutivo   into :consecutivo15
           from control_mes
           where fuente       = to_number(:fuenteb)       and
                 ano_mes      = to_number(:ano_mesa)      and
                 codigo_emp   = to_number(:codigo_emp);

  if (sqlca.sqlcode != 1403 && sqlca.sqlcode != 0)
      fprintf (stderr, "Error leyendo Control_Mes (%d)\n", sqlca.sqlcode);

  sprintf(consecutivob.arr,"%5.0f",consecutivo15);
  consecutivob.len = strlen(consecutivob.arr);
  EXEC SQL
       select c.consecutivo, max(secuencia)
       into   :consecutivo, :secuencia
       from movto_d d, movto_c c
       where c.codigo_emp  = to_number(:codigo_emp)    and
             c.codigo_emp  = d.codigo_emp              and
             c.ano_mes     = d.ano_mes                 and
             c.consecutivo = d.consecutivo             and
             c.comprobante = to_number(:comprobanteb)  and
             c.clase       = 'CV'                      and
             c.tipo        = 9                         and
             c.ano_mes     = to_number(:ano_mesa)      and
             c.estado      <>   '2'
       group by c.consecutivo;

  if (sqlca.sqlcode == 0) {
       sprintf(consecutivob.arr,"%5.0f",consecutivo);
       consecutivob.len = strlen(consecutivob.arr);
       reverso_asiento();
  }
  else {
       strcpy(fuenteb.arr,"08");
       fuenteb.len = strlen(fuenteb.arr);

  /* Lee consecutivo de Control_mes Fte 08 sgte consecutivo */

//  printf("2) fuenteb<%s> ano_mesa<%s> codigo_emp<%s>",fuenteb.arr,ano_mesa.arr,codigo_emp.arr); getchar();
       EXEC SQL select consecutivo+1 into :consecutivo
                from control_mes
                where fuente       = to_number(:fuenteb)       and
                      ano_mes      = to_number(:ano_mesa)      and
                      codigo_emp   = to_number(:codigo_emp)
                for update of consecutivo;

       if (sqlca.sqlcode)
          {
           fprintf (stderr, "Error leyendo Control_Mes 08 (%d)\n", sqlca.sqlcode);
           consecutivo=1;
           sprintf(consecutivob.arr,"%5.0f",consecutivo);
           consecutivob.len = strlen(consecutivob.arr);
               /* Inserta en Control_Mes Fte 08 si no existe (C11) */
           EXEC SQL insert into control_mes
                    (FUENTE,ANO_MES,NOMBRE,CONSECUTIVO,CODIGO_EMP,VERSION)
                    values (:fuenteb, :ano_mesa, 'CONTROL SALIDAS CREDITO',
                            :consecutivob, :codigo_emp,1);
          }
       else {
             sprintf(consecutivob.arr,"%5.0f",consecutivo);
             consecutivob.len = strlen(consecutivob.arr);
                    /* Actualiza Cns de Fte 08 en control_mes (C12) */
             EXEC SQL update control_mes
                      set    consecutivo = :consecutivob
                      where codigo_emp   = to_number(:codigo_emp)    and
                            ano_mes      = to_number(:ano_mesa)      and
                            fuente       = :fuenteb;
       }

       strcpy(fuenteb.arr,"18");
       fuenteb.len = strlen(fuenteb.arr);

       EXEC SQL select consecutivo   into :consecutivo15
                from control_mes
                where fuente       = to_number(:fuenteb)       and
                      ano_mes      = to_number(:ano_mesa)      and
                      codigo_emp   = to_number(:codigo_emp)
                for update of consecutivo;

       if (sqlca.sqlcode)
          {
           fprintf (stderr, "Error leyendo Control_Mes 18 (%d)\n", sqlca.sqlcode);
                    /* Inserta en Control_Mes Fte 15 si no existe (C11) */
           EXEC SQL insert into control_mes
                    (FUENTE,ANO_MES,NOMBRE,CONSECUTIVO,CODIGO_EMP,VERSION)
                    values (:fuenteb, :ano_mesa, 'CONTROL SALIDAS CREDITO',
                            :consecutivob, :codigo_emp,1);
          }
       else {
               /* Actualiza Cns de Fte 15 en control_mes (C12) */
             EXEC SQL update control_mes
                      set    consecutivo = :consecutivob
                      where codigo_emp   = to_number(:codigo_emp)    and
                            ano_mes      = to_number(:ano_mesa)      and
                            fuente       = :fuenteb;
       }

//  printf("3) codigo_emp<%s> ano_mesa<%s> comprobanteb<%s> consecutivob<%s> fechab<%s>", codigo_emp.arr,ano_mesa.arr,comprobanteb.arr,consecutivob.arr,fechab.arr); getchar();
       EXEC SQL insert into movto_c
       (CODIGO_EMP, ANO_MES, COMPROBANTE, CONSECUTIVO, CLASE, DESCRIPCION, FECHA, TIPO,
	ESTADO, NITB, CODIGO_NITB, VALORB, RETENCION, CONTADO )
                values(:codigo_emp, :ano_mesa, :comprobanteb, :consecutivob, 'CV',
                       'LENTES DE CONTACTO',:fechab,'9', '0','','','','','');

       if (sqlca.sqlcode != 1403 && sqlca.sqlcode != 0)
           fprintf (stderr, "Error insertando Movto_C (%d)\n", sqlca.sqlcode);
  }

  staora  = 0;
  strcpy(cuenta_db.arr,"61359501");
  strcpy(cuenta_cr.arr,"14350101");
  cuenta_db.arr  [cuenta_db.len]  = '\0';
  cuenta_cr.arr  [cuenta_cr.len]  = '\0';
  fecha_asto.arr [fecha_asto.len] = '\0';
  codigo.arr     [codigo.len]     = '\0';
  codigo.len  =  strlen(codigo.arr);

/***************************************/
/* COSTO DE VENTAS CONTRA INVENTARIOS  */
/***************************************/

/* 1) Grabar Ventas de lentes de contacto ( Debito ) */

  if ( costo_venta > 0 ) {
     secuencia++;
     sprintf(secuenciab.arr,"%6.0f",secuencia);
     secuenciab.len = strlen(secuenciab.arr);

     strcpy(cuentab.arr,"61359502");
     cuentab.len = strlen(cuentab.arr);
     cuentab.arr  [cuentab.len]  = '\0';

     strcpy(codigox.arr,cuentab.arr);
     codigox.len = strlen(codigox.arr);

     for (i=1;i<=4;i++) {
          strcpy(inf[i],"");
     }
     strcpy(inf[1],cuentab.arr);
     strcpy(inf[2],comprobanteb.arr);

     ver_inf();
     strcpy (valor_creb.arr,"");
     valor_creb.len = strlen(valor_creb.arr);
     sprintf(valor_debb.arr,"%10.2f",costo_venta);
     valor_debb.len = strlen(valor_debb.arr);
                                         /* Graba en movto_d el Debito (C4) */
//  printf("6) codigo_emp<%s> ano_mesa<%s> consecutivob<%s> secuenciab<%s> cuentab<%s> infa<%s> infb<%s> infc<%s> infd<%s> codigo_nitb<%s> valor_debb<%s> valor_creb<%s>", codigo_emp.arr,ano_mesa.arr,consecutivob.arr,secuenciab.arr,cuentab.arr,infa.arr,infb.arr,infc.arr,infd.arr,codigo_nitb.arr,valor_debb.arr,valor_creb.arr ); getchar();
     EXEC SQL insert into movto_d
      		(CODIGO_EMP, ANO_MES,CONSECUTIVO,SECUENCIA,CUENTA,
		 INFA,INFB,INFC,INFD,CODIGO_NIT,VALOR_DEB,VALOR_CRE,SUCURSAL,CEN_COS)
              values(:codigo_emp, :ano_mesa, :consecutivob, :secuenciab,
                     :cuentab, :infa, :infb, :infc, :infd,
                     :codigo_nitb, :valor_debb, :valor_creb, '001', 1);

     if (sqlca.sqlcode != 1403 && sqlca.sqlcode != 0)
         fprintf (stderr, "Error Grabando Debito (%d)\n", sqlca.sqlcode);
  }

/* 2) Grabar Inventario de lentes de contacto ( Credito ) */

  if ( costo_venta > 0 ) {
     secuencia++;
     sprintf(secuenciab.arr,"%6.0f",secuencia);
     secuenciab.len = strlen(secuenciab.arr);

     strcpy(cuentab.arr,"14350220");
     cuentab.len = strlen(cuentab.arr);
     cuentab.arr  [cuentab.len]  = '\0';

     strcpy(codigox.arr,cuentab.arr);
     codigox.len = strlen(codigox.arr);

     for (i=1;i<=4;i++) {
          strcpy(inf[i],"");
     }

     strcpy(inf[2],comprobanteb.arr);

     ver_inf();
     strcpy (valor_debb.arr,"");
     valor_debb.len = strlen(valor_debb.arr);
     sprintf(valor_creb.arr,"%10.2f",costo_venta);
     valor_creb.len = strlen(valor_creb.arr);
                                         /* Graba en movto_d el Debito (C4) */
//  printf("6) codigo_emp<%s> ano_mesa<%s> consecutivob<%s> secuenciab<%s> cuentab<%s> infa<%s> infb<%s> infc<%s> infd<%s> codigo_nitb<%s> valor_debb<%s> valor_creb<%s>", codigo_emp.arr,ano_mesa.arr,consecutivob.arr,secuenciab.arr,cuentab.arr,infa.arr,infb.arr,infc.arr,infd.arr,codigo_nitb.arr,valor_debb.arr,valor_creb.arr ); getchar();
     EXEC SQL insert into movto_d
      		(CODIGO_EMP, ANO_MES,CONSECUTIVO,SECUENCIA,CUENTA,
		 INFA,INFB,INFC,INFD,CODIGO_NIT,VALOR_DEB,VALOR_CRE,SUCURSAL,CEN_COS)
              values(:codigo_emp, :ano_mesa, :consecutivob, :secuenciab,
                     :cuentab, :infa, :infb, :infc, :infd,
                     :codigo_nitb, :valor_debb, :valor_creb, '001', 1);

     if (sqlca.sqlcode != 1403 && sqlca.sqlcode != 0)
         fprintf (stderr, "Error Grabando Debito (%d)\n", sqlca.sqlcode);
  }

}

void reverso_asiento()
{

    EXEC SQL
         select max(secuencia)
         into   :secuencia
         from movto_d d, movto_c c
         where c.codigo_emp  = to_number(:codigo_emp)    and
               c.codigo_emp  = d.codigo_emp              and
               c.ano_mes     = d.ano_mes                 and
               c.consecutivo = d.consecutivo             and
               c.comprobante = to_number(:comprobanteb)  and
               c.clase       = 'CV'                      and
               c.tipo        = 9                         and
               c.ano_mes     = to_number(:ano_mesa)      and
               c.estado      <>   '2';

    if ( secuencia > 0 ) {
       EXEC SQL DECLARE C9 CURSOR FOR
            select d.consecutivo, cuenta, infa, infb, infc, infd, codigo_nit, sum(nvl(valor_deb,0)-nvl(valor_cre,0))
            from movto_d d, movto_c c
            where c.codigo_emp  = to_number(:codigo_emp)    and
                  c.codigo_emp  = d.codigo_emp              and
                  c.ano_mes     = d.ano_mes                 and
                  c.consecutivo = d.consecutivo             and
                  c.comprobante = to_number(:comprobanteb)  and
                  c.clase       = 'CV'                      and
                  c.tipo        = 9                         and
                  c.ano_mes     = to_number(:ano_mesa)      and
                  c.estado      <>   '2'
            group by d.consecutivo, cuenta, infa, infb, infc, infd, codigo_nit;

      EXEC SQL OPEN C9;
      EXEC SQL FETCH C9 INTO :consecutivo,  :cuentab,
                             :infa, :infb,  :infc, :infd,
                             :codigo_nit,   :valor;
      oraest  = sqlca.sqlcode;

      if (sqlca.sqlcode == -1405 )
          oraest = 0;
      else {
            if (sqlca.sqlcode != 1403 && sqlca.sqlcode != 0)
                fprintf (stderr, "Error leyendo C9 (%d)\n", sqlca.sqlcode);
      }

      cuentab.arr             [cuentab.len]            = '\0';
      infa.arr                [infa.len]               = '\0';
      infb.arr                [infb.len]               = '\0';
      infc.arr                [infc.len]               = '\0';
      infd.arr                [infd.len]               = '\0';

      while (oraest==0) {

           sprintf(consecutivob.arr,"%5.0f",consecutivo);
           consecutivob.len = strlen(consecutivob.arr);

           secuencia++;
           sprintf(secuenciab.arr,"%6.0f",secuencia);
           secuenciab.len = strlen(secuenciab.arr);

           if (codigo_nit==0)
              strcpy(codigo_nitb.arr,"");
           else sprintf(codigo_nitb.arr,"%5d",codigo_nit);
           codigo_nitb.len = strlen(codigo_nitb.arr);

           if ( valor > 0 ) {
               strcpy (valor_debb.arr,"");
               valor_debb.len = strlen(valor_debb.arr);
               sprintf(valor_creb.arr,"%10.2f",valor);
               valor_creb.len = strlen(valor_creb.arr);
           }
           else {
              strcpy (valor_creb.arr,"");
              valor_creb.len = strlen(valor_creb.arr);
              sprintf(valor_debb.arr,"%10.2f",valor*-1);
              valor_debb.len = strlen(valor_debb.arr);
          }
              EXEC SQL insert into movto_d
      		(CODIGO_EMP, ANO_MES,CONSECUTIVO,SECUENCIA,CUENTA,
		 INFA,INFB,INFC,INFD,CODIGO_NIT,VALOR_DEB,VALOR_CRE,SUCURSAL,CEN_COS)
                       values(:codigo_emp, :ano_mesa, :consecutivob, :secuenciab,
                              :cuentab, :infa, :infb, :infc, :infd,
                              :codigo_nitb, :valor_debb, :valor_creb, '001', 1);

              if (sqlca.sqlcode != 1403 && sqlca.sqlcode != 0)
                  fprintf (stderr, "Error Grabando movto_d (%d)\n", sqlca.sqlcode);

           EXEC SQL FETCH C9 INTO :consecutivo,  :cuentab,
                                  :infa, :infb,  :infc, :infd,
                                  :codigo_nit,   :valor;

           cuentab.arr             [cuentab.len]            = '\0';
           infa.arr                [infa.len]               = '\0';
           infb.arr                [infb.len]               = '\0';
           infc.arr                [infc.len]               = '\0';
           infd.arr                [infd.len]               = '\0';

           oraest  = sqlca.sqlcode;
           if (sqlca.sqlcode == 1403) break;

           if (sqlca.sqlcode == -1405 )
               oraest = 0;
           else {
                 if (sqlca.sqlcode != 1403 && sqlca.sqlcode != 0)
                     fprintf (stderr, "Error leyendo C9 (%d)\n", sqlca.sqlcode);
           }
      }
    }

}

void ver_inf()
{
  EXEC SQL select infa, infb, infc, infd
           into :veca, :vecb, :vecc, :vecd
           from   plan
           where  codigo_emp = :codigo_emp and
                  cuenta     = :cuentab;

  if (sqlca.sqlcode == 1403)
      printf ("Cuentab (%-s) no existe\n", cuentab.arr);

  veca.arr [veca.len] = '\0';
  vecb.arr [vecb.len] = '\0';
  vecc.arr [vecc.len] = '\0';
  vecd.arr [vecd.len] = '\0';

  strcpy (vecplan[1], veca.arr);
  strcpy (vecplan[2], vecb.arr);
  strcpy (vecplan[3], vecc.arr);
  strcpy (vecplan[4], vecd.arr);

  i=j=0;
  for (i=1;i<=4;i++) {
      if (!strcmp(vecplan[i],"NIT")) {
          sprintf(inf[i],"%12.0f",nitn);
      }
      else {
            for (j=1;j<=k;j++) {
                if (!strcmp(vecplan[i],vecinf[j].arr) && strcmp(vecplan[i],"") ) {
                   strcpy(inf[i],codigox.arr);
                }
            }
      }
  }
  strtri(inf[1]);
  strtri(inf[2]);
  strtri(inf[3]);
  strtri(inf[4]);
  strcpy (infa.arr, inf[1]);
  strcpy (infb.arr, inf[2]);
  strcpy (infc.arr, inf[3]);
  strcpy (infd.arr, inf[4]);
  infa.len = strlen(infa.arr);
  infb.len = strlen(infb.arr);
  infc.len = strlen(infc.arr);
  infd.len = strlen(infd.arr);
}

